Macro BOOST_DLL_ALIAS_SECTIONEDMacro BOOST_DLL_ALIAS_SECTIONEDHomeLibrariesPeopleFAQMoreMacro BOOST_DLL_ALIAS_SECTIONEDBOOST_DLL_ALIAS_SECTIONED — Same as BOOST_DLL_ALIAS but puts alias name into the user specified section. Synopsis// In header: &lt;boost/dll/alias.hpp&gt;BOOST_DLL_ALIAS_SECTIONED(FunctionOrVar, AliasName, SectionName)DescriptionExample: namespace foo {  void bar(std::string&amp;);  BOOST_DLL_ALIAS_SECTIONED(foo::bar, foo_bar, sect_1) // section "sect_1" now exports "foo_bar"} Parameters:AliasNameName of the alias. Must be a valid C identifier. FunctionOrVarFunction or variable for which an alias must be made. SectionNameName of the section. Must be a valid C identifier without quotes not longer than 8 bytes.Copyright © 2014 Renato Tegon Forti, Antony PolukhinCopyright © 2015 Antony PolukhinCopyright © 2016 Antony Polukhin, Klemens MorgensternCopyright © 2017-2022 Antony Polukhin        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/BOOST_DLL_ALIAS_SECTIONED.html
Redirect to generated documentation          Distributed under the Boost Software License, Version 1.0.      (See accompanying file LICENSE_1_0.txt or copy at      http://www.boost.org/LICENSE_1_0.txt) -->    Redirect to generated documentation            Automatic redirection failed, please go to    http://www.boost.org/doc/libs/master/doc/html/hash.html  https://www.boost.org/doc/libs/1_79_0/doc/html/hash.html
Macro BOOST_PROTO_EXTENDS_USING_ASSIGN_NON_DEPENDENTMacro BOOST_PROTO_EXTENDS_USING_ASSIGN_NON_DEPENDENTHomeLibrariesPeopleFAQMoreMacro BOOST_PROTO_EXTENDS_USING_ASSIGN_NON_DEPENDENTBOOST_PROTO_EXTENDS_USING_ASSIGN_NON_DEPENDENT — For exposing in classes that inherit from      proto::extends&lt;&gt;      the overloaded assignment operators defined therein. Unlike the      BOOST_PROTO_EXTENDS_USING_ASSIGN() macro,      BOOST_PROTO_EXTENDS_USING_ASSIGN_NON_DEPENDENT() is for use in non-dependent      contexts.      Synopsis// In header: &lt;boost/proto/extends.hpp&gt;BOOST_PROTO_EXTENDS_USING_ASSIGN_NON_DEPENDENT(Derived)Description        The standard usage of        proto::extends&lt;&gt;        is to define a class template that inherits from it. The derived class template automatically gets a        compiler-generated assignment operator that hides the ones defined in        proto::extends&lt;&gt;.        Using BOOST_PROTO_EXTENDS_USING_ASSIGN() in the derived class solves this problem.              However, if the expression extension is an ordinary class and not a class template, the usage of        BOOST_PROTO_EXTENDS_USING_ASSIGN() is in a so-called non-dependent context. In plain English,        it means it is illegal to use typename in some places where it is required in a class template.         In those cases, you should use BOOST_PROTO_EXTENDS_USING_ASSIGN_NON_DEPENDENT() instead.      		See also:		proto::extends&lt;&gt;BOOST_PROTO_EXTENDS_USING_ASSIGN()      Copyright © 2008 Eric Niebler        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/BOOST_PROTO__1_3_32_5_10_9.html
C++17 ExamplesC++17 ExamplesHomeLibrariesPeopleFAQMoreC++17 Examples        Coroutines        TS Support              Examples showing how to implement a chain of asynchronous operations using        the Coroutines TS.                  boost_asio/example/cpp17/coroutines_ts/echo_server.cpp                      boost_asio/example/cpp17/coroutines_ts/refactored_echo_server.cpp                      boost_asio/example/cpp17/coroutines_ts/chat_server.cpp                      boost_asio/example/cpp17/coroutines_ts/range_based_for.cpp          Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/examples/cpp17_examples.html
C++20 ExamplesC++20 ExamplesHomeLibrariesPeopleFAQMoreC++20 Examples        Channels              Example showing how to use a channel in conjunction with C++20 coroutines.                  boost_asio/example/cpp20/channels/throttling_proxy.cpp          Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/examples/cpp20_examples.html
C++03 ExamplesC++03 ExamplesHomeLibrariesPeopleFAQMoreC++03 Examples        Allocation              This example shows how to customise the allocation of memory associated with        asynchronous operations.                  boost_asio/example/cpp03/allocation/server.cpp                  Buffers              This example demonstrates how to create reference counted buffers that can        be used with socket read and write operations.                  boost_asio/example/cpp03/buffers/reference_counted.cpp                  Chat              This example implements a chat server and client. The programs use a custom        protocol with a fixed length message header and variable length message body.                  boost_asio/example/cpp03/chat/chat_message.hpp                      boost_asio/example/cpp03/chat/chat_client.cpp                      boost_asio/example/cpp03/chat/chat_server.cpp                  The following POSIX-specific chat client demonstrates how to use the posix::stream_descriptor        class to perform console input and output.                  boost_asio/example/cpp03/chat/posix_chat_client.cpp                  Echo              A collection of simple clients and servers, showing the use of both synchronous        and asynchronous operations.                  boost_asio/example/cpp03/echo/async_tcp_echo_server.cpp                      boost_asio/example/cpp03/echo/async_udp_echo_server.cpp                      boost_asio/example/cpp03/echo/blocking_tcp_echo_client.cpp                      boost_asio/example/cpp03/echo/blocking_tcp_echo_server.cpp                      boost_asio/example/cpp03/echo/blocking_udp_echo_client.cpp                      boost_asio/example/cpp03/echo/blocking_udp_echo_server.cpp                  Fork              These POSIX-specific examples show how to use Boost.Asio in conjunction with        the fork()        system call. The first example illustrates the steps required to start a        daemon process:                  boost_asio/example/cpp03/fork/daemon.cpp                  The second example demonstrates how it is possible to fork a process from        within a completion handler.                  boost_asio/example/cpp03/fork/process_per_connection.cpp                  HTTP        Client              Example programs implementing simple HTTP 1.0 clients. These examples show        how to use the read_until        and async_read_until        functions.                  boost_asio/example/cpp03/http/client/sync_client.cpp                      boost_asio/example/cpp03/http/client/async_client.cpp                  HTTP        Server              This example illustrates the use of asio in a simple single-threaded server        implementation of HTTP 1.0. It demonstrates how to perform a clean shutdown        by cancelling all outstanding asynchronous operations.                  boost_asio/example/cpp03/http/server/connection.cpp                      boost_asio/example/cpp03/http/server/connection.hpp                      boost_asio/example/cpp03/http/server/connection_manager.cpp                      boost_asio/example/cpp03/http/server/connection_manager.hpp                      boost_asio/example/cpp03/http/server/header.hpp                      boost_asio/example/cpp03/http/server/main.cpp                      boost_asio/example/cpp03/http/server/mime_types.cpp                      boost_asio/example/cpp03/http/server/mime_types.hpp                      boost_asio/example/cpp03/http/server/reply.cpp                      boost_asio/example/cpp03/http/server/reply.hpp                      boost_asio/example/cpp03/http/server/request.hpp                      boost_asio/example/cpp03/http/server/request_handler.cpp                      boost_asio/example/cpp03/http/server/request_handler.hpp                      boost_asio/example/cpp03/http/server/request_parser.cpp                      boost_asio/example/cpp03/http/server/request_parser.hpp                      boost_asio/example/cpp03/http/server/server.cpp                      boost_asio/example/cpp03/http/server/server.hpp                  HTTP        Server 2              An HTTP server using an io_context-per-CPU design.                  boost_asio/example/cpp03/http/server2/connection.cpp                      boost_asio/example/cpp03/http/server2/connection.hpp                      boost_asio/example/cpp03/http/server2/header.hpp                      boost_asio/example/cpp03/http/server2/io_context_pool.cpp                      boost_asio/example/cpp03/http/server2/io_context_pool.hpp                      boost_asio/example/cpp03/http/server2/main.cpp                      boost_asio/example/cpp03/http/server2/mime_types.cpp                      boost_asio/example/cpp03/http/server2/mime_types.hpp                      boost_asio/example/cpp03/http/server2/reply.cpp                      boost_asio/example/cpp03/http/server2/reply.hpp                      boost_asio/example/cpp03/http/server2/request.hpp                      boost_asio/example/cpp03/http/server2/request_handler.cpp                      boost_asio/example/cpp03/http/server2/request_handler.hpp                      boost_asio/example/cpp03/http/server2/request_parser.cpp                      boost_asio/example/cpp03/http/server2/request_parser.hpp                      boost_asio/example/cpp03/http/server2/server.cpp                      boost_asio/example/cpp03/http/server2/server.hpp                  HTTP        Server 3              An HTTP server using a single io_context and a thread pool calling io_context::run().                  boost_asio/example/cpp03/http/server3/connection.cpp                      boost_asio/example/cpp03/http/server3/connection.hpp                      boost_asio/example/cpp03/http/server3/header.hpp                      boost_asio/example/cpp03/http/server3/main.cpp                      boost_asio/example/cpp03/http/server3/mime_types.cpp                      boost_asio/example/cpp03/http/server3/mime_types.hpp                      boost_asio/example/cpp03/http/server3/reply.cpp                      boost_asio/example/cpp03/http/server3/reply.hpp                      boost_asio/example/cpp03/http/server3/request.hpp                      boost_asio/example/cpp03/http/server3/request_handler.cpp                      boost_asio/example/cpp03/http/server3/request_handler.hpp                      boost_asio/example/cpp03/http/server3/request_parser.cpp                      boost_asio/example/cpp03/http/server3/request_parser.hpp                      boost_asio/example/cpp03/http/server3/server.cpp                      boost_asio/example/cpp03/http/server3/server.hpp                  HTTP        Server 4              A single-threaded HTTP server implemented using stackless coroutines.                  boost_asio/example/cpp03/http/server4/file_handler.cpp                      boost_asio/example/cpp03/http/server4/file_handler.hpp                      boost_asio/example/cpp03/http/server4/header.hpp                      boost_asio/example/cpp03/http/server4/main.cpp                      boost_asio/example/cpp03/http/server4/mime_types.cpp                      boost_asio/example/cpp03/http/server4/mime_types.hpp                      boost_asio/example/cpp03/http/server4/reply.cpp                      boost_asio/example/cpp03/http/server4/reply.hpp                      boost_asio/example/cpp03/http/server4/request.hpp                      boost_asio/example/cpp03/http/server4/request_parser.cpp                      boost_asio/example/cpp03/http/server4/request_parser.hpp                      boost_asio/example/cpp03/http/server4/server.cpp                      boost_asio/example/cpp03/http/server4/server.hpp                  ICMP              This example shows how to use raw sockets with ICMP to ping a remote host.                  boost_asio/example/cpp03/icmp/ping.cpp                      boost_asio/example/cpp03/icmp/ipv4_header.hpp                      boost_asio/example/cpp03/icmp/icmp_header.hpp                  Invocation              This example shows how to customise handler invocation. Completion handlers        are added to a priority queue rather than executed immediately.                  boost_asio/example/cpp03/invocation/prioritised_handlers.cpp                  Iostreams              Two examples showing how to use ip::tcp::iostream.                  boost_asio/example/cpp03/iostreams/daytime_client.cpp                      boost_asio/example/cpp03/iostreams/daytime_server.cpp                      boost_asio/example/cpp03/iostreams/http_client.cpp                  Multicast              An example showing the use of multicast to transmit packets to a group of        subscribers.                  boost_asio/example/cpp03/multicast/receiver.cpp                      boost_asio/example/cpp03/multicast/sender.cpp                  Serialization              This example shows how Boost.Serialization can be used with asio to encode        and decode structures for transmission over a socket.                  boost_asio/example/cpp03/serialization/client.cpp                      boost_asio/example/cpp03/serialization/connection.hpp                      boost_asio/example/cpp03/serialization/server.cpp                      boost_asio/example/cpp03/serialization/stock.hpp                  Services              This example demonstrates how to integrate custom functionality (in this        case, for logging) into asio's io_context,        and how to use a custom service with basic_stream_socket&lt;&gt;.                  boost_asio/example/cpp03/services/basic_logger.hpp                      boost_asio/example/cpp03/services/daytime_client.cpp                      boost_asio/example/cpp03/services/logger.hpp                      boost_asio/example/cpp03/services/logger_service.cpp                      boost_asio/example/cpp03/services/logger_service.hpp                      boost_asio/example/cpp03/services/stream_socket_service.hpp                  SOCKS        4              Example client program implementing the SOCKS 4 protocol for communication        via a proxy.                  boost_asio/example/cpp03/socks4/sync_client.cpp                      boost_asio/example/cpp03/socks4/socks4.hpp                  SSL              Example client and server programs showing the use of the ssl::stream&lt;&gt;        template with asynchronous operations.                  boost_asio/example/cpp03/ssl/client.cpp                      boost_asio/example/cpp03/ssl/server.cpp                  Timeouts              A collection of examples showing how to cancel long running asynchronous        operations after a period of time.                  boost_asio/example/cpp03/timeouts/async_tcp_client.cpp                      boost_asio/example/cpp03/timeouts/blocking_tcp_client.cpp                      boost_asio/example/cpp03/timeouts/blocking_token_tcp_client.cpp                      boost_asio/example/cpp03/timeouts/blocking_udp_client.cpp                      boost_asio/example/cpp03/timeouts/server.cpp                  Timers              Example showing how to customise basic_waitable_timer using a different clock        type.                  boost_asio/example/cpp03/timers/time_t_timer.cpp                  Porthopper              Example illustrating mixed synchronous and asynchronous operations, and how        to use Boost.Lambda with Boost.Asio.                  boost_asio/example/cpp03/porthopper/protocol.hpp                      boost_asio/example/cpp03/porthopper/client.cpp                      boost_asio/example/cpp03/porthopper/server.cpp                  Nonblocking              Example demonstrating reactor-style operations for integrating a third-party        library that wants to perform the I/O operations itself.                  boost_asio/example/cpp03/nonblocking/third_party_lib.cpp                  Spawn              Example of using the boost::asio::spawn() function, a wrapper around the        Boost.Coroutine        library, to implement a chain of asynchronous operations using stackful coroutines.                  boost_asio/example/cpp03/spawn/echo_server.cpp                  UNIX Domain        Sockets              Examples showing how to use UNIX domain (local) sockets.                  boost_asio/example/cpp03/local/connect_pair.cpp                      boost_asio/example/cpp03/local/iostream_client.cpp                      boost_asio/example/cpp03/local/stream_server.cpp                      boost_asio/example/cpp03/local/stream_client.cpp                  Windows              An example showing how to use the Windows-specific function TransmitFile with Boost.Asio.                  boost_asio/example/cpp03/windows/transmit_file.cpp          Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/examples/cpp03_examples.html
C++14 ExamplesC++14 ExamplesHomeLibrariesPeopleFAQMoreC++14 Examples        Deferred              Examples showing how to use the experimental::deferred completion token.                  boost_asio/example/cpp14/deferred/deferred_1.cpp                      boost_asio/example/cpp14/deferred/deferred_2.cpp                      boost_asio/example/cpp14/deferred/deferred_3.cpp                      boost_asio/example/cpp14/deferred/deferred_4.cpp                      boost_asio/example/cpp14/deferred/deferred_5.cpp                      boost_asio/example/cpp14/deferred/deferred_6.cpp                      boost_asio/example/cpp14/deferred/deferred_7.cpp                  Echo              A collection of simple clients and servers, showing the use of both synchronous        and asynchronous operations.                  boost_asio/example/cpp14/echo/async_tcp_echo_server.cpp                      boost_asio/example/cpp14/echo/async_udp_echo_server.cpp                      boost_asio/example/cpp14/echo/blocking_tcp_echo_client.cpp                      boost_asio/example/cpp14/echo/blocking_tcp_echo_server.cpp                      boost_asio/example/cpp14/echo/blocking_udp_echo_client.cpp                      boost_asio/example/cpp14/echo/blocking_udp_echo_server.cpp                  Executors              Examples showing how to use the executor-related facilities.                  boost_asio/example/cpp14/executors/actor.cpp                      boost_asio/example/cpp14/executors/async_1.cpp                      boost_asio/example/cpp14/executors/async_2.cpp                      boost_asio/example/cpp14/executors/bank_account_1.cpp                      boost_asio/example/cpp14/executors/bank_account_2.cpp                      boost_asio/example/cpp14/executors/fork_join.cpp                      boost_asio/example/cpp14/executors/pipeline.cpp                      boost_asio/example/cpp14/executors/priority_scheduler.cpp                  Iostreams              Two examples showing how to use ip::tcp::iostream.                  boost_asio/example/cpp14/iostreams/http_client.cpp                  Operations              Examples showing how to implement composed asynchronous operations as reusable        library functions.                  boost_asio/example/cpp14/operations/composed_1.cpp                      boost_asio/example/cpp14/operations/composed_2.cpp                      boost_asio/example/cpp14/operations/composed_3.cpp                      boost_asio/example/cpp14/operations/composed_4.cpp                      boost_asio/example/cpp14/operations/composed_5.cpp                      boost_asio/example/cpp14/operations/composed_6.cpp                      boost_asio/example/cpp14/operations/composed_7.cpp                      boost_asio/example/cpp14/operations/composed_8.cpp                  Examples showing how to expose callback-based APIs as asynchronous operations.                  boost_asio/example/cpp14/operations/callback_wrapper.cpp                      boost_asio/example/cpp14/operations/c_callback_wrapper.cpp                  Parallel        Groups              Examples showing how to use the experimental::make_parallel_group operation.                  boost_asio/example/cpp14/parallel_group/parallel_sort.cpp                      boost_asio/example/cpp14/parallel_group/wait_for_all.cpp                      boost_asio/example/cpp14/parallel_group/wait_for_one.cpp                      boost_asio/example/cpp14/parallel_group/wait_for_one_error.cpp                      boost_asio/example/cpp14/parallel_group/wait_for_one_success.cpp          Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/examples/cpp14_examples.html
C++11 ExamplesC++11 ExamplesHomeLibrariesPeopleFAQMoreC++11 Examples        Allocation              This example shows how to customise the allocation of memory associated with        asynchronous operations.                  boost_asio/example/cpp11/allocation/server.cpp                  Buffers              This example demonstrates how to create reference counted buffers that can        be used with socket read and write operations.                  boost_asio/example/cpp11/buffers/reference_counted.cpp                  Chat              This example implements a chat server and client. The programs use a custom        protocol with a fixed length message header and variable length message body.                  boost_asio/example/cpp11/chat/chat_message.hpp                      boost_asio/example/cpp11/chat/chat_client.cpp                      boost_asio/example/cpp11/chat/chat_server.cpp                  Echo              A collection of simple clients and servers, showing the use of both synchronous        and asynchronous operations.                  boost_asio/example/cpp11/echo/async_tcp_echo_server.cpp                      boost_asio/example/cpp11/echo/async_udp_echo_server.cpp                      boost_asio/example/cpp11/echo/blocking_tcp_echo_client.cpp                      boost_asio/example/cpp11/echo/blocking_tcp_echo_server.cpp                      boost_asio/example/cpp11/echo/blocking_udp_echo_client.cpp                      boost_asio/example/cpp11/echo/blocking_udp_echo_server.cpp                  Fork              These POSIX-specific examples show how to use Boost.Asio in conjunction with        the fork()        system call. The first example illustrates the steps required to start a        daemon process:                  boost_asio/example/cpp11/fork/daemon.cpp                  The second example demonstrates how it is possible to fork a process from        within a completion handler.                  boost_asio/example/cpp11/fork/process_per_connection.cpp                  Futures              This example demonstrates how to use std::future in conjunction with Boost.Asio's        asynchronous operations.                  boost_asio/example/cpp11/futures/daytime_client.cpp                  Handler        Tracking              This example header file shows how to implement custom handler tracking.                  boost_asio/example/cpp11/handler_tracking/custom_tracking.hpp                  This example program shows how to include source location information in        the handler tracking output.                  boost_asio/example/cpp11/handler_tracking/async_tcp_echo_server.cpp                  HTTP        Server              This example illustrates the use of asio in a simple single-threaded server        implementation of HTTP 1.0. It demonstrates how to perform a clean shutdown        by cancelling all outstanding asynchronous operations.                  boost_asio/example/cpp11/http/server/connection.cpp                      boost_asio/example/cpp11/http/server/connection.hpp                      boost_asio/example/cpp11/http/server/connection_manager.cpp                      boost_asio/example/cpp11/http/server/connection_manager.hpp                      boost_asio/example/cpp11/http/server/header.hpp                      boost_asio/example/cpp11/http/server/main.cpp                      boost_asio/example/cpp11/http/server/mime_types.cpp                      boost_asio/example/cpp11/http/server/mime_types.hpp                      boost_asio/example/cpp11/http/server/reply.cpp                      boost_asio/example/cpp11/http/server/reply.hpp                      boost_asio/example/cpp11/http/server/request.hpp                      boost_asio/example/cpp11/http/server/request_handler.cpp                      boost_asio/example/cpp11/http/server/request_handler.hpp                      boost_asio/example/cpp11/http/server/request_parser.cpp                      boost_asio/example/cpp11/http/server/request_parser.hpp                      boost_asio/example/cpp11/http/server/server.cpp                      boost_asio/example/cpp11/http/server/server.hpp                  Multicast              An example showing the use of multicast to transmit packets to a group of        subscribers.                  boost_asio/example/cpp11/multicast/receiver.cpp                      boost_asio/example/cpp11/multicast/sender.cpp                  Nonblocking              Example demonstrating reactor-style operations for integrating a third-party        library that wants to perform the I/O operations itself.                  boost_asio/example/cpp11/nonblocking/third_party_lib.cpp                  Operations              Examples showing how to implement composed asynchronous operations as reusable        library functions.                  boost_asio/example/cpp11/operations/composed_1.cpp                      boost_asio/example/cpp11/operations/composed_2.cpp                      boost_asio/example/cpp11/operations/composed_3.cpp                      boost_asio/example/cpp11/operations/composed_4.cpp                      boost_asio/example/cpp11/operations/composed_5.cpp                      boost_asio/example/cpp11/operations/composed_6.cpp                      boost_asio/example/cpp11/operations/composed_7.cpp                      boost_asio/example/cpp11/operations/composed_8.cpp                  SOCKS        4              Example client program implementing the SOCKS 4 protocol for communication        via a proxy.                  boost_asio/example/cpp11/socks4/sync_client.cpp                      boost_asio/example/cpp11/socks4/socks4.hpp                  Spawn              Example of using the boost::asio::spawn() function, a wrapper around the        Boost.Coroutine        library, to implement a chain of asynchronous operations using stackful coroutines.                  boost_asio/example/cpp11/spawn/echo_server.cpp                  SSL              Example client and server programs showing the use of the ssl::stream&lt;&gt;        template with asynchronous operations.                  boost_asio/example/cpp11/ssl/client.cpp                      boost_asio/example/cpp11/ssl/server.cpp                  Timeouts              A collection of examples showing how to cancel long running asynchronous        operations after a period of time.                  boost_asio/example/cpp11/timeouts/async_tcp_client.cpp                      boost_asio/example/cpp11/timeouts/blocking_tcp_client.cpp                      boost_asio/example/cpp11/timeouts/blocking_token_tcp_client.cpp                      boost_asio/example/cpp11/timeouts/blocking_udp_client.cpp                      boost_asio/example/cpp11/timeouts/server.cpp                  Timers              Example showing how to customise basic_waitable_timer using a different clock        type.                  boost_asio/example/cpp11/timers/time_t_timer.cpp                  UNIX Domain        Sockets              Examples showing how to use UNIX domain (local) sockets.                  boost_asio/example/cpp11/local/connect_pair.cpp                      boost_asio/example/cpp11/local/iostream_client.cpp                      boost_asio/example/cpp11/local/stream_server.cpp                      boost_asio/example/cpp11/local/stream_client.cpp                      boost_asio/example/cpp11/local/fd_passing_stream_server.cpp                      boost_asio/example/cpp11/local/fd_passing_stream_client.cpp          Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/examples/cpp11_examples.html
OverviewOverviewHomeLibrariesPeopleFAQMoreOverview          Rationale                  Basic Boost.Asio Anatomy                  Asynchronous Model                          Asynchronous                Operations                              Asynchronous                Agents                              Associated                Characteristics and Associators                              Child Agents                              Executors                              Allocators                              Cancellation                              Completion                Tokens                              Supporting                Library Elements                              Higher Level                Abstractions                                Core Concepts and Functionality                          The Proactor Design                Pattern: Concurrency Without Threads                              Threads and Boost.Asio                              Strands: Use Threads                Without Explicit Locking                              Buffers                              Streams, Short Reads                and Short Writes                              Reactor-Style Operations                              Line-Based Operations                              Custom Memory                Allocation                              Per-Operation                Cancellation                              Handler                Tracking                              Concurrency                Hints                                Composition and Completion          Tokens                          Stackless                Coroutines                              Stackful Coroutines                              Futures                              C++20                Coroutines Support                              Resumable C++20                Coroutines (experimental)                              Deferred                Operations (experimental)                              Promises                (experimental)                              Co-ordinating                Parallel Operations (experimental)                              Compositions                as Asynchronous Operations                              Completion                Token Adapters                                Networking                          TCP, UDP                and ICMP                              Support                for Other Protocols                              Socket Iostreams                              The BSD                Socket API and Boost.Asio                                Timers                  Files                  Pipes                  Serial Ports                  Signal Handling                  Channels (experimental)                  POSIX-Specific Functionality                          UNIX Domain Sockets                              Stream-Oriented                File Descriptors                              Fork                                Windows-Specific Functionality                          Stream-Oriented                HANDLEs                              Random-Access                HANDLEs                              Object                HANDLEs                                SSL                  C++ 2011 Support                          Movable                I/O Objects                              Movable                Handlers                              Variadic Templates                              Array Container                              Atomics                              Shared Pointers                              Chrono                                Platform-Specific Implementation          Notes        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/overview.html
Proposed Standard ExecutorsProposed Standard ExecutorsHomeLibrariesPeopleFAQMoreProposed Standard Executors      Boost.Asio provides a complete implementation of the proposed standard executors,      as described in P0443r13, P1348r0, and P1393r0.          Just as with executors under the Networking TS model, a standard executor represents      a policy as to how, when, and where a piece of code should be executed. Most      existing code should continue to work with little or no change.          Standard      Executor Implementations in Boost.Asio          The io_context::executor_type, thread_pool::executor_type, system_executor, and strand executors meet the requirements      for the proposed standard executors. For compatibility, these classes also      meet the requirements for the Networking TS model of executors.          Standard      Executor Use in Boost.Asio          All I/O objects such as ip::tcp::socket,      asynchronous operations, and utilities including dispatch, post, defer, get_associated_executor, bind_executor, make_work_guard, spawn, co_spawn, async_compose, use_future, etc., can interoperate      with both proposed standard executors, and with Networking TS executors. Boost.Asio's      implementation determines at compile time which model a particular executor      meets; the proposed standard executor model is used in preference if both are      detected.          Support for the existing Networking TS model of executors can be disabled by      defining BOOST_ASIO_NO_TS_EXECUTORS.          Polymorphic      I/O Executor          The any_io_executor      type alias is the default runtime-polymorphic executor for all I/O objects.      This type alias points to the execution::any_executor&lt;&gt;      template with a set of supportable properties specified for use with I/O.          This new name may break existing code that directly uses the old polymorphic      wrapper, executor.      If required for backward compatibility, BOOST_ASIO_USE_TS_EXECUTOR_AS_DEFAULT      can be defined, which changes the any_io_executor      type alias to instead point to the executor      polymorphic wrapper.          Implementing      a Minimal I/O Executor          Standard executor properties make what were previously hard requirements on      an executor (such as work counting, or the ability to distinguish between      post, dispatch,      and defer) into optional facilities.      With this relaxation, the minimal requirements for an I/O executor are:              Conformance to the executor concept.                  The ability to query the execution::context property, with the result          being execution_context&amp;          or a reference to a class that is derived from execution_context.                  The execute operation having,          at minimum, the execution::blocking.never semantic.              The following example shows a minimal I/O executor. Given a queue submission      operation implemented elsewhere:    queue_t queue_create();template &lt;typename F&gt; void queue_submit(queue_t q, F f);      the executor may be defined as follows:    struct minimal_io_executor{  boost::asio::execution_context* context_;  queue_t queue_;  bool operator==(const minimal_io_executor&amp; other) const noexcept  {    return context_ == other.context_ &amp;&amp; queue_ == other.queue_;  }  bool operator!=(const minimal_io_executor&amp; other) const noexcept  {    return !(*this == other);  }  boost::asio::execution_context&amp; query(      boost::asio::execution::context_t) const noexcept  {    return *context_;  }  static constexpr boost::asio::execution::blocking_t::never_t query(      boost::asio::execution::blocking_t) noexcept  {    // This executor always has blocking.never semantics.    return boost::asio::execution::blocking.never;  }  template &lt;class F&gt;  void execute(F f) const  {    queue_submit(queue_, std::move(f));  }};      This executor may be created as follows:    boost::asio::execution_context context;queue_t queue = queue_create();minimal_io_executor executor{&amp;context, queue};      and then used with I/O objects:    boost::asio::ip::tcp::acceptor acceptor(executor);      or assigned into the any_io_executor polymorphic wrapper:    boost::asio::any_io_executor poly_executor = executor;      Traits      for Deducing Conformance to the Executor Concept          Older C++ standards and compilers require some assistance to determine whether      an executor implementation conforms to the executor      concept and type requirements. This is achieved through specialisation of traits.      The following code shows a specialisation of these traits for the minimal_io_executor example from above:    namespace boost { namespace asio {namespace traits {#if !defined(BOOST_ASIO_HAS_DEDUCED_EXECUTE_MEMBER_TRAIT)template &lt;typename F&gt;struct execute_member&lt;minimal_io_executor, F&gt;{  static constexpr bool is_valid = true;  static constexpr bool is_noexcept = true;  typedef void result_type;};#endif // !defined(BOOST_ASIO_HAS_DEDUCED_EXECUTE_MEMBER_TRAIT)#if !defined(BOOST_ASIO_HAS_DEDUCED_EQUALITY_COMPARABLE_TRAIT)template &lt;&gt;struct equality_comparable&lt;minimal_io_executor&gt;{  static constexpr bool is_valid = true;  static constexpr bool is_noexcept = true;};#endif // !defined(BOOST_ASIO_HAS_DEDUCED_EQUALITY_COMPARABLE_TRAIT)#if !defined(BOOST_ASIO_HAS_DEDUCED_QUERY_MEMBER_TRAIT)template &lt;&gt;struct query_member&lt;minimal_io_executor,    boost::asio::execution::context_t&gt;{  static constexpr bool is_valid = true;  static constexpr bool is_noexcept = true;  typedef boost::asio::execution_context&amp; result_type;};#endif // !defined(BOOST_ASIO_HAS_DEDUCED_QUERY_MEMBER_TRAIT)#if !defined(BOOST_ASIO_HAS_DEDUCED_QUERY_STATIC_CONSTEXPR_MEMBER_TRAIT)template &lt;typename Property&gt;struct query_static_constexpr_member&lt;minimal_io_executor, Property,    typename enable_if&lt;      std::is_convertible&lt;Property, boost::asio::execution::blocking_t&gt;::value    &gt;::type&gt;{  static constexpr bool is_valid = true;  static constexpr bool is_noexcept = true;  typedef boost::asio::execution::blocking_t::never_t result_type;  static constexpr result_type value() noexcept { return result_type(); }};#endif // !defined(BOOST_ASIO_HAS_DEDUCED_QUERY_STATIC_CONSTEXPR_MEMBER_TRAIT)} // namespace traits} } // namespace boost::asio      Boost.Asio uses an extensive set of traits to implement all of the proposed      standard executor functionality on older C++ standards. These traits may be      found under the boost/asio/traits include directory.    Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/std_executors.html
ExamplesExamplesHomeLibrariesPeopleFAQMoreExamples          C++03 Examples:          Illustrates the use of Boost.Asio using only C++03 language and library          features. Where necessary, the examples make use of selected Boost C++          libraries.                  C++11 Examples:          Contains a limited set of the C++03 Boost.Asio examples, updated to use          only C++11 library and language facilities. These examples do not make          direct use of Boost C++ libraries.                  C++14 Examples:          Contains a limited set of the C++03 Boost.Asio examples, updated to use          only C++14 library and language facilities. These examples do not make          direct use of Boost C++ libraries.                  C++17 Examples:          Selected examples illustrating C++17 usage in conjunction with Technical          Specifications.                  C++20 Examples:          Selected examples using C++20 language features.        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/examples.html
Revision HistoryRevision HistoryHomeLibrariesPeopleFAQMoreRevision History      Asio      1.22.2 / Boost 1.79              On Windows, changed the file support to open files using the same sharing          mode as fopen().                  On Linux, fixed the UNIX domain sockets implementation to correctly handle          EAGAIN as an indication          of an in-progress connect operation.                  Fixed experimental::basic_channel::reset()          and experimental::basic_concurrent_channel::reset()          so that they work correctly for an unclosed channel.                  Fixed potential undefined behaviour in the experimental::promise          operations race()          and all().                  Changed the co_spawn implementation          to explicitly dispatch cancellation signals through the specified executor,          if the the completion handler has an associated executor of its own.                  Added more detailed reference documentation to make_strand(), make_work_guard(), ip::address_v4,          ip::address_v6, experimental::basic_channel,          and experimental::basic_concurrent_channel.                  Re-arranged and extended the Overview documentation to cover files, pipes,          async_compose, experimental::deferred, experimental::parallel_group,          experimental::promise, channels, and completion token          adapters.                  Reverted the io_context          reference documentation to use executor_work_guard          when preventing the io_context          from running out of work.                  Removed references to deadline_timer          from the Overview documentation.                  Added reference documentation cross-references to asynchronous model elements.              Asio      1.22.1              Added bind_allocator, to          simplify associating a custom allocator with a completion token or handler.                  Added the file_base::sync_all_on_write flag, which maps to          O_SYNC on POSIX and FILE_FLAG_WRITE_THROUGH on Windows.                  Added missing implementation of basic_file::release().                  Added per-operation cancellation support to signal sets.                  Exposed recycling_allocator          as part of the public interface.                  Added the nodiscard attribute          to the following functions:                          bind_allocator()                              bind_cancellation_slot()                              bind_executor()                              buffer()                              dynamic_buffer()                              experimental::append()                              experimental::as_single()                              experimental::as_tuple()                              experimental::make_parallel_group()                              experimental::prepend()                              get_associated_allocator()                              get_associated_cancellation_slot()                              get_associated_executor()                              make_work_guard()                                Added compatibility with OpenSSL 3.0, particularly when deprecated functionality          is disabled.                  Added support for adopting an existing SSL* into an ssl::stream&lt;&gt;.                  Enabled executor_work_guard&lt;&gt; even when BOOST_ASIO_NO_TS_EXECUTORS          is defined.                  Enabled movable socket iostreams when using clang.                  Fixed bind_cancellation_slot          compatibility with legacy completion tokens.                  Fixed bind_executor compatibility          with legacy completion tokens.                  Fixed associator specialisations          for experimental::append and experimental::prepend,          to correctly propagate the associated allocator, executor, and cancellation          slot.                  Fixed 'zero as null pointer constant' warning in C++20 coroutines implementation          of awaitable.                  Ensured concurrency hint preprocessor macros are made available when asio/io_context.hpp          is included.                  Fixed issue where the primary associated_allocator          template was not correctly detecting the nested T::allocator_type.                  Fixed io_uring implementation of async_receive_from          operation for sockets.                  Fixed io_uring implementation of write_some_at          operation for files.                  Changed io_uring implementation to correctly check that          it is not the default before registering with reactor.                  Fixed a circular inclusion issue when using io_uring          in some build configurations.                  Fixed experimental::coro's per-operation cancellation to          clear the slot at completion of each operation.                  Fixed memory management in experimental::promise's          type-erased completion handlers.                  Fixed move operator=          implementation for ssl::stream.                  Fixed any_io_executor implementation          to work when both BOOST_ASIO_USE_TS_EXECUTOR_AS_DEFAULT          and BOOST_ASIO_SEPARATE_COMPILATION          are defined.                  Fixed implementation of basic_socket::at_mark() when using the sockatmark() system call.                  Changed the recycling allocator to use the default alignment as the minimum          alignment for allocations.                  Added additional standard header file includes, as required by newer compilers.                  Added a workaround for apparent coroutine codegen bug with Apple's clang.                  Fixed various warnings in the examples and unit tests.                  Added a C++11 example showing file descriptor passing over local sockets.          Thanks to Heiko Hund for providing this example.                  Added C++14 examples of wrapping callback-based APIs in asynchronous operations.                  Added an overview of Asio's asynchronous model to the documentation.                  Reworked reference documentation in terms of completion tokens.                  Updated documentation of asynchronous operation requirements to use new          completion token form.                  Updated documentation for dispatch(), post(), and defer() to cover both the old and new executor          forms.                  Documented per-operation cancellation for serial ports.                  Clarified the non-concurrency guarantees made for allocators.              Asio      1.22.0 / Boost 1.78              Added an io_uring backend. This backend may be used for all I/O objects,          including sockets, timers, and posix descriptors.  The backend          is disabled by default, and must be enabled by defining both BOOST_ASIO_HAS_IO_URING and BOOST_ASIO_DISABLE_EPOLL.           Simply defining BOOST_ASIO_HAS_IO_URING          alone will enable the backend without using it for the existing I/O objects.          This allows it to be used for I/O objects that require io_uring support,          such as files.  This support depends on the liburing          library at both compile and link time. Add -luring to your list of libraries for          linking.                  Added support for files. This introduces new classes for stream-oriented          and random-access files. For example, to write to a newly created stream-oriented          file:        asio::stream_file file(    my_io_context, "/path/to/file",    asio::stream_file::write_only      | asio::stream_file::create      | asio::stream_file::truncate);file.async_write_some(my_buffer,    [](error_code e, size_t n)    {      // ...    });           or to read from a random-access file:        asio::random_access_file file(    my_io_context, "/path/to/file",    asio::random_access_file::read_only);file.async_read_some_at(1234, my_buffer,    [](error_code e, size_t n)    {      // ...    });           This feature currently supports I/O completion ports on Windows,          and io_uring on Linux (define BOOST_ASIO_HAS_IO_URING          to enable).                  Added support for portable pipes. This change add supports for pipes on          POSIX and Windows (when I/O completion ports are available). For example,          to create and use a connected pair of pipe objects:        asio::readable_pipe read_end;asio::writable_pipe write_end;asio::connect_pipe(read_end, write_end);write_end.async_write_some(my_write_buffer,    [](error_code e, size_t n)    {      // ...    });read_end.async_read_some(my_read_buffer,    [](error_code e, size_t n)    {      // ...    });                            Added support for registered buffers. The mutable_registered_buffer          and const_registered_buffer          classes are buffer sequence types that represent registered buffers. These          buffers are obtained by first performing a buffer registration:        auto my_registration =  asio::register_buffers(      my_execution_context,      my_buffer_sequence);           The registration object must be maintained for as long as the buffer          registration is required. The supplied buffer sequence represents the memory          location or locations that will be registered, and the caller must ensure          they remain valid for as long as they are registered. The registration          is automatically removed when the registration object is destroyed. There          can be at most one active registration per execution context.           The registration object is a container of registered buffers. Buffers may          be obtained from it by iterating over the container, or via direct index          access:        asio::mutable_registered_buffer my_buffer  = my_registration[i];           The registered buffers may then be passed directly to operations:        asio::async_read(my_socket, my_buffer,    [](error_code ec, size_t n)    {      // ...    });           Buffer registration supports the io_uring backend when used with          read and write operations on descriptors, files, pipes, and sockets. For          portability, the facility may be used on other platforms, but the registered          buffers will behave as normal buffers.                  Added experimental support for channels. This adds templates experimental::basic_channel and experimental::basic_concurrent_channel,          with aliases experimental::channel          and experimental::concurrent_channel. Channels may be used          to send completions as messages. For example:        // Create a channel with no buffer space.channel&lt;void(error_code, size_t)&gt; ch(ctx);// The call to try_send fails as there is no buffer// space and no waiting receive operations.bool ok = ch.try_send(asio::error::eof, 123);assert(!ok);// The async_send operation is outstanding until// a receive operation consumes the message.ch.async_send(asio::error::eof, 123,    [](error_code ec)    {      // ...    });// The async_receive consumes the message. Both the// async_send and async_receive operations complete// immediately.ch.async_receive(    [](error_code ec, size_t n)    {      // ...    });                            Implemented improvements to experimental::coro.                          Added overload so member functions can provide an explicit executor.                              Added co_spawn for                coro tasks.                              Added reference and overview documentation.                              Adopted awaitable cancellation model.                              Refactored implementation.                                Disabled aligned_alloc          on clang when using an MSVC runtime.                  Changed to use a faster implementation for ip::network_v4::canonical().                  Added template specialisations for common uses to improve compile time.                  Reduced the size of io_context          executors to a single pointer.                  Increased the small object buffer size for execution::any_executor          and any_io_executor.                  Fixed multi-signature handling when variadic templates are disabled.                  Fixed compatibility with new versions of gcc and clang.                  Fixed compilation on Solaris.                  Fixed defence against Qt-defined macros when building with MSVC.                  Improved error messages emitted by ssl          facilities.                  Fixed bind_executor compatibility          with completion tokens.                  Fixed build errors when BOOST_ASIO_USE_TS_EXECUTOR_AS_DEFAULT          is defined.                  Added missing move assignment operator to awaitable&lt;&gt;.                  Fixed an access violation when using coroutines with MSVC, due to incorrect          alignment of allocated memory.                  Fixed a cleanup issue in experimental::parallel_group          that occured when the execution context was shut down with parallel operations          still pending.                  Added clarifications to the documentation on concurrency hints.                  Added documentation on error handling techniques for C++20 coroutines.                  Fixed various warnings.              Asio      1.20.0 / Boost 1.77              Added support for cancellation of individual asynchronous operations. Cancellation          is implemented by having each completion handler carry an associated CancellationSlot, a lightweight cancellation          channel that is specified through the new associated_cancellation_slot          associator. A concrete CancellationSlot          implementation is provided in the form of the cancellation_signal          and cancellation_slot classes.          In conjunction with the bind_cancellation_slot          helper function, these may be used to hook cancellation into asynchronous          operations. However, it should be noted that these classes are the low-level          building blocks of cancellation, and most use cases should use a higher          level abstraction for cancellation, such as experimental::parallel_group          or the new logical operators for awaitable          (see below). The ability to cancel individual operations, or composed operations,          is currently supported by:                          timers                              sockets on POSIX and Windows                              POSIX descriptors                              Windows HANDLEs                              SSL streams                              all Asio-provided composed operations such as async_read                and async_write                              compositions based on async_compose                              C++20 coroutines that use awaitable                              C++20 coroutines that use the new experimental::coro                (see below)                              the new experimental::parallel_group                operation (see below)                              the new experimental::promise                class (see below)                                Added the associator trait.          The associator trait is          used to generically forward associators, such as associated_executor          and associated_allocator,          through intermediate completion handlers. For example:        template &lt;typename Handler&gt;struct intermediate_handler{  Handler handler_;  template &lt;typename... Args&gt;  void operator()(Args&amp;... args)  {    // ...  }};namespace asio {  template &lt;      template &lt;typename, typename&gt; class Associator,      typename Handler,      typename DefaultCandidate&gt;  struct associator&lt;      Associator,      intermediate_handler&lt;Handler&gt;,      DefaultCandidate&gt;  {    using type =      typename Associator&lt;Handler, DefaultCandidate&gt;::type;    static type get(        const intermediate_handler&lt;Handler&gt;&amp; h,        const DefaultCandidate&amp; c = DefaultCandidate()) noexcept    {      return Associator&lt;Handler, DefaultCandidate&gt;::get(          h.handler_, c);    }  };} // namespace asio                            Changed all asynchronous operations implemented in Asio to invoke their          completion handlers as rvalue references. This allows an rvalue reference          qualifier to be added to the function call operator.                  Added support for asynchronous operations with multiple completion signatures.          Completion signatures may also specify that they are noexcept,          and whether they are lvalue-invocable (and thus do not "consume"          the completion handler) or rvalue-invocable (and thus do "consume"          the handler, indicating an end to the asynchronous operation). For example:        auto my_async_operation(...,    asio::completion_token_for&lt;      void(intermediate_result_type) &amp; noexcept,      void(final_result_type) &amp;&amp;    &gt; auto&amp;&amp; token){  // ...}                            Added operator&amp;&amp;          and operator||          for awaitable&lt;&gt;.          The logical operators || and          &amp;&amp; have been overloaded          for awaitable&lt;&gt;,          to allow coroutines to be trivially awaited in parallel.  When          awaited using &amp;&amp;,          the co_await expression          waits until both operations have completed successfully. As a "short-circuit"          evaluation, if one operation fails with an exception, the other is immediately          cancelled. For example:        std::tuple&lt;std::size_t, std::size_t&gt; results =  co_await (    async_read(socket, input_buffer, use_awaitable)      &amp;&amp; async_write(socket, output_buffer, use_awaitable)  );           When awaited using ||,          the co_await expression          waits until either operation succeeds. As a "short-circuit" evaluation,          if one operation succeeds without throwing an exception, the other is immediately          cancelled. For example:        std::variant&lt;std::size_t, std::monostate&gt; results =  co_await (    async_read(socket, input_buffer, use_awaitable)      || timer.async_wait(use_awaitable)  );           The operators may be enabled by adding the #include:        #include &lt;boost/asio/experimental/awaitable_operators.hpp&gt;           and then bringing the contents of the experimental::awaitable_operators          namespace into scope:        using namespace asio::experimental::awaitable_operators;                            Added the experimental::as_tuple          completion token adapter. The as_tuple          completion token adapter can be used to specify that the completion handler          arguments should be combined into a single tuple argument. The as_tuple adapter may be used in conjunction          with use_awaitable and          structured bindings as follows:        auto [e, n] = co_await socket.async_read_some(    asio::buffer(data), as_tuple(use_awaitable));           Alternatively, it may be used as a default completion token like          so:        using default_token = as_tuple_t&lt;use_awaitable_t&lt;&gt;&gt;;using tcp_socket = default_token::as_default_on_t&lt;tcp::socket&gt;;// ...awaitable&lt;void&gt; do_read(tcp_socket socket){  // ...  auto [e, n] = co_await socket.async_read_some(asio::buffer(data));  // ...}                            Added the experimental::append          completion token adapter. The append          completion token adapter can be used to pass additional completion handler          arguments at the end of the completion signature. For example:        timer.async_wait(    asio::experimental::append(      [](boost::system::error_code ec, int i)      {        // ...      },    42)  );std::future&lt;int&gt; f = timer.async_wait(    asio::experimental::append(      asio::use_future,      42    )  );                            Added the experimental::prepend          completion token adapter. The prepend          completion token adapter can be used to pass additional arguments before          the existing completion handler arguments. For example:        timer.async_wait(    asio::experimental::prepend(      [](int i, boost::system::error_code ec)      {        // ...      },    42)  );std::future&lt;std::tuple&lt;int, boost::system::error_code&gt;&gt; f = timer.async_wait(    asio::experimental::prepend(      asio::use_future,      42    )  );                            Added the experimental::deferred          completion token. The deferred          completion token takes a call to an asynchronous operation's initiating          function and turns it into a function object that accepts a completion          token. For example:        auto deferred_op =  timer.async_wait(    asio::experimental::deferred);...std::move(deferred_op)(    [](boost::system::error_code ec){ ... });           or:        auto deferred_op =  timer.async_wait(    asio::experimental::deferred);...std::future&lt;void&gt; =  std::move(deferred_op)(    asio::use_future);           The deferred token also supports chaining, to create simple compositions:        auto deferred_op =  timer.async_wait(    asio::experimental::deferred(      [&amp;](boost::system::error_code ec)      {        timer.expires_after(            std::chrono::seconds(1));        return timer.async_wait(            asio::experimental::deferred);      });...std::future&lt;void&gt; = std::move(deferred_op)(asio::use_future);                            Added the experimental::parallel_group          class and experimental::make_parallel_group          function. This utility may be used to launch work that is performed in          parallel, and wait for one or all of the operations to complete. A parallel_group implements automatic cancellation          of incomplete operations. For example:        experimental::make_parallel_group(    [&amp;](auto token)    {      return stream.async_read_some(asio::buffer(data), token);    },    [&amp;](auto token)    {      return timer.async_wait(token);    }  ).async_wait(    experimental::wait_for_one(),    [](        std::array&lt;std::size_t, 2&gt; completion_order,        boost::system::error_code ec1, std::size_t n1,        boost::system::error_code ec2    )    {      // ...    }  );           The conditions for completion of the group may be specified using          one of the four provided function objects wait_for_all,          wait_for_one, wait_for_one_success, and wait_for_one_error, or with a custom          function. The parallel_group          class can also be combined with deferred          as follows:        experimental::make_parallel_group(    stream.async_read_some(asio::buffer(data), experimental::deferred),    timer.async_wait(experimental::deferred)  ).async_wait(    // ...  );           Note: for maximum flexibility, parallel_group          does not propagate the executor automatically to the operations within          the group.                  Added experimental::promise. The promise          type allows eager execution and synchronisation of async operations. For          example:        auto promise = async_read(    stream, asio::buffer(my_buffer),    asio::experimental::use_promise);... do other stuff while the read is going on ...promise.async_wait( // completion the operation    [](error_code ec, std::size_t bytes_read)    {      ...    });           Promises can be safely disregarded if the result is no longer required.          Different operations can be combined to either wait for all to complete          or for one to complete (and cancel the rest). For example, to wait for          one to complete:        auto timeout_promise =  timer.async_wait(    asio::experimental::use_promise);auto read_promise = async_read(    stream, asio::buffer(my_buffer),    asio::experimental::use_promise);auto promise =  asio::experimental::promise&lt;&gt;::race(    timeout_promise, read_promise);promise.async_wait(    [](std::variant&lt;error_code, std::tuple&lt;error_code, std::size_t&gt;&gt; v)    {      if (v.index() == 0) {} //timed out      else if (v.index() == 1) // completed in time    });           or to wait for all to complete:        auto write_promise = async_write(    stream, asio::buffer(my_write_buffer),    asio::experimental::use_promise);auto read_promise = async_read(    stream, asio::buffer(my_buffer),    asio::experimental::use_promise);auto promise =  asio::experimental::promise&lt;&gt;::all(    write_promise, read_promise);promise.async_wait(    [](std::tuple&lt;error_code, std::size_t&gt; write_result,      std::tuple&lt;error_code, std::size_t&gt; read_result)    {    });           Thanks go to Klemens Morgenstern for contributing this feature.                  Added the experimental::coro          class template. The coro          type is a C++20 coroutine primitive for resumable functions, with the ability          to combine both asynchronous waiting (co_await)          and yielding (co_yield)          into a single, stateful control flow. For example:        #include &lt;boost/asio.hpp&gt;#include &lt;boost/asio/experimental/coro.hpp&gt;using asio::ip::tcp;asio::experimental::coro&lt;std::string&gt; reader(tcp::socket&amp; sock){  std::string buf;  while (sock.is_open())  {    std::size_t n = co_await asio::async_read_until(        sock, asio::dynamic_buffer(buf), '\n',        asio::experimental::use_coro);    co_yield buf.substr(0, n);    buf.erase(0, n);  }}asio::awaitable&lt;void&gt; consumer(tcp::socket sock){  auto r = reader(sock);  auto msg1 = co_await r.async_resume(asio::use_awaitable);  std::cout &lt;&lt; "Message 1: " &lt;&lt; msg1.value_or("\n");  auto msg2 = co_await r.async_resume(asio::use_awaitable);  std::cout &lt;&lt; "Message 2: " &lt;&lt; msg2.value_or("\n");}asio::awaitable&lt;void&gt; listen(tcp::acceptor&amp; acceptor){  for (;;)  {    co_spawn(        acceptor.get_executor(),        consumer(co_await acceptor.async_accept(asio::use_awaitable)),        asio::detached);  }}int main(){  asio::io_context ctx;  tcp::acceptor acceptor(ctx, {tcp::v4(), 54321});  co_spawn(ctx, listen(acceptor), asio::detached);  ctx.run();}           Thanks go to Klemens Morgenstern for contributing this feature.                  Added move assignment to ssl::stream&lt;&gt;.                  Changed co_spawn to dispatch the coroutine's initial step          to the executor, and to only post          the completion handler if the coroutine did not otherwise perform a context          switch (i.e. a co_await          on an asynchronous operation).                  Enabled additional optimisations for any_executor          and any_io_executor when          used with asynchronous operations.                  Added the nodiscard attribute          to awaitable&lt;&gt;.                  Increased the number of cached slots in the default recycling allocator.          This number defaults to 2, but may also be specified by defining the BOOST_ASIO_RECYCLING_ALLOCATOR_CACHE_SIZE          macro.                  Disabled the std::system_error message workaround for recent          MSVC.                  Changed the default allocator behaviour to respect alignment requirements,          to support over-aligned types. Requires C++17 or later, or Boost.                  Ensured the result strings are always initialised in reverse name resolution.                  Fixed recursive template instantiation issues in use_awaitable_t::executor_with_default.                  Fixed the any_io_executor          equality operators to correctly return a result based on the target executor.                  Fixed strand&lt;&gt;          to avoid using a potentially moved-from executor.                  Ensured gcc tests are not used for clang          when detecting compiler features.                  Disabled coroutines support for the clang shipped with          MSVC.                  Fixed compatibility with recent LibreSSL when OPENSSL_NO_SSL_INTERN          is defined.                  Fixed posix::basic_stream_descriptor move operations          to work with non-defaulted executors.              Asio      1.18.2 / Boost 1.76              Added ip::scope_id_type type alias.                  Added ip::port_type type alias.                  Added std::hash specialisations for IP addresses.                  Added std::hash specialisations for ip::basic_endpoint&lt;&gt;.                  Refactored SFINAE usage to improve compile times.                  Added friendship support to customisation points, and made most customisations          private.                  Changed any_io_executor          to a "strong typedef"-style class.                  Fixed experimental::as_single to work with handler hook deprecation.                  Ensured pthread condition variable attributes are cleaned up on all platforms.                  Clarified thread safety notes on sockets and descriptors.                  Ensured errno is not overwritten          if socket()          fails on macOS/FreeBSD.                  Fixed work tracking for io_context          and thread_pool executors          when move-assigned.                  Ensured internal call_stack          objects are accessed only from implementation files.                  Fixed I/O object move-assignment to ensure the executor is left in a valid          state.                  Fixed detection of compiler support for defaulted template argument on          functions with MSVC.                  Prevented the blocking.always          property from being used with strand&lt;&gt;, as it did not produce the correct          semantics.                  Removed deprecated file asio/impl/src.cpp.              Asio      1.18.1 / Boost 1.75              Enabled support for UNIX domain sockets on Windows. From Windows 10, UNIX          domain sockets (a.k.a "local" sockets) are supported on Windows,          with the exception of the connect_pair          function (which will fail with an operation_not_supported error).                  Added executor-converting construction and assignment to ip::basic_resolver.                  Added compatibility between polymorphic executors and the (deprecated)          handler invocation hook.                  Added the experimental::as_single          completion token adapter. The as_single          completion token adapter can be used to specify that the completion handler          arguments should be combined into a single argument. For completion signatures          with a single parameter, the argument is passed through as-is. For signatures          with two or more parameters, the arguments are combined into a tuple. The          as_single adapter may be          used in conjunction with use_awaitable          and structured bindings as follows:        auto [e, n] = co_await socket.async_read_some(    boost::asio::buffer(data), as_single(use_awaitable));           Alternatively, it may be used as a default completion token like          so:        using default_token = as_single_t&lt;use_awaitable_t&lt;&gt;&gt;;using tcp_socket = default_token::as_default_on_t&lt;tcp::socket&gt;;// ...awaitable&lt;void&gt; do_read(tcp_socket socket){  // ...  auto [e, n] = co_await socket.async_read_some(boost::asio::buffer(data));  // ...}                            Added support for MSG_NOSIGNAL          on more platforms by using _POSIX_VERSION          to detect whether it is supported.                  Added the ability to compile using libpthread on Windows.                  Added workarounds for the Intel C++ compiler.                  Added more support for detecting and optimising for handlers that have          no custom executor.                  Reduced lock contention for timer cancellation on Windows.                  Reinstated a previously removed null-pointer check, as it had a measurable          impact on performance.                  Fixed the executor concept          to test for a const-qualified execute().                  Fixed any_executor support          for builds without RTTI support.                  Fixed the thread_pool unit          test to work without RTTI support.                  Fixed C++20 coroutines compatibility with clang on Windows.                  Fixed some compatibility issues with Windows Runtime.                  Fixed shadow name warnings caused by addition of asio::query.                  Fixed a "logical ‘or’ of equal expressions" warning on linux.                  Fixed a benign switch fallthrough warning.                  Added missing push/pop_options.hpp includes.                  Suppressed zero-as-null-pointer-constant warnings.                  Fixed a comma-operator warning.                  Updated the documentation to clarify when the select          reactor is used on Windows.                  Fixed potential ambiguity caused by any_executor          comparisons and conversion.                  Added detection of non-experimental C++20 coroutines on MSVC 19.8.                  Fixed compatibility with uClibc.                  Fixed strand&lt;&gt;          adaptation of Networking TS executors when targeting older C++ versions          or less conformant compilers.              Asio      1.18.0 / Boost 1.74              Added an implementation of the proposed standard executors (P0443r13,          P1348r0, and P1393r0).                  Added support for the proposed standard executors to Asio's I/O facilities:                          The io_context::executor_type, thread_pool::executor_type,                system_executor,                and strand executors                now meet the requirements for the proposed standard executors. These                classes also continue to meet the existing requirements for the Networking                TS model of executors.                              All I/O objects, asynchronous operations, and utilities including                dispatch, post, defer,                get_associated_executor,                bind_executor, make_work_guard, spawn, co_spawn,                async_compose, use_future, etc., can interoperate                with both new proposed standard executors, and with existing Networking                TS executors. The implementation determines at compile time which                model a particular executor meets; the proposed standard executor                model is used in preference if both are detected.                              The any_io_executor                type alias has been introduced as the new default runtime-polymorphic                executor for all I/O objects. This type alias points to the execution::any_executor&lt;&gt;                template with a set of supportable properties specified for use with                I/O. This change may break existing code that directly uses the old                polymorphic wrapper, executor.                If required for backward compatibility, BOOST_ASIO_USE_TS_EXECUTOR_AS_DEFAULT                can be defined, which changes the any_io_executor                type alias to instead point to the executor                polymorphic wrapper.                              Support for the existing Networking TS model of executors can be                disabled by defining BOOST_ASIO_NO_TS_EXECUTORS.                                Added converting move construction and assignment to basic_waitable_timer.          This enables move construction and assignment between different timer types,          provided the executor types are convertible. For example:        basic_waitable_timer&lt;    clock_type,    traits_type,    io_context::executor_type  &gt; timer1(my_io_context);basic_waitable_timer&lt;    clock_type,    traits_type,    any_io_executor // polymorphic wrapper  &gt; timer2(std::move(timer1));                            Enabled C++20 coroutine support when using gcc 10.                  Added overloads of co_spawn          that launch an awaitable. This change allows us to write:        co_spawn(executor,    echo(std::move(socket)),    detached);           instead of:        co_spawn(executor,    [socket = std::move(socket)]() mutable    {      return echo(std::move(socket));    },    detached);                            Added a new constructor overload to use_awaitable_t's          default executor adapter, to enable conversion between executor types.                  Added support for using detached_t          as a default completion token, by adding members as_default_on() and as_default_on_t&lt;&gt;.                  Added a move constructor to ssl::stream&lt;&gt;.                  Changed ssl::stream&lt;&gt;          write operations to linearise gather-write buffer sequences.                  Added compile-time detection of the deprecated asio_handler_invoke          hook. This hook was deprecated with the introduction of the Networking          TS trait associated_executor          and function get_associated_executor(). Compiling an application with BOOST_ASIO_NO_DEPRECATED will now trigger          a compile error if any handler implements the asio_handler_invoke          hook.                  Added compile-time detection of the deprecated asio_handler_allocate          and asio_handle_deallocate          hooks. These hooks were deprecated with the introduction of the Networking          TS trait associated_allocator          and function get_associated_allocator(). Compiling an application with BOOST_ASIO_NO_DEPRECATED will now trigger          a compile error if any handler implements the asio_handler_allocate          or asio_handler_deallocate          hooks.                  Implemented a number of performance optimisations, including:                          Specialising single-buffer operations to use recv                rather than recvmsg,                send rather than                sendmsg, read rather than readv, and write                rather than writev.                              Lightening the reference counting overhead of the polymorphic wrapper                executor.                              Returning from system call operation wrappers as early as possible,                and only accessing errno                and error codes when on an error path.                              Applying additional optimisations if a "native" I/O executor                (such as io_context::exeutor_type)                is detected.                                Added source location support to handler tracking. The new BOOST_ASIO_HANDLER_LOCATION((file_name,          line,          function_name))          macro may be used to inform the handler tracking mechanism of a source          location. This macro declares an object that is placed on the stack. Then,          when an asynchronous operation is launched with location information, it          outputs lines using the &lt;action&gt;          n^m, prior to the n*m line that signifies          the beginning of the asynchronous operation. For example:          @asio|1589423304.861944|&gt;7|ec=system:0,bytes_transferred=5  @asio|1589423304.861952|7^8|in 'async_write' (...../../include/asio/impl/write.hpp:330)  @asio|1589423304.861952|7^8|called from 'do_write' (handler_tracking/async_tcp_echo_server.cpp:62)  @asio|1589423304.861952|7^8|called from 'operator()' (handler_tracking/async_tcp_echo_server.cpp:51)  @asio|1589423304.861952|7*8|socket@0x7ff61c008230.async_send  @asio|1589423304.861975|.8|non_blocking_send,ec=system:0,bytes_transferred=5  @asio|1589423304.861980|&lt;7|           If std::source_location or std::experimental::source_location          are available, the use_awaitable_t          token (when default-constructed or used as a default completion token)          will also cause handler tracking to output a source location for each newly          created asynchronous operation. A use_awaitable_t          object may also be explicitly constructed with location information.                  Implemented various improvements to the handlerviz.pl          tool.                          Add nodes for pending handlers at bottom of graph, outlined in red.                              Display source location in a tooltip on the edge label (for SVG).                              Use invisible nodes to enforce order to keep related control flow                vertical.                                Added the handlerlive.pl tool, which processes handler          tracking output to produce a list of "live" handlers. Live handlers          are those that are associated with pending asynchronous operations, as          well as handlers that are currently executing. For example:        cat output.txt | perl handlerlive.pl          or:        perl handerlive.pl &lt; output.txt          or:        perl handlerlive.pl output.txt                            Added the handlertree.pl tool, which filters handler          tracking output to include only those events in the tree that produced          the nominated handlers. For example, to filter the output to include only          the events associated with handlers 123,          456, and their predecessors:          cat output.txt | perl handlertree.pl 123 456          or:          perl handlertree.pl 123 456 &lt; output.txt           This script may be combined with handerlive.pl and handlerviz.pl          to produce a graph of the "live" asynchronous operation chains.          For example:          cat output.txt | \    perl handlertree.pl perl handlerlive.pl output.txt | \    perl handlerviz.pl | \    dot -Tsvg &gt; output.svg                            Added changes for clang-based Embarcadero C++ compilers.                  Fixed a deadlock that can occur when multiple threads concurrently initialise          the Windows I/O completion port backend.                  Fixed async_compose to          work with copyable handlers when passed by lvalue.                  Fixed completion signature deduction in co_spawn.                  Removed a spurious Executor          base class from the executor_binder          implementation.                  Various fixes and improvements in the documentation and examples.              Asio      1.16.1 / Boost 1.73              Fixed compatibility with C++20 concept syntax.                  Marked the POSIX descriptor classes' move constructors as noexcept.                  Added the ssl::host_name_verification class, which is          a drop-in replacement for ssl::rfc2818_verification.          The ssl::rfc2818_verification class has been marked          as deprecated. As a consequence of this change, SSL support now depends          on functions that were introduced in OpenSSL 1.0.2.                  Added an ssl::context constructor to take ownership          of a native handle.                  Changed C++ language version detection with gcc to use          __cplusplus macro.                  Fixed a work counting issue in the asynchronous resolve operation for endpoints.                  Fixed the strand&lt;&gt;          converting constructors and assignment operators.                  Ensured that resolvers are restarted correctly after a fork.                  Fixed compatibility with the current NetBSD release.                  Removed spurious handler requirement checks in some async_read          overloads.                  Changed the ssl::context class to propagate non-EOF errors          from the add_certificate_authority          function.                  Fixed a Windows-specific thread_pool          destructor hang that occurred when the pool had an associated I/O object.                  Changed the select reactor to recreate the "self          pipe trick" sockets on error. This addresses an issue on some versions          of Windows, where these sockets are discconected after a system sleep.                  Fixed a compile error in the buffered streams due to the lack of reference          collapsing in C++98.                  Changed the priority_scheduler          example to demonstrate calls to shutdown() and destroy().                  Removed some unnecessary null pointer checks.                  Changed Windows platform detection to recognise TV titles as Windows apps.                  Added some emscripten compatibility patches.                  Fixed a compile error in the use_awaitable_t::as_default_on          function.                  Changed all uses of the boost.bind placeholders to use the boost::placeholders namespace.                  Fixed a potential compile error in the async_compose          implementation due to incorrect overload selection.                  Suppressed some non-virtual destructor warnings.                  Various documentation fixes and improvements.              Asio      1.16.0 / Boost 1.72              Changed the async_initiate          helper function to automatically deduce its return type. This is enabled          for C++11 or later.                  Changed all asynchronous operations to use automatically deduced return          types. This allows completion token implementations to incorporate the          asynchronous operation initiation into the initiating function's return          type, without type erasure. Note that C++14 or later is required to support          completion tokens that use per-operation return type deduction. For C++11          or earlier, a completion token's async_result specialisation must still          provide the nested typedef return_type.                  Introduced three new concepts to support async_initiate.                          completion_signature&lt;T&gt;: Checks if T                is a signature of the form R(Args...).                              completion_handler_for&lt;T, Signature&gt;: Checks if T                is usable as a completion handler with the specified signature.                              completion_token_for&lt;T, Signature&gt;: Checks if T                is a completion token that can be used with async_initiate and the                specified signature.                              For backward compatibility with pre-concepts C++, the macros BOOST_ASIO_COMPLETION_SIGNATURE,                BOOST_ASIO_COMPLETION_HANDLER_FOR,                and BOOST_ASIO_COMPLETION_TOKEN_FOR                are provided. These macros expand to typename                when concepts are unsupported.                                Added the nested template type rebind_executor          to all I/O object types, as a way to generically rebind them to use alternative          I/O executors. For example:        using my_socket_type = tcp::socket::rebind_executor&lt;my_executor_type&gt;::other;                            Changed the asynchronous operations' initiation function objects to report          their associated I/O executor via the nested type executor_type          and member function get_executor(). Note that the presence of executor_type and get_executor() should be treated as optional, and consequently          it may be preferable to access them via the associated_executor          trait and the get_associated_executor() helper function.                  Added the default_completion_token          trait, so that every I/O executor type now has an associated default completion          token type. This trait may be used in asynchronous operation declarations          as follows:        template &lt;    typename IoObject,    typename CompletionToken =      typename default_completion_token&lt;        typename IoObject::executor_type      &gt;::type  &gt;auto async_fyz(    IoObject&amp; io_object,    CompletionToken&amp;&amp; token =      typename default_completion_token&lt;        typename IoObject::executor_type      &gt;::type{}  );           If not specialised, this trait type is void,          meaning no default completion token type is available for the given I/O          executor.                  Specialised the default_completion_token          trait for the use_awaitable          completion token, so that it may be used as shown in the following example:        auto socket = use_awaitable.as_default_on(tcp::socket(my_context));// ...co_await socket.async_connect(my_endpoint); // Defaults to use_awaitable.           In this example, the type of the socket          object is transformed from tcp::socket          to have an I/O executor with the default completion token set to use_awaitable. Alternatively, the socket          type may be computed directly:        using tcp_socket = use_awaitable_t&lt;&gt;::as_default_on_t&lt;tcp::socket&gt;;tcp_socket socket(my_context);// ...co_await socket.async_connect(my_endpoint); // Defaults to use_awaitable.                            Added missing async_initiate          to the Windows-specific I/O objects' asynchronous operations.                  Ensured that the executor type is propagated to newly accepted sockets.          When synchronously or asynchronously accepting a new connection, but without          specifying an executor or execution context, the accept operation will          now correctly propagate the executor type from the acceptor to the socket.          For example, if your acceptor type is:        basic_socket_acceptor&lt;ip::tcp, my_executor_type&gt;           then your accepted socket type will be:        basic_stream_socket&lt;ip::tcp, my_executor_type&gt;                            Changed to require that Protocol          copy and move operations never throw.                  Changed to require that Endpoint          default constructor and move operations never throw.                  Added the noexcept qualifier          to protocol accessors.                  Added the noexcept qualifier          to socket move constructors.                  Fixed issues associated with opening serial ports on Windows:                          Use the correct constant to initialise the RTS control flag.                              Specify a default baud rate (9600).                                Fixed a lost "outstanding work count" that can occur when an          asynchronous accept operation is automatically restarted.              Asio      1.14.1 / Boost 1.71              Improved performance slightly by eliminating a redundant move construction          when completed handlers are dispatched.                  Eliminated a compiler warning by annotating a case          fall-through in the free function connect() implementation.                  Fixed the is_*_buffer_sequence detection traits for          user-defined sequence types.                  Fixed some Windows-specific warnings about an incompatible pointer cast          when obtaining the CancelIoEx          entry point.                  Changed to automatically set the defaults when opening a serial port on          Windows.                  Changed the serial port get_option() member function to be const.                  Fixed a name hiding issue with the WinRT stream-oriented socket backend's          shutdown function.                  Applied a minor fix to the documentation for is_dynamic_buffer.                  Added some support for Haiku OS.                  Added wolfSSL compatability.                  Changed to require C++17 or later for coroutines TS support with clang.                  Fixed a doxygen generation problem in the tutorial.                  Ensured example programs are correctly incorporated into the documentation.              Asio      1.14.0 / Boost 1.70              Added custom I/O executor support to I/O objects.                          All I/O objects now have an additional Executor                template parameter. This template parameter defaults to the asio::executor type (the polymorphic                executor wrapper) but can be used to specify a user-defined executor                type.                              I/O objects' constructors and functions that previously took an                asio::io_context&amp;                now accept either an Executor                or a reference to a concrete ExecutionContext                (such as asio::io_context or asio::thread_pool).                              Note: One potential source of breakage in existing user code is when                reusing an I/O object's io_context                for constructing another I/O object, as in:              asio::steady_timer my_timer(my_socket.get_executor().context());                 To fix this, either construct the second I/O object using                the first I/O object's executor:              asio::steady_timer my_timer(my_socket.get_executor());                 or otherwise explicitly pass the io_context:              asio::steady_timer my_timer(my_io_context);                                              The previously deprecated get_io_context                and get_io_service                member functions have now been removed.                              The previously deprecated service template parameters, and the corresponding                classes, have now been removed.                                Added a new async_result          form with an initiate static          member function.                          The async_result                template now supports a new form:              template &lt;typename CompletionToken, typename Signature&gt;struct async_result{  typedef /* ... */ return_type;  template &lt;typename Initiation,      typename RawCompletionToken,      typename... Args&gt;  static return_type initiate(      Initiation&amp;&amp; initiation,      RawCompletionToken&amp;&amp; token,      Args&amp;&amp;... args);};                                              The initiate member                function must: (a) transform the token into a completion handler                object handler; (b)                cause the invocation of the function object initiation                as if by calling std::forward&lt;Initiation&gt;(initiation)(std::move(handler), std::forward&lt;Args&gt;(args)...). Note that the invocation of                initiation may be                deferred (e.g. lazily evaluated), in which case initiation                and args must be                decay-copied and moved as required.                              A helper function template async_initiate                has also been added as a wrapper for the invocation of async_result&lt;&gt;::initiate. For backward compatibility,                this function supports both the old and new async_result                forms.                              The composed operations examples have been updated to use async_initiate.                              The previously deprecated handler_type                trait and single-argument form of async_result                have now been removed.                                Updated the Coroutines TS support and promoted it to the asio namespace.                          The awaitable&lt;&gt;,                co_spawn, this_coro, detached,                and redirect_error                facilities have been moved from the asio::experimental                namespace to namespace asio.                As part of this change, the this_coro::token() awaitable has been superseded by                the asio::use_awaitable completion token.                              Please note that the use_awaitable                and redirect_error                completion tokens work only with asynchronous operations that use                the new form of async_result                with member function initiate.                Furthermore, when using use_awaitable,                please be aware that the asynchronous operation is not initiated                until co_await is                applied to the awaitable&lt;&gt;.                                Added a new DynamicBuffer_v2          concept which is CopyConstructible.                          This change adds a new set of type requirements for dynamic buffers,                DynamicBuffer_v2,                which supports copy construction. These new type requirements enable                dynamic buffers to be used as arguments to user-defined composed                operations, where the same dynamic buffer object is used repeatedly                for multiple underlying operations. For example:              template &lt;typename DynamicBuffer&gt;void echo_line(tcp::socket&amp; sock, DynamicBuffer buf){  n = asio::read_until(sock, buf, '\n');  asio::write(sock, buf, asio::transfer_exactly(n));}                                              The original DynamicBuffer                type requirements have been renamed to DynamicBuffer_v1.                These requirements continue to be compatible with the Networking                TS.                              New type traits is_dynamic_buffer_v1                and is_dynamic_buffer_v2                have been added to test for conformance to DynamicBuffer_v1                and DynamicBuffer_v2                respectively. The existing is_dynamic_buffer                trait has been retained and delegates to is_dynamic_buffer_v1                (unless BOOST_ASIO_NO_DYNAMIC_BUFFER_V1                is explicitly defined, in which case it delegates to is_dynamic_buffer_v2).                              For convenience, the dynamic_string_buffer                and dynamic_vector_buffer                classes conform to both DynamicBuffer_v1                and DynamicBuffer_v2                requirements.                              When BOOST_ASIO_NO_DYNAMIC_BUFFER_V1                is defined, all support for DynamicBuffer_v1                types and functions is #ifdef-ed out. Support for using basic_streambuf with the read, async_read,                read_until, async_read_until, write, and async_write                functions is also disabled as a consequence.                              Note: This change should have no impact on existing source code that                simply uses dynamic buffers in conjunction with Asio's composed operations.                                Added a new async_compose          function that simplifies the implementation of user-defined asynchronous          operations.                  Added a make_strand function,          which creates a strand          with a deduced Executor          template argument.                  Relaxed the completion condition type requirements to only require move-constructibility          rather than copy-constructibility.                  Added a constructor for local::basic_endpoint          that takes a string_view.                  Added the noexcept qualifier to various member functions of the ip::address, ip::address_v4,          ip::address_v6, ip::basic_endpoint,          and executor_work_guard          classes.                  Added the noexcept qualifier to the buffer_sequence_begin          and buffer_sequence_end          functions.                  Added a new BOOST_ASIO_DISABLE_VISIBILITY          configuration #define          that allows visibility pragmas to be disabled. (Note: If symbols are hidden,          extra care must be taken to ensure that Asio types are not passed across          shared library API boundaries.)                  Enabled recycling of the memory used to type-erase a function object with          the polymorphic executor.                  Changed receive operations to return the correct number of bytes transferred          when truncation (error::message_size)          occurs on a datagram-oriented socket.                  Fixed multicast behaviour on QNX by automatically applying SO_REUSEPORT when the reuse_address          option is set.                  Added inclusion of unistd.h when          targeting Haiku OS, to fix feature detection.                  Added the network_v[46].hpp          headers to the top-level convenience header.                  Fixed calculation of absolute timeout when the backend uses pthread_cond_timedwait.                  Changed the range-based asynchronous connect operation to deduce the EndpointSequence iterator type rather          than assume the presence of a const_iterator          typedef.                  Fixed buffer_sequence_begin          and buffer_sequence_end          to prevent implicit conversion. This change addresses an issue where a          call to buffer_sequence_begin          or buffer_sequence_end          could trigger an implicit conversion to const_buffer          or mutable_buffer. Whenever          this implicit conversion occurred, the return value of buffer_sequence_begin          or buffer_sequence_end          would point to a temporary object.                  Ensured SSL handshake errors are propagated to the peer before the local          operation completes.                  Suppressed the eof error          on SSL shutdown as it actually indicates success.                  Added a fallback error code for when we OpenSSL produces an SSL_ERROR_SYSCALL result without an associated          error.                  Changed composed asynchronous read and write operations to move, rather          than copy, the buffer sequence objects when the composed operation implementation          is moved.                  Changed to use &lt;atomic&gt; when targeting apple/clang/libc++ with          recent Xcode versions, even for C++03. This fixes a warning about the deprecation          of OSMemoryBarrier.                  Fixed compile errors that occur when using the composed read and write          operations with MSVC 11.0, by disabling decltype          support for that compiler.                  Increased the default value of _WIN32_WINNT          to 0x0601 (Windows 7).                  Fixed dispatch documentation          to note that it may call the supplied function object in the current thread.                  Updated post and defer documentation to clarify the the          distinction between them.                  Fixed compilation errors in the read and write composed operations when          used with MSVC 11.0.                  Fixed a Windows-specific issue where the execution context associated with          system_executor was not          being correctly cleaned up on exit.              Asio      1.12.2 / Boost 1.69              Fixed a problem with the detection of std::future          availability with libstdc++.                  Fixed compile error in regex overload of read_until.                  Fixed a timer heap corruption issue that can occur when moving a cancelled          timer.                  Fixed detection of std::experimental::string_view          and std::string_view with newer clang/libc++.                  Fixed MSVC version detection for availability of std::invoke_result.                  Fixed the buffer sequence traits to test the new requirements, if decltype is available.                  Fixed an MSVC issue when building with exceptions disabled.                  Added SSL context options for TLS v1.3.                  Added a compile-time test for TLS v1 support.                  Fixed the macro used to test for TLS v1.2 support.                  Prevented global objects from being created once per thread on Windows.                  Fixed a crash when using size(), max_size() or empty() on default-constructed resolver results.                  Changed to move the return value in basic_resolver_results::begin() to          avoid copying.                  Enabled move support for the Intel Compiler.                  Fixed std::string_view detection issue when using          clang-cl.                  Fixed the handler tracking operation name for io_context::executor_type::dispatch.                  Fixed a buffer overflow that could occur when parsing an address string          with a 64-bit scope id.                  Added examples showing how to write composed operations.                  Added C++11 versions of the Timeouts, Timers, SOCKS4 and SSL examples.                  Fixed minor issues in documentation and examples.              Asio      1.12.1 / Boost 1.67              Added missing const qualifier to basic_socket_acceptor::get_option.                  Worked around a parsing error that occurs with some versions of gcc.                  Fixed broken code samples in tutorial.                  Added new experimental features. (Note that "experimental" features          may be changed without notice in subsequent releases.)                          Added experimental::detached                completion token.                              Added experimental::redirect_error                completion token.                              Added experimental::co_spawn                facility for integration with the coroutines technical specification.                                Updated timeout examples to use latest features.                          Used asio::steady_timer rather than asio::deadline_timer.                              Used asio::dynamic_buffer rather than asio::streambuf.                              Used timed asio::io_context::run_for()                function for blocking clients.                              Added example showing a custom completion token for blocking with                timeouts.                                Fixed unit tests to compile when BOOST_ASIO_NO_DEPRECATED          is defined.                  Changed socket iostreams to use chrono by default, to fix compatibility          with the Networking TS. Define BOOST_ASIO_USE_BOOST_DATE_TIME_FOR_SOCKET_IOSTREAM          to enable the old Boost.Date_Time interface in basic_socket_streambuf          and basic_socket_iostream.                  Updated examples to use chrono rather than Boost.Date_Time.                  Fixed an incorrect member function detector in the is_dynamic_buffer          trait.                  Fixed an async_result incompatibility          with deprecated handler_type.                  Added a missing move optimisation in the SSL stream implementation.                  Fixed incorrect basic_resolver_results::value_type          typedef.                  Fixed a compile error with some OpenSSL versions when SSL_OP_NO_COMPRESSION          is defined.                  Changed add_certificate_authority          to process multiple certificates in a bundle.                  Eliminated deprecation warning with MSVC by using std::invoke_result          rather than std::result_of.                  Changed to use std::string_view for C++17 or later, and          std::experimental::string_view for C++14. Define the preprocessor          macro BOOST_ASIO_DISABLE_STD_STRING_VIEW          to force the use of std::experimental::string_view (assuming it is available)          when compiling in C++17 mode.                  Ensured DynamicBuffer template          arguments are decayed before using in enable_if          tests.                  Changed documentation to distinguish legacy completion handlers (which          are still required to be CopyConstructible) from new MoveConstructible          handlers.                  Suppressed a discarded return value warning in the buffer debugging support.                  Fixed basic_yield_context          to work with completion signatures containing reference parameters.                  Ensured that stackful coroutines launched using spawn() correctly store decayed copies of their          function and handler arguments.                  Fixed some compatibility issues with Android.                  Added cross-compilation support to Jamfiles.                  Fixed some minor portability issues in examples.              Asio      1.12.0 / Boost 1.66              Implemented interface changes to reflect the Networking TS (N4656).                          See the list of new interfaces                and, where applicable, the corresponding old interfaces that have                been superseded.                              The service template parameters, and the corresponding classes, are                disabled by default. For example, instead of basic_socket&lt;Protocol, SocketService&gt; we now have simply basic_socket&lt;Protocol&gt;.                The old interface can be enabled by defining the BOOST_ASIO_ENABLE_OLD_SERVICES                macro.                                Removed previously deprecated functions.                  Added support for customised handler tracking.                  Added reactor-related (i.e. descriptor readiness) events to handler tracking.                  Added special concurrency          hint values that may be used to disable locking on a per io_context basis.                  Enabled perfect forwarding for the first ssl::stream&lt;&gt; constructor argument.                  Added ability to release ownership of the underlying native socket. (Requires          Windows 8.1 or later when using the I/O completion port backend.)              Asio      1.10.10 / Boost 1.65              Changed to require g++ versions &gt;= 4.7 to use standard          atomics, to fix a linker error when using g++ 4.6 (#13121).                  Enabled use of constexpr and          variadic templates with recent MSVC versions.                  Fixed a race condition in the Linux epoll backend, which may occur when          a socket or descriptor is closed while another thread is blocked on epoll.                  Eliminated use of deprecated auto_ptr.                  Fixed misplaced use of asio_handler_is_continuation          result in reactive async_accept          implementation.                  Changed to use poll.h rather than sys/poll.h on          some modern POSIX platforms (#12419).                  Fixed MSVC intellisense detection.                  Disabled use of the __thread          keyword extension for android/clang/x86 targets.              Asio      1.10.9 / Boost 1.64              Added limited support for using regular file descriptors (where I/O operations          should never fail with EAGAIN          or EWOULDBLOCK) with posix::stream_descriptor, when using the Linux          epoll backend.                  Changed to use allocator_traits          to rebind allocators in C++11 or later.                  Eliminated a double "construction" issue in the converting move          constructors.                  Added new ssl::context_base enumerations to enable support          for any TLS version, and improved consistency of SSL/TLS version handling          across OpenSSL releases.                  Applied more changes to address OpenSSL 1.1 compatibility.                  Fixed a compile error when OpenSSL compression is disabled at compile time.                  Suppressed some spurious unused variable warnings issued by gcc          (#12302).                  Worked around a new clang warning issued for usage of the comma operator.                  Fixed various header ordering problems.                  Changed to refer std::atomic_thread_fence, when available,          to eliminate a deprecated function warning on newest macOS SDK (#12482).                  Added a workaround for broken getaddrinfo          in Apple's NAT64 environment.                  Fixed an exception safety issue in the internal hash map implementation.              Asio      1.10.8 / Boost 1.62              Added compatibility with OpenSSL 1.1.0 (#12238).                  Fixed out-of-bounds iterator use in asio::connect() when the connect_condition          returns an end iterator (#12354).                  Added a workaround for a move detection problem on MSVC 2015 Update 2 (#12115).                  Changed a workaround that was previously added for broken Windows firewalls          to only bind to 127.0.0.1 if getsockname          reports 0.0.0.0 (#12406).                  Added call to SSL_COMP_free_compression_methods          to fix two memory leaks reported at shutdown, for OpenSSL versions &gt;=          1.0.2 and &lt; 1.1.0 (#10795).                  Fixed use_future compile          error encountered on some standard library implementations, by changing          std::allocator&lt;void&gt;          use to a non-void template parameter.                  Enabled use of native getaddrinfo          by default on Apple OSes, rather than emulation in terms of getipnodebyname.              Asio      1.10.7 / Boost 1.60              Added support for Windows 8.1 Store apps.                  Fixed macro multiple definition error on Microsoft Visual Studio 2015 (#11539).                  Changed Asio's SSL wrapper to respect OpenSSL's OPENSSL_NO_SSL3          feature test #define          (#11754).                  Changed Asio's SSL wrapper to use OpenSSL's new SSL_CTX_clear_chain_certs          function, if available.                  Suppressed a clang 3.6+ warning about unused typedefs (#11767).                  Regenerated certificates used by SSL examples.                  Fixed buffer sizes passed to strncat          in the getaddrinfo emulation          and in the SSL wrapper's password handling.                  Changed Windows backend to use non-macro CreateEventW          rather than CreateEvent          (#11732).              Asio      1.10.6 / Boost 1.58              Ensured errors generated by Windows' ConnectEx          function are mapped to their portable equivalents (#10744).                  Added new macro BOOST_ASIO_DISABLE_CONNECTEX          to allow use of ConnectEx          to be explicitly disabled.                  Fixed a race condition in windows::object_handle          when there are pending wait operations on destruction (#10624).                  Fixed IPv6 address parsing on FreeBSD, where a trailing scope ID would          cause conversion to fail with EINVAL.                  Worked around shared library visibility issues by ensuring Asio types use          default visibility (#9465, #11070).                  Changed the SSL wrapper to call the password callback when loading an in-memory          key (#10828).                  Fixed false SSL error reports by ensuring that the SSL error queue is cleared          prior to each operation.                  Fixed an ssl::stream&lt;&gt;          bug that may result in spurious 'short read' errors.                  Removed a redundant null pointer check in the SSL engine (#10088).                  Added options for disabling TLS v1.1 and v1.2 (#10690).                  Removed use of deprecated OpenSSL function ERR_remove_state.                  Fixed detection of various C++11 features with Clang (#8835, #10884).                  Fixed detection of C++11 std::addressof          with g++ (#10982).                  Changed multicast test to treat certain join_group          failures as non-fatal.                  Decoupled Asio unit tests from Boost.Test (#11116).                  Changed the tutorial to use std::endl          to ensure output is flushed.                  Fixed an unsigned integer overflow reported by Clang's integer sanitizer.                  Added support for move-only return types when using a yield_context          object with asynchronous operations.                  Changed yield_context to          allow reentrant calls to the completion handler from an initiating function.                  Updated detection of Windows Runtime to work with latest Windows SDK.              Asio      1.10.5 / Boost 1.57              Fixed the kqueue reactor so that it works on FreeBSD          (#10606).                  Fixed an issue in the kqueue reactor which resulted          in spinning when using serial ports on Mac OS (#10496).                  Fixed kqueue reactor support for read-only file descriptors          (#10367).                  Fixed a compile error when using the /dev/poll reactor          (#10350, #10572).                  Changed the Windows backend to use WSASocketW,          as WSASocketA has been          deprecated (#10534).                  Fixed some warnings reported by Visual C++ 2013 (#10376).                  Fixed integer type used in the WinRT version of the byte-order conversion          functions (#10539).                  Changed documentation to indicate that use_future          and spawn()          are not made available when including the asio.hpp          convenience header (#10567).                  Explicitly marked asio::strand          as deprecated. Use asio::io_service::strand          instead.              Asio      1.10.4 / Boost 1.56              Stopped using certain Winsock functions that are marked as deprecated in          the latest Visual C++ and Windows SDK.                  Fixed a shadow variable warning on Windows.                  Fixed a regression in the kqueue backend that was introduced          in Asio 1.10.2.                  Added a workaround for building the unit tests with gcc          on AIX.              Asio      1.10.3              Worked around a gcc problem to do with anonymous enums          (#10042).                  Reverted the Windows HANDLE          backend change to ignore ERROR_MORE_DATA.          Instead, the error will be propagated as with any other (i.e. in an error_code or thrown as a system_error), and the number of bytes          transferred will be returned. For code that needs to handle partial messages,          the error_code overload          should be used (#10034).                  Fixed an off-by-one error in the signal_set          implementation's signal number check (#9324).                  Changed the Windows IOCP backend to not assume that SO_UPDATE_CONNECT_CONTEXT          is defined (#10016).                  Fixed a Windows-specific issue, introduced in Asio 1.10.2, by using VerifyVersionInfo rather than GetVersionEx, as GetVersionEx          has been deprecated.                  Changed to use SSE2 intrinsics rather than inline assembly, to allow the          Cray compiler to work.              Asio      1.10.2              Fixed asio::spawn()          to work correctly with new Boost.Coroutine interface (#9442, #9928).                  Ensured that incomplete asio::spawn() coroutines are correctly unwound when          cleaned up by the io_service          destructor (#9731).                  Fixed delegation of continuation hook for handlers produced by io_service::wrap()          and strand::wrap()          (#9741).                  Changed the Windows I/O completion port backend to use ConnectEx,          if available, for connection-oriented IP sockets.                  Changed the io_service          backend for non-Windows (and non-IOCP Windows) platforms to use a single          condition variable per io_service          instance. This addresses a potential race condition when run_one()          is used from multiple threads.                  Prevented integer overflow when computing timeouts based on some boost::chrono and std::chrono          clocks (#9662, #9778).                  Made further changes to EV_CLEAR          handling in the kqueue backend, to address other cases where the close()          system call may hang on Mac OS X.                  Fixed infinite recursion in implementation of resolver_query_base::flags::operator~ (#9548).                  Made the select reactor          more efficient on Windows for large numbers of sockets (#9528).                  Fixed a Windows-specific type-aliasing issue reported by gcc          (#9550).                  Prevented execution of compile-time-only buffer test to avoid triggering          an address sanitiser warning (#8295).                  Disabled the GetQueuedCompletionStatus          timeout workaround on recent versions of Windows.                  Added support for string-based scope IDs when using link-local multicast          addresses.                  Changed IPv6 multicast group join to use the address's scope ID as the          interface, if an interface is not explicitly specified.                  Fixed multicast test failure on Mac OS X and the BSDs by using a link-local          multicast address.                  Various minor documentation improvements (#8295, #9605, #9771).              Asio      1.10.1 / Boost 1.55              Implemented a limited port to Windows Runtime. This support requires that          the language extensions be enabled. Due to the restricted facilities exposed          by the Windows Runtime API, the port also comes with the following caveats:                          The core facilities such as the io_service,                strand, buffers,                composed operations, timers, etc., should all work as normal.                              For sockets, only client-side TCP is supported.                              Explicit binding of a client-side TCP socket is not supported.                              The cancel()                function is not supported for sockets. Asynchronous operations may                only be cancelled by closing the socket.                              Operations that use null_buffers                are not supported.                              Only tcp::no_delay and socket_base::keep_alive                options are supported.                              Resolvers do not support service names, only numbers. I.e. you must                use "80" rather than "http".                              Most resolver query flags have no effect.                                Fixed a regression (introduced in Boost 1.54) where, on some platforms,          errors from async_connect          were not correctly propagated through to the completion handler (#8795).                  Fixed a Windows-specific regression (introduced in Boost 1.54) that occurs          when multiple threads are running an io_service.          When the bug occurs, the result of an asynchronous operation (error and          bytes tranferred) is incorrectly discarded and zero values used instead.          For TCP sockets this results in spurious end-of-file notifications (#8933).                  Fixed a bug in handler tracking, where it was not correctly printing out          some handler IDs (#8808).                  Fixed the comparison used to test for successful synchronous accept operations          so that it works correctly with unsigned socket descriptors (#8752).                  Ensured the signal number is correctly passed to the completion handler          when starting an async_wait          on a signal that is already raised (#8738).                  Suppressed a g++ 4.8+ warning about unused typedefs (#8980).                  Enabled the move optimisation for handlers that use the default invocation          hook (#8624).                  Clarified that programs must not issue overlapping async_write_at          operations (#8669).                  Changed the Windows HANDLE          backend to treat ERROR_MORE_DATA          as a non-fatal error when returned by GetOverlappedResult          for a synchronous read (#8722).                  Visual C++ language extensions use generic          as a keyword. Added a workaround that renames the namespace to cpp_generic when those language extensions          are in effect.                  Fixed some asynchronous operations that missed out on getting async_result support in Boost 1.54. In          particular, the buffered stream templates have been updated so that they          adhere to current handler patterns (#9000, #9001).                  Enabled move support for Microsoft Visual Studio 2012 (#8959).                  Added use_future support          for Microsoft Visual Studio 2012.                  Removed a use of std::min in the Windows IOCP backend to avoid          a dependency on the &lt;algorithm&gt; header (#8758).                  Eliminated some unnecessary handler copies.                  Fixed support for older versions of OpenSSL that do not provide the SSL_CTX_clear_options function (#9273).                  Fixed various minor and cosmetic issues in code and documentation (including          #8347, #8950, #8953, #8965, #8997, #9230).              Asio      1.10.0 / Boost 1.54              Added new traits classes, handler_type          and async_result, that          allow the customisation of the return type of an initiating function.                  Added the asio::spawn()          function, a high-level wrapper for running stackful coroutines, based on          the Boost.Coroutine library. The spawn() function enables programs to implement          asynchronous logic in a synchronous manner. For example: size_t n          = my_socket.async_read_some(my_buffer, yield);. For further information, see Stackful          Coroutines.                  Added the asio::use_future special value, which provides          first-class support for returning a C++11 std::future          from an asynchronous operation's initiating function. For example: future&lt;size_t&gt;          = my_socket.async_read_some(my_buffer, asio::use_future);. For further information, see Futures.                  Promoted the stackless coroutine class and macros to be part of Asio's          documented interface, rather than part of the HTTP server 4 example. For          further information, see Stackless          Coroutines.                  Added a new handler hook called asio_handler_is_continuation.          Asynchronous operations may represent a continuation of the asynchronous          control flow associated with the current executing handler. The asio_handler_is_continuation hook can          be customised to return true          if this is the case, and Asio's implementation can use this knowledge to          optimise scheduling of the new handler. To cover common cases, Asio customises          the hook for strands, spawn() and composed asynchronous operations.                  Added four new generic protocol classes, generic::datagram_protocol,          generic::raw_protocol, generic::seq_packet_protocol          and generic::stream_protocol, which implement the          Protocol type requirements,          but allow the user to specify the address family (e.g. AF_INET)          and protocol type (e.g. IPPROTO_TCP)          at runtime. For further information, see Support          for Other Protocols.                  Added C++11 move constructors that allow the conversion of a socket (or          acceptor) into a more generic type. For example, an ip::tcp::socket          can be converted into a generic::stream_protocol::socket          via move construction. For further information, see Support          for Other Protocols.                  Extended the basic_socket_acceptor&lt;&gt;'s accept() and async_accept() functions to allow a new connection to          be accepted directly into a socket of a more generic type. For example,          an ip::tcp::acceptor can be used to accept into a          generic::stream_protocol::socket object. For further information,          see Support          for Other Protocols.                  Moved existing examples into a C++03-specific directory, and added a new          directory for C++11-specific examples. A limited subset of the C++03 examples          have been converted to their C++11 equivalents.                  Various SSL enhancements. Thanks go to Nick Jones, on whose work these          changes are based.                          Added support for SSL handshakes with re-use of data already read                from the wire. New overloads of the ssl::stream&lt;&gt; class's handshake() and async_handshake() functions have been added. These                accept a ConstBufferSequence                to be used as initial input to the ssl engine for the handshake procedure.                              Added support for creation of TLSv1.1 and TLSv1.2 ssl::context                objects.                              Added a set_verify_depth() function to the ssl::context                and ssl::stream&lt;&gt;                classes.                              Added the ability to load SSL certificate and key data from memory                buffers. New functions, add_certificate_authority(), use_certificate(), use_certificate_chain(), use_private_key(), use_rsa_private_key() and use_tmp_dh(), have been added to the ssl::context class.                              Changed ssl::context to automatically disable                SSL compression by default. To enable, use the new ssl::context::clear_options()                function, as in my_context.clear_options(ssl::context::no_compression).                                Fixed a potential deadlock in signal_set          implementation.                  Fixed an error in acceptor example in documentation #8421.                  Fixed copy-paste errors in waitable timer documentation #8602.                  Added assertions to satisfy some code analysis tools #7739.                  Fixed a malformed #warning          directive #7939.                  Fixed a potential data race in the Linux epoll          implementation.                  Fixed a Windows-specific bug, where certain operations might generate an          error_code with an invalid          (i.e. NULL) error_category #8613.                  Fixed basic_waitable_timer's          underlying implementation so that it can handle any time_point          value without overflowing the intermediate duration objects.                  Fixed a problem with lost thread wakeups that can occur when making concurrent          calls to run()          and poll()          on the same io_service          object #8354.                  Fixed implementation of asynchronous connect operation so that it can cope          with spurious readiness notifications from the reactor #7961.                  Fixed a memory leak in the ssl::rfc2818_verification          class.                  Added a mechanism for disabling automatic Winsock initialisation #3605.          See the header file boost/asio/detail/winsock_init.hpp          for details.              Asio      1.8.3 / Boost 1.53              Fixed some 64-to-32-bit conversion warnings (#7459).                  Fixed some small errors in documentation and comments (#7761).                  Fixed an error in the example embedded in basic_socket::get_option's          documentation (#7562).                  Changed to use long rather          than int for SSL_CTX options,          to match OpenSSL (#7209).                  Changed to use _snwprintf          to address a compile error due to the changed swprintf          signature in recent versions of MinGW (#7373).                  Fixed a deadlock that can occur on Windows when shutting down a pool of          io_service threads due          to running out of work (#7552).                  Enabled the noexcept qualifier          for error categories (#7797).                  Changed UNIX domain socket example to treat errors from accept          as non-fatal (#7488).                  Added a small block recycling optimisation to improve default memory allocation          behaviour.              Asio      1.8.2 / Boost 1.51              Fixed an incompatibility between ip::tcp::iostream          and C++11 (#7162).                  Decorated GCC attribute names with underscores to prevent interaction with          user-defined macros (#6415).                  Added missing #include &lt;cctype&gt;, needed for some versions of MinGW.                  Changed to use gcc's atomic builtins on ARM CPUs, when          available (#7140).                  Changed strand destruction to be a no-op, to allow strand objects to be          destroyed after their associated io_service          has been destroyed.                  Added support for some newer versions of glibc which provide the epoll_create1()          function but always fail with ENOSYS          (#7012).                  Changed the SSL implementation to throw an exception if SSL engine initialisation          fails (#6303).                  Fixed another regression in buffered_write_stream          (#6310).                  Implemented various minor performance improvements, primarily targeted          at Linux x86 and x86-64 platforms.              Asio      1.8.1 / Boost 1.50              Changed the epoll_reactor          backend to do lazy registration for EPOLLOUT          events.                  Fixed the epoll_reactor          handling of out-of-band data, which was broken by an incomplete fix in          the last release.                  Changed Asio's SSL wrapper to respect OpenSSL's OPENSSL_NO_ENGINE          feature test #define          (#6432).                  Fixed windows::object_handle so that it works with Windows          compilers that support C++11 move semantics (such as g++).                  Improved the performance of strand rescheduling.                  Added support for g++ 4.7 when compiling in C++11 mode          (#6620).                  Fixed a problem where signal_set          handlers were not being delivered when the io_service          was constructed with a concurrency_hint          of 1 (#6657).              Asio      1.8.0 / Boost 1.49              Added a new class template basic_waitable_timer          based around the C++11 clock type requirements. It may be used with the          clocks from the C++11 &lt;chrono&gt;          library facility or, if those are not available, Boost.Chrono. The typedefs          high_resolution_timer,          steady_timer and system_timer may be used to create timer          objects for the standard clock types.                  Added a new windows::object_handle class for performing waits          on Windows kernel objects. Thanks go to Boris Schaeling for contributing          substantially to the development of this feature.                  On Linux, connect()          can return EAGAIN in certain circumstances. Remapped this to another error          so that it doesn't look like a non-blocking operation (#6048).                  Fixed a compile error on NetBSD (#6098).                  Fixed deadlock on Mac OS X (#6275).                  Fixed a regression in buffered_write_stream          (#6310).                  Fixed a non-paged pool "leak" on Windows when an io_service is repeatedly run without          anything to do (#6321).                  Reverted earlier change to allow some speculative operations to be performed          without holding the lock, as it introduced a race condition in some multithreaded          scenarios.                  Fixed a bug where the second buffer in an array of two buffers may be ignored          if the first buffer is empty.              Asio      1.6.1 / Boost 1.48              Implemented various performance improvements, including:                          Using thread-local operation queues in single-threaded use cases                (i.e. when concurrency_hint                is 1) to eliminate a lock/unlock pair.                              Allowing some epoll_reactor                speculative operations to be performed without holding the lock.                              Improving locality of reference by performing an epoll_reactor's                I/O operation immediately before the corresponding handler is called.                This also improves scalability across CPUs when multiple threads                are running the io_service.                              Specialising asynchronous read and write operations for buffer sequences                that are arrays (boost::array                or std::array) of exactly two buffers.                                Fixed a compile error in the regex overload of async_read_until          (#5688).                  Fixed a Windows-specific compile error by explicitly specifying the signal()          function from the global namespace (#5722).                  Changed the deadline_timer          implementation so that it does not read the clock unless the timer heap          is non-empty.                  Changed the SSL stream's buffers' sizes so that they are large enough to          hold a complete TLS record (#5854).                  Fixed the behaviour of the synchronous null_buffers          operations so that they obey the user's non-blocking setting (#5756).                  Changed to set the size of the select fd_set          at runtime when using Windows.                  Disabled an MSVC warning due to const qualifier being applied to function          type.                  Fixed a crash that occurs when using the Intel C++ compiler (#5763).                  Changed the initialisation of the OpenSSL library so that it supports all          available algorithms.                  Fixed the SSL error mapping used when the session is gracefully shut down.                  Added some latency test programs.                  Clarified that a read operation ends when the buffer is full (#5999).                  Fixed an exception safety issue in epoll_reactor          initialisation (#6006).                  Made the number of strand implementations configurable by defining BOOST_ASIO_STRAND_IMPLEMENTATIONS to          the desired number.                  Added support for a new BOOST_ASIO_ENABLE_SEQUENTIAL_STRAND_ALLOCATION          flag which switches the allocation of strand implementations to use a round-robin          approach rather than hashing.                  Fixed potential strand starvation issue that can occur when strand.post()          is used.              Asio      1.6.0 / Boost 1.47              Added support for signal handling, using a new class called signal_set. Programs may add one or more          signals to the set, and then perform an async_wait() operation. The specified handler will          be called when one of the signals occurs. The same signal number may be          registered with multiple signal_set          objects, however the signal number must be used only with Asio. Addresses          #2879.                  Added handler tracking, a new debugging aid. When enabled by defining          BOOST_ASIO_ENABLE_HANDLER_TRACKING,          Asio writes debugging output to the standard error stream. The output records          asynchronous operations and the relationships between their handlers. It          may be post-processed using the included handlerviz.pl          tool to create a visual representation of the handlers (requires GraphViz).                  Added support for timeouts on socket iostreams, such as ip::tcp::iostream.          A timeout is set by calling expires_at() or expires_from_now() to establish a deadline. Any socket operations          which occur past the deadline will put the iostream into a bad state.                  Added a new error()          member function to socket iostreams, for retrieving the error code from          the most recent system call.                  Added a new basic_deadline_timer::cancel_one() function. This function lets you cancel          a single waiting handler on a timer. Handlers are cancelled in FIFO order.                  Added a new transfer_exactly() completion condition. This can be used          to send or receive a specified number of bytes even if the total size of          the buffer (or buffer sequence) is larger.                  Added new free functions connect() and async_connect(). These operations try each endpoint in          a list until the socket is successfully connected, and are useful for creating          TCP clients that work with both IPv4 and IPv6.                  Extended the buffer_size() function so that it works for buffer          sequences in addition to individual buffers.                  Added a new buffer_copy() function that can be used to copy the          raw bytes between individual buffers and buffer sequences.                  Added new non-throwing overloads of read(), read_at(), write() and write_at() that do not require a completion condition.                  Added friendlier compiler errors for when a completion handler does not          meet the necessary type requirements. When C++0x is available (currently          supported for g++ 4.5 or later, and MSVC 10), static_assert is also used to generate an          informative error message. This checking may be disabled by defining BOOST_ASIO_DISABLE_HANDLER_TYPE_REQUIREMENTS.                  Added a new, completely rewritten SSL implementation. The new implementation          compiles faster, shows substantially improved performance, and supports          custom memory allocation and handler invocation. It includes new API features          such as certificate verification callbacks and has improved error reporting.          The new implementation is source-compatible with the old for most uses.          However, if necessary, the old implementation may still be used by defining          BOOST_ASIO_ENABLE_OLD_SSL.          Addresses #3702,          #3958.                  Changed the separate compilation support such that, to use Asio's SSL capabilities,          you should also include boost/asio/ssl/impl/src.hpp          in one source file in your program.                  Changed the SSL implementation to support build environments where SSL          v2 is explicitly disabled (#5453).                  Made the is_loopback(),          is_unspecified()          and is_multicast()          functions consistently available across the ip::address,          ip::address_v4 and ip::address_v6          classes (#3939).                  Added new non_blocking() functions for managing the non-blocking          behaviour of a socket or descriptor. The io_control() commands named non_blocking_io          are now deprecated in favour of these new functions.                  Added new native_non_blocking() functions for managing the non-blocking          mode of the underlying socket or descriptor. These functions are intended          to allow the encapsulation of arbitrary non-blocking system calls as asynchronous          operations, in a way that is transparent to the user of the socket object.          The functions have no effect on the behaviour of the synchronous operations          of the socket or descriptor.                  Added the io_control()          member function for socket acceptors (#3297).                  Added a release()          member function to posix descriptors. This function releases ownership          of the underlying native descriptor to the caller. Addresses #3900.                  Added support for sequenced packet sockets (SOCK_SEQPACKET).                  Added a new io_service::stopped() function that can be used to determine          whether the io_service          has stopped (i.e. a reset() call is needed prior to any further calls          to run(),          run_one(),          poll()          or poll_one()).                  For consistency with the C++0x standard library, deprecated the native_type typedefs in favour of native_handle_type, and the native()          member functions in favour of native_handle().                  Added support for C++0x move construction and assignment to sockets, serial          ports, POSIX descriptors and Windows handles.                  Reduced the copying of handler function objects.                  Added support for C++0x move construction to further reduce (and in some          cases eliminate) copying of handler objects.                  Added support for the fork() system call. Programs that use fork()          must call io_service.notify_fork()          at the appropriate times. Two new examples have been added showing how          to use this feature. Addresses #3238,          #4162.                  Cleaned up the handling of errors reported by the close() system call. In particular, assume that          most operating systems won't have close() fail with EWOULDBLOCK,          but if it does then set the blocking mode and restart the call. If any          other error occurs, assume the descriptor is closed. Addresses #3307.                  Added new asio::buffer()          overloads for std::array, when available.                  Changed the implementation to use the C++0x standard library templates          array, shared_ptr,          weak_ptr and atomic when they are available, rather          than the Boost equivalents.                  Use C++0x variadic templates when available, rather than generating function          overloads using Boost.Preprocessor.                  Changed exception reporting to include the function name in exception          what()          messages.                  Fixed insufficient initialisers warning with MinGW.                  Changed the shutdown_service() member functions to be private.                  Added archetypes for testing socket option functions.                  Changed the Boost.Asio examples so that they don't use Boost.Thread's convenience          header. Use the header file that is specifically for the boost::thread          class instead.                  Removed the dependency on OS-provided macros for the well-known IPv4 and          IPv6 addresses. This should eliminate annoying "missing braces around          initializer" warnings (#3741).                  Reduced the size of ip::basic_endpoint&lt;&gt; objects (such as ip::tcp::endpoint and ip::udp::endpoint).                  Changed the reactor backends to assume that any descriptors or sockets          added using assign()          may have been dup()-ed,          and so require explicit deregistration from the reactor (#4971).                  Removed the deprecated member functions named io_service(). The get_io_service() member functions should be used instead.                  Removed the deprecated typedefs resolver_query          and resolver_iterator from          the ip::tcp, ip::udp          and ip::icmp classes.                  Modified the buffers_iterator&lt;&gt; and ip::basic_resolver_iterator          classes so that the value_type typedefs are non-const byte types.                  Fixed warnings reported by g++'s -Wshadow compiler option          (#3905).                  Added an explicit cast to convert the FIONBIO          constant to int, to suppress a compiler warning on some platforms (#5128).                  Changed most examples to treat a failure by an accept operation as non-fatal          (#5124).                  Fixed an error in the tick_count_timer example by making          the duration type signed. Previously, a wait on an already-passed deadline          would not return for a very long time (#5418).              Asio      1.4.9 / Boost 1.46.1              EV_ONESHOT seems to cause          problems on some versions of Mac OS X, with the io_service          destructor getting stuck inside the close() system call. Changed the kqueue backend          to use EV_CLEAR instead          (#5021).                  Fixed compile failures with some versions of g++ due          to the use of anonymous enums (#4883).                  Fixed a bug on kqueue-based platforms, where some system calls that repeatedly          fail with EWOULDBLOCK are          not correctly re-registered with kqueue.                  Changed asio::streambuf to ensure that its internal          pointers are updated correctly after the data has been modified using          std::streambuf member functions.                  Fixed a bug that prevented the linger socket option from working on platforms          other than Windows.              Asio      1.4.8 / Boost 1.46              Fixed an integer overflow problem that occurs when ip::address_v4::broadcast() is used on 64-bit platforms.                  Fixed a problem on older Linux kernels (where epoll is used without timerfd          support) that prevents timely delivery of deadline_timer handlers, after          the program has been running for some time (#5045).              Asio      1.4.7 / Boost 1.45              Fixed a problem on kqueue-based platforms where a deadline_timer          may never fire if the io_service          is running in a background thread (#4568).                  Fixed a const-correctness issue that prevented valid uses of has_service&lt;&gt;          from compiling (#4638).                  Fixed MinGW cross-compilation (#4491).                  Removed dependency on deprecated Boost.System functions (#4672).                  Ensured close()/closesocket()          failures are correctly propagated (#4573).                  Added a check for errors returned by InitializeCriticalSectionAndSpinCount          (#4574).                  Added support for hardware flow control on QNX (#4625).                  Always use pselect()          on HP-UX, if it is available (#4578).                  Ensured handler arguments are passed as lvalues (#4744).                  Fixed Windows build when thread support is disabled (#4680).                  Fixed a Windows-specific problem where deadline_timer          objects with expiry times set more than 5 minutes in the future may never          expire (#4745).                  Fixed the resolver backend          on BSD platforms so that an empty service name resolves to port number          0, as per the documentation          (#4690).                  Fixed read operations so that they do not accept buffer sequences of type          const_buffers_1 (#4746).                  Redefined Protocol and          id to avoid clashing with          Objective-C++ keywords (#4191).                  Fixed a vector reallocation          performance issue that can occur when there are many active deadline_timer objects (#4780).                  Fixed the kqueue backend so that it compiles on NetBSD (#4662).                  Fixed the socket io_control() implementation on 64-bit Mac OS X and          BSD platforms (#4782).                  Fixed a Windows-specific problem where failures from accept() are incorrectly treated as successes          (#4859).                  Deprecated the separate compilation header &lt;boost/asio/impl/src.cpp&gt;          in favour of &lt;boost/asio/impl/src.hpp&gt; (#4560).              Asio      1.4.6 / Boost 1.44              Reduced compile times. (Note that some programs may need to add additional          #includes, e.g. if the          program uses boost::array but does not explicitly include          &lt;boost/array.hpp&gt;.)                  Reduced the size of generated code.                  Refactored deadline_timer          implementation to improve performance.                  Improved multiprocessor scalability on Windows by using a dedicated hidden          thread to wait for timers.                  Improved performance of asio::streambuf          with async_read()          and async_read_until().          These read operations now use the existing capacity of the streambuf when reading, rather than limiting          the read to 512 bytes.                  Added optional separate compilation. To enable, add #include          &lt;boost/asio/impl/src.cpp&gt; to one source file in a program, then          build the program with BOOST_ASIO_SEPARATE_COMPILATION          defined in the project/compiler settings. Alternatively, BOOST_ASIO_DYN_LINK may be defined to          build a separately-compiled Asio as part of a shared library.                  Added new macro BOOST_ASIO_DISABLE_FENCED_BLOCK          to permit the disabling of memory fences around completion handlers, even          if thread support is enabled.                  Reworked timeout examples to better illustrate typical use cases.                  Ensured that handler arguments are passed as const          types.                  Fixed incorrect parameter order in null_buffers          variant of async_send_to          (#4170).                  Ensured unsigned char          is used with isdigit in          getaddrinfo emulation (#4201).                  Fixed handling of very small but non-zero timeouts (#4205).                  Fixed crash that occurred when an empty buffer sequence was passed to a          composed read or write operation.                  Added missing operator+          overload in buffers_iterator          (#4382).                  Implemented cancellation of null_buffers          operations on Windows.              Asio      1.4.5 / Boost 1.43              Improved performance.                  Reduced compile times.                  Reduced the size of generated code.                  Extended the guarantee that background threads don't call user code to          all asynchronous operations (#3923).                  Changed to use edge-triggered epoll on Linux.                  Changed to use timerfd          for dispatching timers on Linux, when available.                  Changed to use one-shot notifications with kqueue on Mac OS X and BSD platforms.                  Added a bitmask type ip::resolver_query_base::flags          as per the TR2 proposal. This type prevents implicit conversion from int to flags,          allowing the compiler to catch cases where users incorrectly pass a numeric          port number as the service name.                  Added #define NOMINMAX          for all Windows compilers. Users can define BOOST_ASIO_NO_NOMINMAX          to suppress this definition (#3901).                  Fixed a bug where 0-byte asynchronous reads were incorrectly passing an          error::eof result to the completion handler          (#4023).                  Changed the io_control() member functions to always call ioctl on the underlying descriptor when          modifying blocking mode (#3307).                  Changed the resolver implementation to longer require the typedefs InternetProtocol::resolver_query and InternetProtocol::resolver_iterator,          as neither typedef is part of the documented InternetProtocol          requirements. The corresponding typedefs in the ip::tcp,          ip::udp and ip::icmp          classes have been deprecated.                  Fixed out-of-band handling for reactors not based on select().                  Added new BOOST_ASIO_DISABLE_THREADS          macro that allows Asio's threading support to be independently disabled.                  Minor documentation improvements.              Asio      1.4.4 / Boost 1.42              Added a new HTTP Server 4 example illustrating the use of stackless coroutines          with Asio.                  Changed handler allocation and invocation to use boost::addressof          to get the address of handler objects, rather than applying operator&amp;          directly (#2977).                  Restricted MSVC buffer debugging workaround to 2008, as it causes a crash          with 2010 beta 2 (#3796,          #3822).                  Fixed a problem with the lifetime of handler memory, where Windows needs          the OVERLAPPED structure          to be valid until both the initiating function call has returned and the          completion packet has been delivered.                  Don't block signals while performing system calls, but instead restart          the calls if they are interrupted.                  Documented the guarantee made by strand objects with respect to order of          handler invocation.                  Changed strands to use a pool of implementations, to make copying of strands          cheaper.                  Ensured that kqueue support is enabled for BSD platforms (#3626).                  Added a boost_ prefix to          the extern "C"          thread entry point function (#3809).                  In getaddrinfo emulation,          only check the socket type (SOCK_STREAM          or SOCK_DGRAM) if a service          name has been specified. This should allow the emulation to work with raw          sockets.                  Added a workaround for some broken Windows firewalls that make a socket          appear bound to 0.0.0.0 when it is in fact bound to 127.0.0.1.                  Applied a fix for reported excessive CPU usage under Solaris (#3670).                  Added some support for platforms that use older compilers such as g++ 2.95          (#3743).              Asio      1.4.3 / Boost 1.40              Added a new ping example to illustrate the use of ICMP sockets.                  Changed the buffered*_stream&lt;&gt;          templates to treat 0-byte reads and writes as no-ops, to comply with the          documented type requirements for SyncReadStream,          AsyncReadStream, SyncWriteStream and AsyncWriteStream.                  Changed some instances of the throw          keyword to boost::throw_exception()          to allow Asio to be used when exception support is disabled. Note that          the SSL wrappers still require exception support (#2754).                  Made Asio compatible with the OpenSSL 1.0 beta (#3256).                  Eliminated a redundant system call in the Solaris /dev/poll          backend.                  Fixed a bug in resizing of the bucket array in the internal hash maps (#3095).                  Ensured correct propagation of the error code when a synchronous accept          fails (#3216).                  Ensured correct propagation of the error code when a synchronous read or          write on a Windows HANDLE fails.                  Fixed failures reported when _GLIBCXX_DEBUG          is defined (#3098).                  Fixed custom memory allocation support for timers (#3107).                  Tidied up various warnings reported by g++ (#1341,          #2618).                  Various documentation improvements, including more obvious hyperlinks to          function overloads, header file information, examples for the handler type          requirements, and adding enum values to the index (#3157,          #2620).              Asio      1.4.2 / Boost 1.39              Implement automatic resizing of the bucket array in the internal hash maps.          This is to improve performance for very large numbers of asynchronous operations          and also to reduce memory usage for very small numbers. A new macro BOOST_ASIO_HASH_MAP_BUCKETS may be used          to tweak the sizes used for the bucket arrays. (N.B. this feature introduced          a bug which was fixed in Asio 1.4.3 / Boost 1.40.)                  Add performance optimisation for the Windows IOCP backend for when no timers          are used.                  Prevent locale settings from affecting formatting of TCP and UDP endpoints          (#2682).                  Fix a memory leak that occurred when an asynchronous SSL operation's completion          handler threw an exception (#2910).                  Fix the implementation of io_control() so that it adheres to the documented          type requirements for IoControlCommand (#2820).                  Fix incompatibility between Asio and ncurses.h (#2156).                  On Windows, specifically handle the case when an overlapped ReadFile call fails with ERROR_MORE_DATA. This enables a hack          where a windows::stream_handle can be used with a message-oriented          named pipe (#2936).                  Fix system call wrappers to always clear the error on success, as POSIX          allows successful system calls to modify errno (#2953).                  Don't include termios.h if BOOST_ASIO_DISABLE_SERIAL_PORT          is defined (#2917).                  Cleaned up some more MSVC level 4 warnings (#2828).                  Various documentation fixes (#2871).              Asio      1.4.1 / Boost 1.38              Improved compatibility with some Windows firewall software.                  Ensured arguments to windows::overlapped_ptr::complete() are correctly passed to the completion          handler (#2614).                  Fixed a link problem and multicast failure on QNX (#2504,          #2530).                  Fixed a compile error in SSL support on MinGW / g++ 3.4.5.                  Drop back to using a pipe for notification if eventfd is not available          at runtime on Linux (#2683).                  Various minor bug and documentation fixes (#2534,          #2541,          #2607,          #2617,          #2619).              Asio      1.4.0 / Boost 1.37              Enhanced CompletionCondition concept with the signature size_t          CompletionCondition(error_code ec, size_t total),          where the return value indicates the maximum number of bytes to be transferred          on the next read or write operation. (The old CompletionCondition signature          is still supported for backwards compatibility).                  New windows::overlapped_ptr class to allow arbitrary overlapped I/O functions          (such as TransmitFile) to be used with Asio.                  On recent versions of Linux, an eventfd descriptor is now used (rather          than a pipe) to interrupt a blocked select/epoll reactor.                  Added const overloads of lowest_layer().                  Synchronous read, write, accept and connect operations are now thread safe          (meaning that it is now permitted to perform concurrent synchronous operations          on an individual socket, if supported by the OS).                  Reactor-based io_service implementations now use lazy initialisation to          reduce the memory usage of an io_service object used only as a message          queue.              Asio      1.2.0 / Boost 1.36              Added support for serial ports.                  Added support for UNIX domain sockets.                  Added support for raw sockets and ICMP.                  Added wrappers for POSIX stream-oriented file descriptors (excluding regular          files).                  Added wrappers for Windows stream-oriented HANDLEs          such as named pipes (requires HANDLEs          that work with I/O completion ports).                  Added wrappers for Windows random-access HANDLEs          such as files (requires HANDLEs          that work with I/O completion ports).                  Added support for reactor-style operations (i.e. they report readiness          but perform no I/O) using a new null_buffers          type.                  Added an iterator type for bytewise traversal of buffer sequences.                  Added new read_until()          and async_read_until()          overloads that take a user-defined function object for locating message          boundaries.                  Added an experimental two-lock queue (enabled by defining BOOST_ASIO_ENABLE_TWO_LOCK_QUEUE) that          may provide better io_service          scalability across many processors.                  Various fixes, performance improvements, and more complete coverage of          the custom memory allocation support.              Asio      1.0.0 / Boost 1.35          First release of Asio as part of Boost.    Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/history.html
execution::blocking_adaptation_t::disallowed_t::is_requirableexecution::blocking_adaptation_t::disallowed_t::is_requirableHomeLibrariesPeopleFAQMoreexecution::blocking_adaptation_t::disallowed_t::is_requirable           The          execution::blocking_adaptation_t::disallowed_t property can be required.        static constexpr bool is_requirable = true;Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/execution__blocking_adaptation_t__disallowed_t/is_requirable.html
execution::blocking_adaptation_t::disallowed_t::is_applicable_property_vexecution::blocking_adaptation_t::disallowed_t::is_applicable_property_vHomeLibrariesPeopleFAQMoreexecution::blocking_adaptation_t::disallowed_t::is_applicable_property_v           The          execution::blocking_adaptation_t::disallowed_t property applies          to executors, senders, and schedulers.        template &lt;typename T&gt;static constexpr bool is_applicable_property_v =    is_executor_v&lt;T&gt; || is_sender_v&lt;T&gt; || is_scheduler_v&lt;T&gt;;Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/execution__blocking_adaptation_t__disallowed_t/is_applicable_property_v.html
execution::blocking_adaptation_t::disallowed_t::valueexecution::blocking_adaptation_t::disallowed_t::valueHomeLibrariesPeopleFAQMoreexecution::blocking_adaptation_t::disallowed_t::value           Get          the value associated with a property object.        static constexpr blocking_adaptation_t value();          Return          Value                  disallowed_t();        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/execution__blocking_adaptation_t__disallowed_t/value.html
execution::blocking_adaptation_t::disallowed_t::is_preferableexecution::blocking_adaptation_t::disallowed_t::is_preferableHomeLibrariesPeopleFAQMoreexecution::blocking_adaptation_t::disallowed_t::is_preferable           The          execution::blocking_adaptation_t::disallowed_t property can be preferred.        static constexpr bool is_preferable = true;Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/execution__blocking_adaptation_t__disallowed_t/is_preferable.html
execution::blocking_adaptation_t::disallowed_t::polymorphic_query_result_typeexecution::blocking_adaptation_t::disallowed_t::polymorphic_query_result_typeHomeLibrariesPeopleFAQMoreexecution::blocking_adaptation_t::disallowed_t::polymorphic_query_result_type           The          type returned by queries against an any_executor.        typedef blocking_adaptation_t polymorphic_query_result_type;          Requirements                  Header: boost/asio/execution/blocking_adaptation.hpp                  Convenience header: boost/asio/execution.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/execution__blocking_adaptation_t__disallowed_t/polymorphic_query_result_type.html
execution::blocking_adaptation_t::disallowed_t::disallowed_texecution::blocking_adaptation_t::disallowed_t::disallowed_tHomeLibrariesPeopleFAQMoreexecution::blocking_adaptation_t::disallowed_t::disallowed_t           Default          constructor.        constexpr disallowed_t();Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/execution__blocking_adaptation_t__disallowed_t/disallowed_t.html
basic_raw_socketbasic_raw_socketHomeLibrariesPeopleFAQMorebasic_raw_socket                      Provides raw-oriented socket functionality.      template&lt;    typename Protocol,    typename Executor&gt;class basic_raw_socket :  public basic_socket&lt; Protocol, Executor &gt;        Types                                        Name                                                                Description                                                                rebind_executor                                                                Rebinds the socket type to another executor.                                                                broadcast                                                                Socket option to permit sending of broadcast messages.                                                                bytes_readable                                                                IO control command to get the amount of data that can be read without                  blocking.                                                                debug                                                                Socket option to enable socket-level debugging.                                                                do_not_route                                                                Socket option to prevent routing, use local interfaces only.                                                                enable_connection_aborted                                                                Socket option to report aborted connections on accept.                                                                endpoint_type                                                                The endpoint type.                                                                executor_type                                                                The type of the executor associated with the object.                                                                keep_alive                                                                Socket option to send keep-alives.                                                                linger                                                                Socket option to specify whether the socket lingers on close if                  unsent data is present.                                                                lowest_layer_type                                                                A basic_socket is always the lowest layer.                                                                message_flags                                                                Bitmask type for flags that can be passed to send and receive operations.                                                                native_handle_type                                                                The native representation of a socket.                                                                out_of_band_inline                                                                Socket option for putting received out-of-band data inline.                                                                protocol_type                                                                The protocol type.                                                                receive_buffer_size                                                                Socket option for the receive buffer size of a socket.                                                                receive_low_watermark                                                                Socket option for the receive low watermark.                                                                reuse_address                                                                Socket option to allow the socket to be bound to an address that                  is already in use.                                                                send_buffer_size                                                                Socket option for the send buffer size of a socket.                                                                send_low_watermark                                                                Socket option for the send low watermark.                                                                shutdown_type                                                                Different ways a socket may be shutdown.                                                                wait_type                                                                Wait types.                                      Member Functions                                        Name                                                                Description                                                                assign                                                                Assign an existing native socket to the socket.                                                                async_connect                                                                Start an asynchronous connect.                                                                async_receive                                                                Start an asynchronous receive on a connected socket.                                                                async_receive_from                                                                Start an asynchronous receive.                                                                async_send                                                                Start an asynchronous send on a connected socket.                                                                async_send_to                                                                Start an asynchronous send.                                                                async_wait                                                                Asynchronously wait for the socket to become ready to read, ready                  to write, or to have pending error conditions.                                                                at_mark                                                                Determine whether the socket is at the out-of-band data mark.                                                                available                                                                Determine the number of bytes available for reading.                                                                basic_raw_socket [constructor]                                                                Construct a basic_raw_socket without opening it.   —                  Construct and open a basic_raw_socket.   — Construct                  a basic_raw_socket, opening it and binding it to the given local                  endpoint.   — Construct a basic_raw_socket on an existing                  native socket.   — Move-construct a basic_raw_socket                  from another.   — Move-construct a basic_raw_socket from                  a socket of another protocol type.                                                                bind                                                                Bind the socket to the given local endpoint.                                                                cancel                                                                Cancel all asynchronous operations associated with the socket.                                                                close                                                                Close the socket.                                                                connect                                                                Connect the socket to the specified endpoint.                                                                get_executor                                                                Get the executor associated with the object.                                                                get_option                                                                Get an option from the socket.                                                                io_control                                                                Perform an IO control command on the socket.                                                                is_open                                                                Determine whether the socket is open.                                                                local_endpoint                                                                Get the local endpoint of the socket.                                                                lowest_layer                                                                Get a reference to the lowest layer.   — Get a const                  reference to the lowest layer.                                                                native_handle                                                                Get the native socket representation.                                                                native_non_blocking                                                                Gets the non-blocking mode of the native socket implementation.                    — Sets the non-blocking mode of the native socket implementation.                                                                non_blocking                                                                Gets the non-blocking mode of the socket.   — Sets the                  non-blocking mode of the socket.                                                                open                                                                Open the socket using the specified protocol.                                                                operator=                                                                Move-assign a basic_raw_socket from another.   — Move-assign                  a basic_raw_socket from a socket of another protocol type.                                                                receive                                                                Receive some data on a connected socket.                                                                receive_from                                                                Receive raw data with the endpoint of the sender.                                                                release                                                                Release ownership of the underlying native socket.                                                                remote_endpoint                                                                Get the remote endpoint of the socket.                                                                send                                                                Send some data on a connected socket.                                                                send_to                                                                Send raw data to the specified endpoint.                                                                set_option                                                                Set an option on the socket.                                                                shutdown                                                                Disable sends or receives on the socket.                                                                wait                                                                Wait for the socket to become ready to read, ready to write, or                  to have pending error conditions.                                                                ~basic_raw_socket [destructor]                                                                Destroys the socket.                                      Data        Members                                        Name                                                                Description                                                                max_connections [static]                                                                (Deprecated: Use max_listen_connections.) The maximum length of                  the queue of pending incoming connections.                                                                max_listen_connections [static]                                                                The maximum length of the queue of pending incoming connections.                                                                message_do_not_route [static]                                                                Specify that the data should not be subject to routing.                                                                message_end_of_record [static]                                                                Specifies that the data marks the end of a record.                                                                message_out_of_band [static]                                                                Process out-of-band data.                                                                message_peek [static]                                                                Peek at incoming data without removing it from the input queue.                                      The basic_raw_socket        class template provides asynchronous and blocking raw-oriented socket functionality.              Thread        Safety              Distinct objects: Safe.              Shared objects: Unsafe.              Synchronous send, send_to, receive,        receive_from, and connect operations are thread safe with        respect to each other, if the underlying operating system calls are also        thread safe. This means that it is permitted to perform concurrent calls        to these synchronous operations on a single socket object. Other synchronous        operations, such as open        or close, are not thread        safe.              Requirements              Header: boost/asio/basic_raw_socket.hpp              Convenience header: boost/asio.hpp      Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_raw_socket.html
execution::blocking_adaptationexecution::blocking_adaptationHomeLibrariesPeopleFAQMoreexecution::blocking_adaptation                      A special value used for accessing the execution::blocking_adaptation_t property.      constexpr blocking_adaptation_t blocking_adaptation;        Requirements              Header: boost/asio/execution/blocking_adaptation.hpp              Convenience header: boost/asio/execution.hpp      Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/execution__blocking_adaptation.html
Buffer-oriented synchronous random-access write device requirementsBuffer-oriented synchronous random-access write device requirementsHomeLibrariesPeopleFAQMoreBuffer-oriented      synchronous random-access write device requirements        In the table below, a denotes        a synchronous random-access write device object, o        denotes an offset of type boost::uint64_t,        cb denotes an object satisfying        constant buffer        sequence requirements, and ec        denotes an object of type error_code.      Table 31. Buffer-oriented synchronous random-access write device requirements                                  operation                                                                type                                                                semantics, pre/post-conditions                                                                a.write_some_at(o,                  cb);                                                                size_t                                                                Equivalent to:                error_code ec;size_t s = a.write_some(o, cb, ec);if (ec) throw system_error(ec);return s;                                                a.write_some_at(o,                  cb,                  ec);                                                                size_t                                                                Writes one or more bytes of data to the device a                  at offset o.                   The constant buffer sequence cb                  specifies memory where the data to be written is located. The                  write_some_at operation                  shall always write a buffer in the sequence completely before proceeding                  to the next.  If successful, returns the number of                  bytes written and sets ec                  such that !ec                  is true. If an error occurred, returns 0                  and sets ec such                  that !!ec                  is true.  If the total size of all buffers in the sequence                  cb is 0, the function shall return 0 immediately.                              Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/SyncRandomAccessWriteDevice.html
buffer_sequence_begin (5 of 6 overloads)buffer_sequence_begin (5 of 6 overloads)HomeLibrariesPeopleFAQMorebuffer_sequence_begin        (5 of 6 overloads)          Get an iterator to the first element in a buffer sequence.        const mutable_buffer * buffer_sequence_begin(    const mutable_registered_buffer &amp; b);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffer_sequence_begin/overload5.html
buffer_sequence_begin (2 of 6 overloads)buffer_sequence_begin (2 of 6 overloads)HomeLibrariesPeopleFAQMorebuffer_sequence_begin        (2 of 6 overloads)          Get an iterator to the first element in a buffer sequence.        template&lt;    typename ConstBuffer&gt;const const_buffer * buffer_sequence_begin(    const ConstBuffer &amp; b,    typename constraint&lt; is_convertible&lt; const ConstBuffer *, const const_buffer * &gt;::value &gt;::type  = 0);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffer_sequence_begin/overload2.html
buffer_sequence_begin (6 of 6 overloads)buffer_sequence_begin (6 of 6 overloads)HomeLibrariesPeopleFAQMorebuffer_sequence_begin        (6 of 6 overloads)          Get an iterator to the first element in a buffer sequence.        const const_buffer * buffer_sequence_begin(    const const_registered_buffer &amp; b);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffer_sequence_begin/overload6.html
buffer_sequence_begin (3 of 6 overloads)buffer_sequence_begin (3 of 6 overloads)HomeLibrariesPeopleFAQMorebuffer_sequence_begin        (3 of 6 overloads)          Get an iterator to the first element in a buffer sequence.        template&lt;    typename C&gt;auto buffer_sequence_begin(    C &amp; c,    typename constraint&lt; !is_convertible&lt; const C *, const mutable_buffer * &gt;::value &amp;&amp;!is_convertible&lt; const C *, const const_buffer * &gt;::value &gt;::type  = 0);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffer_sequence_begin/overload3.html
buffer_sequence_begin (4 of 6 overloads)buffer_sequence_begin (4 of 6 overloads)HomeLibrariesPeopleFAQMorebuffer_sequence_begin        (4 of 6 overloads)          Get an iterator to the first element in a buffer sequence.        template&lt;    typename C&gt;auto buffer_sequence_begin(    const C &amp; c,    typename constraint&lt; !is_convertible&lt; const C *, const mutable_buffer * &gt;::value &amp;&amp;!is_convertible&lt; const C *, const const_buffer * &gt;::value &gt;::type  = 0);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffer_sequence_begin/overload4.html
buffer_sequence_begin (1 of 6 overloads)buffer_sequence_begin (1 of 6 overloads)HomeLibrariesPeopleFAQMorebuffer_sequence_begin        (1 of 6 overloads)          Get an iterator to the first element in a buffer sequence.        template&lt;    typename MutableBuffer&gt;const mutable_buffer * buffer_sequence_begin(    const MutableBuffer &amp; b,    typename constraint&lt; is_convertible&lt; const MutableBuffer *, const mutable_buffer * &gt;::value &gt;::type  = 0);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffer_sequence_begin/overload1.html
spawn (5 of 7 overloads)spawn (5 of 7 overloads)HomeLibrariesPeopleFAQMorespawn (5 of 7        overloads)          Start a new stackful coroutine that executes on a given strand.        template&lt;    typename Function,    typename Executor&gt;void spawn(    const strand&lt; Executor &gt; &amp; ex,    Function &amp;&amp; function,    const boost::coroutines::attributes &amp; attributes = boost::coroutines::attributes());          This function is used to launch a new coroutine.                  Parameters        ex                Identifies the strand that will run the coroutine.              function                The coroutine function. The function must have the signature:              void function(yield_context yield);attributes                Boost.Coroutine attributes used to customise the coroutine.              Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/spawn/overload5.html
spawn (2 of 7 overloads)spawn (2 of 7 overloads)HomeLibrariesPeopleFAQMorespawn (2 of 7        overloads)          Start a new stackful coroutine, calling the specified handler when it completes.        template&lt;    typename Handler,    typename Function&gt;void spawn(    Handler &amp;&amp; handler,    Function &amp;&amp; function,    const boost::coroutines::attributes &amp; attributes = boost::coroutines::attributes(),    typename constraint&lt; !is_executor&lt; typename decay&lt; Handler &gt;::type &gt;::value &amp;&amp;!execution::is_executor&lt; typename decay&lt; Handler &gt;::type &gt;::value &amp;&amp;!is_convertible&lt; Handler &amp;, execution_context &amp; &gt;::value &gt;::type  = 0);          This function is used to launch a new coroutine.                  Parameters        handler                A handler to be called when the coroutine exits. More importantly,                the handler provides an execution context (via the the handler invocation                hook) for the coroutine. The handler must have the signature:              void handler();function                The coroutine function. The function must have the signature:              void function(basic_yield_context&lt;Handler&gt; yield);attributes                Boost.Coroutine attributes used to customise the coroutine.              Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/spawn/overload2.html
spawn (6 of 7 overloads)spawn (6 of 7 overloads)HomeLibrariesPeopleFAQMorespawn (6 of 7        overloads)          Start a new stackful coroutine that executes in the context of a strand.        template&lt;    typename Function&gt;void spawn(    const boost::asio::io_context::strand &amp; s,    Function &amp;&amp; function,    const boost::coroutines::attributes &amp; attributes = boost::coroutines::attributes());          This function is used to launch a new coroutine.                  Parameters        s                Identifies a strand. By starting multiple coroutines on the same                strand, the implementation ensures that none of those coroutines                can execute simultaneously.              function                The coroutine function. The function must have the signature:              void function(yield_context yield);attributes                Boost.Coroutine attributes used to customise the coroutine.              Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/spawn/overload6.html
spawn (3 of 7 overloads)spawn (3 of 7 overloads)HomeLibrariesPeopleFAQMorespawn (3 of 7        overloads)          Start a new stackful coroutine, inheriting the execution context of another.        template&lt;    typename Handler,    typename Function&gt;void spawn(    basic_yield_context&lt; Handler &gt; ctx,    Function &amp;&amp; function,    const boost::coroutines::attributes &amp; attributes = boost::coroutines::attributes());          This function is used to launch a new coroutine.                  Parameters        ctx                Identifies the current coroutine as a parent of the new coroutine.                This specifies that the new coroutine should inherit the execution                context of the parent. For example, if the parent coroutine is executing                in a particular strand, then the new coroutine will execute in the                same strand.              function                The coroutine function. The function must have the signature:              void function(basic_yield_context&lt;Handler&gt; yield);attributes                Boost.Coroutine attributes used to customise the coroutine.              Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/spawn/overload3.html
spawn (4 of 7 overloads)spawn (4 of 7 overloads)HomeLibrariesPeopleFAQMorespawn (4 of 7        overloads)          Start a new stackful coroutine that executes on a given executor.        template&lt;    typename Function,    typename Executor&gt;void spawn(    const Executor &amp; ex,    Function &amp;&amp; function,    const boost::coroutines::attributes &amp; attributes = boost::coroutines::attributes(),    typename constraint&lt; is_executor&lt; Executor &gt;::value||execution::is_executor&lt; Executor &gt;::value &gt;::type  = 0);          This function is used to launch a new coroutine.                  Parameters        ex                Identifies the executor that will run the coroutine. The new coroutine                is implicitly given its own strand within this executor.              function                The coroutine function. The function must have the signature:              void function(yield_context yield);attributes                Boost.Coroutine attributes used to customise the coroutine.              Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/spawn/overload4.html
spawn (1 of 7 overloads)spawn (1 of 7 overloads)HomeLibrariesPeopleFAQMorespawn (1 of 7        overloads)          Start a new stackful coroutine, calling the specified handler when it completes.        template&lt;    typename Function&gt;void spawn(    Function &amp;&amp; function,    const boost::coroutines::attributes &amp; attributes = boost::coroutines::attributes());          This function is used to launch a new coroutine.                  Parameters        function                The coroutine function. The function must have the signature:              void function(basic_yield_context&lt;Handler&gt; yield);attributes                Boost.Coroutine attributes used to customise the coroutine.              Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/spawn/overload1.html
spawn (7 of 7 overloads)spawn (7 of 7 overloads)HomeLibrariesPeopleFAQMorespawn (7 of 7        overloads)          Start a new stackful coroutine that executes on a given execution context.        template&lt;    typename Function,    typename ExecutionContext&gt;void spawn(    ExecutionContext &amp; ctx,    Function &amp;&amp; function,    const boost::coroutines::attributes &amp; attributes = boost::coroutines::attributes(),    typename constraint&lt; is_convertible&lt; ExecutionContext &amp;, execution_context &amp; &gt;::value &gt;::type  = 0);          This function is used to launch a new coroutine.                  Parameters        ctx                Identifies the execution context that will run the coroutine. The                new coroutine is implicitly given its own strand within this execution                context.              function                The coroutine function. The function must have the signature:              void function(yield_context yield);attributes                Boost.Coroutine attributes used to customise the coroutine.              Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/spawn/overload7.html
experimental::basic_channelexperimental::basic_channelHomeLibrariesPeopleFAQMoreexperimental::basic_channel                      A channel for messages.      template&lt;    typename Executor,    typename Traits,    typename... Signatures&gt;class basic_channel        Types                                        Name                                                                Description                                                                rebind_executor                                                                Rebinds the channel type to another executor.                                                                executor_type                                                                The type of the executor associated with the channel.                                                                traits_type                                                                The traits type associated with the channel.                                      Member        Functions                                        Name                                                                Description                                                                async_receive                                                                Asynchronously receive a message.                                                                async_send                                                                Asynchronously send a message.                                                                basic_channel [constructor]                                                                Construct a basic_channel.   — Construct and open a basic_channel.                    — Move-construct a basic_channel from another.                                                                cancel                                                                Cancel all asynchronous operations waiting on the channel.                                                                capacity                                                                Get the capacity of the channel's buffer.                                                                close                                                                Close the channel.                                                                get_executor                                                                Get the executor associated with the object.                                                                is_open                                                                Determine whether the channel is open.                                                                operator=                                                                Move-assign a basic_channel from another.                                                                ready                                                                Determine whether a message can be received without blocking.                                                                reset                                                                Reset the channel to its initial state.                                                                try_receive                                                                Try to receive a message without blocking.                                                                try_send                                                                Try to send a message without blocking.                                                                try_send_n                                                                Try to send a number of messages without blocking.                                                                ~basic_channel [destructor]                                                                Destructor.                                      The experimental::basic_channel class template is        used for sending messages between different parts of the same application.        A message is defined as a collection of arguments to        be passed to a completion handler, and the set of messages supported by a        channel is specified by its Traits        and Signatures...        template parameters. Messages may be sent and received using asynchronous        or non-blocking synchronous operations.              Unless customising the traits, applications will typically use the experimental::channel alias template. For example:      void send_loop(int i, steady_timer&amp; timer,    channel&lt;void(error_code, int)&gt;&amp; ch){  if (i &lt; 10)  {    timer.expires_after(chrono::seconds(1));    timer.async_wait(        [i, &amp;timer, &amp;ch](error_code error)        {          if (!error)          {            ch.async_send(error_code(), i,                [i, &amp;timer, &amp;ch](error_code error)                {                  if (!error)                  {                    send_loop(i + 1, timer, ch);                  }                });          }        });  }  else  {    ch.close();  }}void receive_loop(channel&lt;void(error_code, int)&gt;&amp; ch){  ch.async_receive(      [&amp;ch](error_code error, int i)      {        if (!error)        {          std::cout &lt;&lt; "Received " &lt;&lt; i &lt;&lt; "\n";          receive_loop(ch);        }      });}        Thread        Safety              Distinct objects: Safe.              Shared objects: Unsafe.              The experimental::basic_channel class template is        not thread-safe, and would typically be used for passing messages between        application code that runs on the same thread or in the same strand. Consider        using experimental::basic_concurrent_channel, and its        alias template experimental::concurrent_channel,        to pass messages between code running in different threads.              Requirements              Header: boost/asio/experimental/basic_channel.hpp              Convenience header: None      Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/experimental__basic_channel.html
posix::basic_stream_descriptorposix::basic_stream_descriptorHomeLibrariesPeopleFAQMoreposix::basic_stream_descriptor                      Provides stream-oriented descriptor functionality.      template&lt;    typename Executor = any_io_executor&gt;class basic_stream_descriptor :  public posix::basic_descriptor&lt; Executor &gt;        Types                                        Name                                                                Description                                                                rebind_executor                                                                Rebinds the descriptor type to another executor.                                                                bytes_readable                                                                IO control command to get the amount of data that can be read without                  blocking.                                                                executor_type                                                                The type of the executor associated with the object.                                                                lowest_layer_type                                                                A descriptor is always the lowest layer.                                                                native_handle_type                                                                The native representation of a descriptor.                                                                wait_type                                                                Wait types.                                      Member        Functions                                        Name                                                                Description                                                                assign                                                                Assign an existing native descriptor to the descriptor.                                                                async_read_some                                                                Start an asynchronous read.                                                                async_wait                                                                Asynchronously wait for the descriptor to become ready to read,                  ready to write, or to have pending error conditions.                                                                async_write_some                                                                Start an asynchronous write.                                                                basic_stream_descriptor [constructor]                                                                Construct a stream descriptor without opening it.   —                  Construct a stream descriptor on an existing native descriptor.                    — Move-construct a stream descriptor from another.                                                                cancel                                                                Cancel all asynchronous operations associated with the descriptor.                                                                close                                                                Close the descriptor.                                                                get_executor                                                                Get the executor associated with the object.                                                                io_control                                                                Perform an IO control command on the descriptor.                                                                is_open                                                                Determine whether the descriptor is open.                                                                lowest_layer                                                                Get a reference to the lowest layer.   — Get a const                  reference to the lowest layer.                                                                native_handle                                                                Get the native descriptor representation.                                                                native_non_blocking                                                                Gets the non-blocking mode of the native descriptor implementation.                    — Sets the non-blocking mode of the native descriptor                  implementation.                                                                non_blocking                                                                Gets the non-blocking mode of the descriptor.   — Sets                  the non-blocking mode of the descriptor.                                                                operator=                                                                Move-assign a stream descriptor from another.                                                                read_some                                                                Read some data from the descriptor.                                                                release                                                                Release ownership of the native descriptor implementation.                                                                wait                                                                Wait for the descriptor to become ready to read, ready to write,                  or to have pending error conditions.                                                                write_some                                                                Write some data to the descriptor.                                      The posix::basic_stream_descriptor class template        provides asynchronous and blocking stream-oriented descriptor functionality.              Thread        Safety              Distinct objects: Safe.              Shared objects: Unsafe.              Synchronous read_some and        write_some operations are        thread safe with respect to each other, if the underlying operating system        calls are also thread safe. This means that it is permitted to perform concurrent        calls to these synchronous operations on a single descriptor object. Other        synchronous operations, such as close,        are not thread safe.              Requirements              Header: boost/asio/posix/basic_stream_descriptor.hpp              Convenience header: boost/asio.hpp      Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/posix__basic_stream_descriptor.html
posix::basic_descriptor::rebind_executor::otherposix::basic_descriptor::rebind_executor::otherHomeLibrariesPeopleFAQMoreposix::basic_descriptor::rebind_executor::other           The          descriptor type when rebound to the specified executor.        typedef basic_descriptor&lt; Executor1 &gt; other;          Types                                              Name                                                                        Description                                                                        rebind_executor                                                                        Rebinds the descriptor type to another executor.                                                                        bytes_readable                                                                        IO control command to get the amount of data that can be read                    without blocking.                                                                        executor_type                                                                        The type of the executor associated with the object.                                                                        lowest_layer_type                                                                        A descriptor is always the lowest layer.                                                                        native_handle_type                                                                        The native representation of a descriptor.                                                                        wait_type                                                                        Wait types.                                            Member          Functions                                              Name                                                                        Description                                                                        assign                                                                        Assign an existing native descriptor to the descriptor.                                                                        async_wait                                                                        Asynchronously wait for the descriptor to become ready to read,                    ready to write, or to have pending error conditions.                                                                        basic_descriptor [constructor]                                                                        Construct a descriptor without opening it.   — Construct                    a descriptor on an existing native descriptor.   —                    Move-construct a descriptor from another.                                                                        cancel                                                                        Cancel all asynchronous operations associated with the descriptor.                                                                        close                                                                        Close the descriptor.                                                                        get_executor                                                                        Get the executor associated with the object.                                                                        io_control                                                                        Perform an IO control command on the descriptor.                                                                        is_open                                                                        Determine whether the descriptor is open.                                                                        lowest_layer                                                                        Get a reference to the lowest layer.   — Get a const                    reference to the lowest layer.                                                                        native_handle                                                                        Get the native descriptor representation.                                                                        native_non_blocking                                                                        Gets the non-blocking mode of the native descriptor implementation.                      — Sets the non-blocking mode of the native descriptor                    implementation.                                                                        non_blocking                                                                        Gets the non-blocking mode of the descriptor.   — Sets                    the non-blocking mode of the descriptor.                                                                        operator=                                                                        Move-assign a descriptor from another.                                                                        release                                                                        Release ownership of the native descriptor implementation.                                                                        wait                                                                        Wait for the descriptor to become ready to read, ready to write,                    or to have pending error conditions.                                            Protected          Member Functions                                              Name                                                                        Description                                                                        ~basic_descriptor [destructor]                                                                        Protected destructor to prevent deletion through this type.                                            The posix::basic_descriptor class template          provides the ability to wrap a POSIX descriptor.                  Thread          Safety                  Distinct objects: Safe.                  Shared objects: Unsafe.                  Requirements                  Header: boost/asio/posix/basic_descriptor.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/posix__basic_descriptor__rebind_executor/other.html
is_nothrow_queryis_nothrow_queryHomeLibrariesPeopleFAQMoreis_nothrow_query                      A type trait that determines whether a query        expression will not throw.      template&lt;    typename T,    typename Property&gt;struct is_nothrow_query        Class template is_nothrow_query        is a trait that is derived from true_type        if the expression boost::asio::query(std::declval&lt;T&gt;(),        std::declval&lt;Property&gt;())        is noexcept; otherwise false_type.              Requirements              Header: boost/asio/query.hpp              Convenience header: boost/asio.hpp      Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/is_nothrow_query.html
Wait token requirementsWait token requirementsHomeLibrariesPeopleFAQMoreWait token requirements        A wait token is a completion        token for completion signature void(error_code).              Examples              A free function as a wait token:      void wait_handler(    const boost::system::error_code&amp; ec){  ...}        A wait token function object:      struct wait_handler{  ...  void operator()(      const boost::system::error_code&amp; ec)  {    ...  }  ...};        A lambda as a wait token:      socket.async_wait(...,    [](const boost::system::error_code&amp; ec)    {      ...    });        A non-static class member function adapted to a wait token using std::bind():      void my_class::wait_handler(    const boost::system::error_code&amp; ec){  ...}...socket.async_wait(...,    std::bind(&amp;my_class::wait_handler,      this, std::placeholders::_1));        A non-static class member function adapted to a wait token using boost::bind():      void my_class::wait_handler(    const boost::system::error_code&amp; ec){  ...}...socket.async_wait(...,    boost::bind(&amp;my_class::wait_handler,      this, boost::asio::placeholders::error));        Using use_future as        a wait token:      std::future&lt;void&gt; f = socket.async_wait(..., boost::asio::use_future);...try{  f.get();}catch (const system_error&amp; e){  ...}        Using use_awaitable        as a wait token:      boost::asio::awaitable&lt;void&gt; my_coroutine(){  try  {    ...    co_await socket.async_wait(..., boost::asio::use_awaitable);    ...  }  catch (const system_error&amp; e)  {    ...  }}Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/WaitToken.html
placeholders::bytes_transferredplaceholders::bytes_transferredHomeLibrariesPeopleFAQMoreplaceholders::bytes_transferred                      An argument placeholder, for use with boost::bind(), that corresponds to        the bytes_transferred argument of a handler for asynchronous functions such        as boost::asio::basic_stream_socket::async_write_some or boost::asio::async_write.      unspecified bytes_transferred;        Requirements              Header: boost/asio/placeholders.hpp              Convenience header: boost/asio.hpp      Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/placeholders__bytes_transferred.html
ip::multicast::enable_loopbackip::multicast::enable_loopbackHomeLibrariesPeopleFAQMoreip::multicast::enable_loopback                      Socket option determining whether outgoing multicast packets will be received        on the same socket if it is a member of the multicast group.      typedef implementation_defined enable_loopback;        Implements the IPPROTO_IP/IP_MULTICAST_LOOP socket option.              Examples              Setting the option:      boost::asio::ip::udp::socket socket(my_context);...boost::asio::ip::multicast::enable_loopback option(true);socket.set_option(option);        Getting the current option value:      boost::asio::ip::udp::socket socket(my_context);...boost::asio::ip::multicast::enable_loopback option;socket.get_option(option);bool is_set = option.value();        Requirements              Header: boost/asio/ip/multicast.hpp              Convenience header: boost/asio.hpp      Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/ip__multicast__enable_loopback.html
this_coro::throw_if_cancelledthis_coro::throw_if_cancelledHomeLibrariesPeopleFAQMorethis_coro::throw_if_cancelled                      Returns an awaitable object that may be used to determine whether the coroutine        throws if trying to suspend when it has been cancelled.      constexpr unspecified throw_if_cancelled();  » more...        Returns an awaitable object that may be used to specify whether the coroutine        throws if trying to suspend when it has been cancelled.      constexpr unspecified throw_if_cancelled(    bool value);  » more...        Requirements              Header: boost/asio/this_coro.hpp              Convenience header: boost/asio.hpp      Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/this_coro__throw_if_cancelled.html
experimental::deferred_init_tagexperimental::deferred_init_tagHomeLibrariesPeopleFAQMoreexperimental::deferred_init_tag                      Tag type to disambiguate deferred constructors.      struct deferred_init_tag        Requirements              Header: boost/asio/experimental/deferred.hpp              Convenience header: None      Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/experimental__deferred_init_tag.html
Sender conceptsSender conceptsHomeLibrariesPeopleFAQMoreSender concepts        sender        and sender_to      template&lt;class S&gt;  concept sender =    move_constructible&lt;remove_cvref_t&lt;S&gt;&gt; &amp;&amp;    !requires {      typename sender_traits&lt;remove_cvref_t&lt;S&gt;&gt;::__unspecialized; // exposition only    };template&lt;class S, class R&gt;  concept sender_to =    sender&lt;S&gt; &amp;&amp;    receiver&lt;R&gt; &amp;&amp;    requires (S&amp;&amp; s, R&amp;&amp; r) {      execution::connect((S&amp;&amp;) s, (R&amp;&amp;) r);    };        None of these operations shall introduce data races as a result of concurrent        invocations of those functions from different threads.              A sender type's destructor shall not block pending completion of the submitted        function objects.              [Note: The ability to wait for completion of submitted        function objects may be provided by the associated execution context. —end        note]              typed_sender              A sender is typed if it declares what types        it sends through a receiver's channels. The typed_sender        concept is defined as:      template&lt;template&lt;template&lt;class...&gt; class Tuple, template&lt;class...&gt; class Variant&gt; class&gt;  struct has-value-types; // exposition onlytemplate&lt;template&lt;class...&gt; class Variant&gt;  struct has-error-types; // exposition onlytemplate&lt;class S&gt;  concept has-sender-types = // exposition only    requires {      typename has-value-types&lt;S::template value_types&gt;;      typename has-error-types&lt;S::template error_types&gt;;      typename bool_constant&lt;S::sends_done&gt;;    };template&lt;class S&gt;  concept typed_sender =    sender&lt;S&gt; &amp;&amp;    has-sender-types&lt;sender_traits&lt;remove_cvref_t&lt;S&gt;&gt;&gt;;Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/Sender.html
generic::basic_endpointgeneric::basic_endpointHomeLibrariesPeopleFAQMoregeneric::basic_endpoint                      Describes an endpoint for any socket type.      template&lt;    typename Protocol&gt;class basic_endpoint        Types                                        Name                                                                Description                                                                data_type                                                                The type of the endpoint structure. This type is dependent on the                  underlying implementation of the socket layer.                                                                protocol_type                                                                The protocol type associated with the endpoint.                                      Member        Functions                                        Name                                                                Description                                                                basic_endpoint [constructor]                                                                Default constructor.   — Construct an endpoint from the                  specified socket address.   — Construct an endpoint from                  the specific endpoint type.   — Copy constructor.                                                                capacity                                                                Get the capacity of the endpoint in the native type.                                                                data                                                                Get the underlying endpoint in the native type.                                                                operator=                                                                Assign from another endpoint.                                                                protocol                                                                The protocol associated with the endpoint.                                                                resize                                                                Set the underlying size of the endpoint in the native type.                                                                size                                                                Get the underlying size of the endpoint in the native type.                                      Friends                                        Name                                                                Description                                                                operator!=                                                                Compare two endpoints for inequality.                                                                operator&lt;                                                                Compare endpoints for ordering.                                                                operator&lt;=                                                                Compare endpoints for ordering.                                                                operator==                                                                Compare two endpoints for equality.                                                                operator&gt;                                                                Compare endpoints for ordering.                                                                operator&gt;=                                                                Compare endpoints for ordering.                                      The generic::basic_endpoint class template describes        an endpoint that may be associated with any socket type.              Remarks              The socket types sockaddr type must be able to fit into a sockaddr_storage        structure.              Thread        Safety              Distinct objects: Safe.              Shared objects: Unsafe.              Requirements              Header: boost/asio/generic/basic_endpoint.hpp              Convenience header: boost/asio.hpp      Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/generic__basic_endpoint.html
detached_t::executor_with_default::default_completion_token_typedetached_t::executor_with_default::default_completion_token_typeHomeLibrariesPeopleFAQMoredetached_t::executor_with_default::default_completion_token_type           Specify          detached_t as the default          completion token type.        typedef detached_t default_completion_token_type;          Types                                              Name                                                                        Description                                                                        executor_with_default                                                                        Adapts an executor to add the detached_t completion token as                    the default.                                            Member          Functions                                              Name                                                                        Description                                                                        as_default_on [static]                                                                        Function helper to adapt an I/O object to use detached_t as its                    default completion token type.                                                                        detached_t [constructor]                                                                        Constructor.                                            The detached_t          class is used to indicate that an asynchronous operation is detached. That          is, there is no completion handler waiting for the operation's result.          A detached_t          object may be passed as a handler to an asynchronous operation, typically          using the special value boost::asio::detached.          For example:        my_socket.async_send(my_buffer, boost::asio::detached);          Requirements                  Header: boost/asio/detached.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/detached_t__executor_with_default/default_completion_token_type.html
detached_t::executor_with_default::executor_with_defaultdetached_t::executor_with_default::executor_with_defaultHomeLibrariesPeopleFAQMoredetached_t::executor_with_default::executor_with_default           Construct          the adapted executor from the inner executor type.        executor_with_default(    const InnerExecutor &amp; ex);  » more...          Convert the specified executor to the inner executor type, then use that          to construct the adapted executor.        template&lt;    typename OtherExecutor&gt;executor_with_default(    const OtherExecutor &amp; ex,    typename constraint&lt; is_convertible&lt; OtherExecutor, InnerExecutor &gt;::value &gt;::type  = 0);  » more...Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/detached_t__executor_with_default/executor_with_default.html
detached_t::executor_with_default::executor_with_default (2 of 2 overloads)detached_t::executor_with_default::executor_with_default (2 of 2 overloads)HomeLibrariesPeopleFAQMoredetached_t::executor_with_default::executor_with_default          (2 of 2 overloads)            Convert the specified executor to the inner executor type, then use that            to construct the adapted executor.          template&lt;    typename OtherExecutor&gt;executor_with_default(    const OtherExecutor &amp; ex,    typename constraint&lt; is_convertible&lt; OtherExecutor, InnerExecutor &gt;::value &gt;::type  = 0);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/detached_t__executor_with_default/executor_with_default/overload2.html
detached_t::executor_with_default::executor_with_default (1 of 2 overloads)detached_t::executor_with_default::executor_with_default (1 of 2 overloads)HomeLibrariesPeopleFAQMoredetached_t::executor_with_default::executor_with_default          (1 of 2 overloads)            Construct the adapted executor from the inner executor type.          executor_with_default(    const InnerExecutor &amp; ex);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/detached_t__executor_with_default/executor_with_default/overload1.html
Write token requirementsWrite token requirementsHomeLibrariesPeopleFAQMoreWrite token requirements        A write token is a completion        token for completion signature void(error_code, size_t).              Examples              A free function as a write token:      void write_handler(    const boost::system::error_code&amp; ec,    std::size_t bytes_transferred){  ...}        A write token function object:      struct write_handler{  ...  void operator()(      const boost::system::error_code&amp; ec,      std::size_t bytes_transferred)  {    ...  }  ...};        A lambda as a write token:      socket.async_write_some(...,    [](const boost::system::error_code&amp; ec,      std::size_t bytes_transferred)    {      ...    });        A non-static class member function adapted to a write token using std::bind():      void my_class::write_handler(    const boost::system::error_code&amp; ec,    std::size_t bytes_transferred){  ...}...socket.async_write_some(...,    std::bind(&amp;my_class::write_handler,      this, std::placeholders::_1,      std::placeholders::_2));        A non-static class member function adapted to a write token using boost::bind():      void my_class::write_handler(    const boost::system::error_code&amp; ec,    std::size_t bytes_transferred){  ...}...socket.async_write_some(...,    boost::bind(&amp;my_class::write_handler,      this, boost::asio::placeholders::error,      boost::asio::placeholders::bytes_transferred));        Using use_future as        a write token:      std::future&lt;std::size_t&gt; f =  socket.async_write_some(..., boost::asio::use_future);...try{  std::size_t n = f.get();  ...}catch (const system_error&amp; e){  ...}        Using use_awaitable        as a write token:      boost::asio::awaitable&lt;void&gt; my_coroutine(){  try  {    ...    std::size_t n =      co_await socket.async_write_some(          ..., boost::asio::use_awaitable);    ...  }  catch (const system_error&amp; e)  {    ...  }}Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/WriteToken.html
Scheduler conceptScheduler conceptHomeLibrariesPeopleFAQMoreScheduler concepttemplate&lt;class S&gt;  concept scheduler =    copy_constructible&lt;remove_cvref_t&lt;S&gt;&gt; &amp;&amp;    equality_comparable&lt;remove_cvref_t&lt;S&gt;&gt; &amp;&amp;    requires(E&amp;&amp; e) {      execution::schedule((E&amp;&amp;)e);    };        None of a scheduler's copy constructor, destructor, equality comparison,        or swap operation shall exit        via an exception.              None of these operations, nor a scheduler type's schedule        function, or associated query functions shall introduce data races as a result        of concurrent invocations of those functions from different threads.              For any two (possibly const) values x1        and x2 of some scheduler        type X, x1        == x2        shall return true only if boost::asio::query(x1, p) == boost::asio::query(x2,        p)        for every property p where        both boost::asio::query(x1, p) and boost::asio::query(x2,        p)        are well-formed and result in a non-void type that is EqualityComparable        (C++Std [equalitycomparable]). [Note: The above requirements        imply that x1 ==        x2 returns true        if x1 and x2        can be interchanged with identical effects. A scheduler may conceptually        contain additional properties which are not exposed by a named property type        that can be observed via boost::asio::query;        in this case, it is up to the concrete scheduler implementation to decide        if these properties affect equality. Returning false        does not necessarily imply that the effects are not identical. —end        note]              A scheduler type's destructor shall not block pending completion of any receivers        submitted to the sender objects returned from schedule.        [Note: The ability to wait for completion of submitted        function objects may be provided by the execution context that produced the        scheduler. —end note]              In addition to the above requirements, type S        models scheduler only if        it satisfies the requirements in the Table below.              In the Table below,                  s denotes a (possibly            const) scheduler object of type S,                      N denotes a type that            models sender, and                      n denotes a sender object            of type N          Table 27. Scheduler requirements                                  expression                                                                return type                                                                operation semantics                                                                execution::schedule(s)                                                                N                                                                Evaluates execution::schedule(s) on the calling thread to create                  N.                                      execution::start(o), where        o is the result of a call        to execution::connect(N, r) for some receiver object r,        is required to eagerly submit r        for execution on an execution agent that s        creates for it. Let rc be        r or an object created by        copy or move construction from r.        The semantic constraints on the sender        N returned from a scheduler        s's schedule        function are as follows:                  If rc's set_error function is called in response            to a submission error, scheduling error, or other internal error, let            E be an expression that            refers to that error if set_error(rc, E) is well-formed; otherwise, let E be an exception_ptr            that refers to that error. [Note: E            could be the result of calling current_exception            or make_exception_ptr.]            The scheduler calls set_error(rc, E) on an unspecified weakly-parallel execution            agent ([Note: An invocation of set_error            on a receiver is required to be noexcept]),            and                      If rc's set_error function is called in response            to an exception that propagates out of the invocation of set_value on rc,            let E be make_exception_ptr(receiver_invocation_error{})            invoked from within a catch clause that has caught the exception. The            executor calls set_error(rc, E) on an unspecified weakly-parallel execution            agent, and                      A call to set_done(rc)            is made on an unspecified weakly-parallel execution agent ([Note: An            invocation of a receiver's set_done            function is required to be noexcept]).                  [Note: The senders returned from a scheduler's schedule function have wide discretion        when deciding which of the three receiver functions to call upon submission.        —end note]      Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/Scheduler.html
execution::executor_shapeexecution::executor_shapeHomeLibrariesPeopleFAQMoreexecution::executor_shape                      The execution::executor_shape trait detects the        type used by an executor to represent the shape of a bulk operation.      template&lt;    typename T&gt;struct executor_shape        Types                                        Name                                                                Description                                                                type                                                                T::shape_type if T::shape_type is valid, otherwise std::size_t.                                      Class template executor_shape        is a type trait with a nested type alias type        whose type is T::shape_type if T::shape_type        is valid, otherwise std::size_t.              Requirements              Header: boost/asio/execution/executor.hpp              Convenience header: boost/asio/execution.hpp      Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/execution__executor_shape.html
register_buffersregister_buffersHomeLibrariesPeopleFAQMoreregister_buffers                      Register buffers with an execution context.      template&lt;    typename Executor,    typename MutableBufferSequence&gt;buffer_registration&lt; MutableBufferSequence &gt; register_buffers(    const Executor &amp; ex,    const MutableBufferSequence &amp; buffer_sequence,    typename constraint&lt; is_executor&lt; Executor &gt;::value||execution::is_executor&lt; Executor &gt;::value &gt;::type  = 0);  » more...template&lt;    typename Executor,    typename MutableBufferSequence,    typename Allocator&gt;buffer_registration&lt; MutableBufferSequence, Allocator &gt; register_buffers(    const Executor &amp; ex,    const MutableBufferSequence &amp; buffer_sequence,    const Allocator &amp; alloc,    typename constraint&lt; is_executor&lt; Executor &gt;::value||execution::is_executor&lt; Executor &gt;::value &gt;::type  = 0);  » more...template&lt;    typename ExecutionContext,    typename MutableBufferSequence&gt;buffer_registration&lt; MutableBufferSequence &gt; register_buffers(    ExecutionContext &amp; ctx,    const MutableBufferSequence &amp; buffer_sequence,    typename constraint&lt; is_convertible&lt; ExecutionContext &amp;, execution_context &amp; &gt;::value &gt;::type  = 0);  » more...template&lt;    typename ExecutionContext,    typename MutableBufferSequence,    typename Allocator&gt;buffer_registration&lt; MutableBufferSequence, Allocator &gt; register_buffers(    ExecutionContext &amp; ctx,    const MutableBufferSequence &amp; buffer_sequence,    const Allocator &amp; alloc,    typename constraint&lt; is_convertible&lt; ExecutionContext &amp;, execution_context &amp; &gt;::value &gt;::type  = 0);  » more...        Requirements              Header: boost/asio/buffer_registration.hpp              Convenience header: boost/asio.hpp      Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/register_buffers.html
cancellation_slot_bindercancellation_slot_binderHomeLibrariesPeopleFAQMorecancellation_slot_binder                      A call wrapper type to bind a cancellation slot of type CancellationSlot        to an object of type T.      template&lt;    typename T,    typename CancellationSlot&gt;class cancellation_slot_binder        Types                                        Name                                                                Description                                                                argument_type                                                                The type of the function's argument.                                                                cancellation_slot_type                                                                The type of the associated cancellation slot.                                                                first_argument_type                                                                The type of the function's first argument.                                                                result_type                                                                The return type if a function.                                                                second_argument_type                                                                The type of the function's second argument.                                                                target_type                                                                The type of the target object.                                      Member        Functions                                        Name                                                                Description                                                                cancellation_slot_binder [constructor]                                                                Construct a cancellation slot wrapper for the specified object.                    — Copy constructor.   — Construct a copy,                  but specify a different cancellation slot.   — Construct                  a copy of a different cancellation slot wrapper type.   —                  Construct a copy of a different cancellation slot wrapper type,                  but specify a different cancellation slot.   — Move constructor.                    — Move construct the target object, but specify a different                  cancellation slot.   — Move construct from a different                  cancellation slot wrapper type.   — Move construct from                  a different cancellation slot wrapper type, but specify a different                  cancellation slot.                                                                get                                                                Obtain a reference to the target object.                                                                get_cancellation_slot                                                                Obtain the associated cancellation slot.                                                                operator()                                                                              ~cancellation_slot_binder [destructor]                                                                Destructor.                                      Requirements              Header: boost/asio/bind_cancellation_slot.hpp              Convenience header: boost/asio.hpp      Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/cancellation_slot_binder.html
experimental::is_promise_cexperimental::is_promise_cHomeLibrariesPeopleFAQMoreexperimental::is_promise_c              concept is_promise_c =is_promise_v&lt;std::remove_reference_t&lt;T&gt;&gt;;        Requirements              Header: boost/asio/experimental/promise.hpp              Convenience header: None      Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/experimental__is_promise_c.html
cancellation_filter::operator()cancellation_filter::operator()HomeLibrariesPeopleFAQMorecancellation_filter::operator()           Returns          type &amp;          Mask.        cancellation_type_t operator()(    cancellation_type_t type) const;Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/cancellation_filter/operator_lp__rp_.html
experimental::awaitable_operators::operator &amp;&amp; (5 of 6 overloads)experimental::awaitable_operators::operator &amp;&amp; (5 of 6 overloads)HomeLibrariesPeopleFAQMoreexperimental::awaitable_operators::operator        &amp;&amp; (5 of 6 overloads)          Wait for both operations to succeed.        template&lt;    typename... T,    typename Executor&gt;awaitable&lt; std::tuple&lt; T..., std::monostate &gt;, Executor &gt; operator &amp;&amp;(    awaitable&lt; std::tuple&lt; T...&gt;, Executor &gt; t,    awaitable&lt; void, Executor &gt; u);          If one operations fails, the other is cancelled as the AND-condition can          no longer be satisfied.        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/experimental__awaitable_operators__operator__amp__amp_/overload5.html
experimental::awaitable_operators::operator &amp;&amp; (2 of 6 overloads)experimental::awaitable_operators::operator &amp;&amp; (2 of 6 overloads)HomeLibrariesPeopleFAQMoreexperimental::awaitable_operators::operator        &amp;&amp; (2 of 6 overloads)          Wait for both operations to succeed.        template&lt;    typename U,    typename Executor&gt;awaitable&lt; U, Executor &gt; operator &amp;&amp;(    awaitable&lt; void, Executor &gt; t,    awaitable&lt; U, Executor &gt; u);          If one operations fails, the other is cancelled as the AND-condition can          no longer be satisfied.        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/experimental__awaitable_operators__operator__amp__amp_/overload2.html
experimental::awaitable_operators::operator &amp;&amp; (6 of 6 overloads)experimental::awaitable_operators::operator &amp;&amp; (6 of 6 overloads)HomeLibrariesPeopleFAQMoreexperimental::awaitable_operators::operator        &amp;&amp; (6 of 6 overloads)          Wait for both operations to succeed.        template&lt;    typename... T,    typename U,    typename Executor&gt;awaitable&lt; std::tuple&lt; T..., U &gt;, Executor &gt; operator &amp;&amp;(    awaitable&lt; std::tuple&lt; T...&gt;, Executor &gt; t,    awaitable&lt; U, Executor &gt; u);          If one operations fails, the other is cancelled as the AND-condition can          no longer be satisfied.        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/experimental__awaitable_operators__operator__amp__amp_/overload6.html
experimental::awaitable_operators::operator &amp;&amp; (3 of 6 overloads)experimental::awaitable_operators::operator &amp;&amp; (3 of 6 overloads)HomeLibrariesPeopleFAQMoreexperimental::awaitable_operators::operator        &amp;&amp; (3 of 6 overloads)          Wait for both operations to succeed.        template&lt;    typename T,    typename Executor&gt;awaitable&lt; T, Executor &gt; operator &amp;&amp;(    awaitable&lt; T, Executor &gt; t,    awaitable&lt; void, Executor &gt; u);          If one operations fails, the other is cancelled as the AND-condition can          no longer be satisfied.        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/experimental__awaitable_operators__operator__amp__amp_/overload3.html
experimental::awaitable_operators::operator &amp;&amp; (4 of 6 overloads)experimental::awaitable_operators::operator &amp;&amp; (4 of 6 overloads)HomeLibrariesPeopleFAQMoreexperimental::awaitable_operators::operator        &amp;&amp; (4 of 6 overloads)          Wait for both operations to succeed.        template&lt;    typename T,    typename U,    typename Executor&gt;awaitable&lt; std::tuple&lt; T, U &gt;, Executor &gt; operator &amp;&amp;(    awaitable&lt; T, Executor &gt; t,    awaitable&lt; U, Executor &gt; u);          If one operations fails, the other is cancelled as the AND-condition can          no longer be satisfied.        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/experimental__awaitable_operators__operator__amp__amp_/overload4.html
experimental::awaitable_operators::operator &amp;&amp; (1 of 6 overloads)experimental::awaitable_operators::operator &amp;&amp; (1 of 6 overloads)HomeLibrariesPeopleFAQMoreexperimental::awaitable_operators::operator        &amp;&amp; (1 of 6 overloads)          Wait for both operations to succeed.        template&lt;    typename Executor&gt;awaitable&lt; void, Executor &gt; operator &amp;&amp;(    awaitable&lt; void, Executor &gt; t,    awaitable&lt; void, Executor &gt; u);          If one operations fails, the other is cancelled as the AND-condition can          no longer be satisfied.        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/experimental__awaitable_operators__operator__amp__amp_/overload1.html
recycling_allocator::rebind::otherrecycling_allocator::rebind::otherHomeLibrariesPeopleFAQMorerecycling_allocator::rebind::other           The          rebound allocator type.        typedef recycling_allocator&lt; U &gt; other;          Types                                              Name                                                                        Description                                                                        rebind                                                                        Rebind the allocator to another value_type.                                                                        value_type                                                                        The type of object allocated by the recycling allocator.                                            Member          Functions                                              Name                                                                        Description                                                                        allocate                                                                        Allocate memory for the specified number of values.                                                                        deallocate                                                                        Deallocate memory for the specified number of values.                                                                        operator!=                                                                        Inequality operator. Always returns false.                                                                        operator==                                                                        Equality operator. Always returns true.                                                                        recycling_allocator [constructor]                                                                        Default constructor.   — Converting constructor.                                            The uses a simple strategy where a limited number of small memory blocks          are cached in thread-local storage, if the current thread is running an          io_context or is part of          a thread_pool.                  Requirements                  Header: boost/asio/recycling_allocator.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/recycling_allocator__rebind/other.html
ssl::verify_modessl::verify_modeHomeLibrariesPeopleFAQMoressl::verify_mode                      Bitmask type for peer verification.      typedef int verify_mode;        Possible values are:                  ssl::verify_none                      ssl::verify_peer                      ssl::verify_fail_if_no_peer_cert                      ssl::verify_client_once                  Requirements              Header: boost/asio/ssl/verify_mode.hpp              Convenience header: boost/asio/ssl.hpp      Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/ssl__verify_mode.html
basic_signal_set::basic_signal_set (5 of 8 overloads)basic_signal_set::basic_signal_set (5 of 8 overloads)HomeLibrariesPeopleFAQMorebasic_signal_set::basic_signal_set          (5 of 8 overloads)            Construct a signal set and add two signals.          basic_signal_set(    const executor_type &amp; ex,    int signal_number_1,    int signal_number_2);            This constructor creates a signal set and registers for two signals.                      Parameters          ex                  The I/O executor that the signal set will use, by default, to dispatch                  handlers for any asynchronous operations performed on the signal                  set.                signal_number_1                  The first signal number to be added.                signal_number_2                  The second signal number to be added.                            Remarks                      This constructor is equivalent to performing:          boost::asio::signal_set signals(ex);signals.add(signal_number_1);signals.add(signal_number_2);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_signal_set/basic_signal_set/overload5.html
basic_signal_set::basic_signal_set (2 of 8 overloads)basic_signal_set::basic_signal_set (2 of 8 overloads)HomeLibrariesPeopleFAQMorebasic_signal_set::basic_signal_set          (2 of 8 overloads)            Construct a signal set without adding any signals.          template&lt;    typename ExecutionContext&gt;basic_signal_set(    ExecutionContext &amp; context,    typename constraint&lt; is_convertible&lt; ExecutionContext &amp;, execution_context &amp; &gt;::value, defaulted_constraint &gt;::type  = defaulted_constraint());            This constructor creates a signal set without registering for any signals.                      Parameters          context                  An execution context which provides the I/O executor that the signal                  set will use, by default, to dispatch handlers for any asynchronous                  operations performed on the signal set.                Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_signal_set/basic_signal_set/overload2.html
basic_signal_set::basic_signal_set (6 of 8 overloads)basic_signal_set::basic_signal_set (6 of 8 overloads)HomeLibrariesPeopleFAQMorebasic_signal_set::basic_signal_set          (6 of 8 overloads)            Construct a signal set and add two signals.          template&lt;    typename ExecutionContext&gt;basic_signal_set(    ExecutionContext &amp; context,    int signal_number_1,    int signal_number_2,    typename constraint&lt; is_convertible&lt; ExecutionContext &amp;, execution_context &amp; &gt;::value, defaulted_constraint &gt;::type  = defaulted_constraint());            This constructor creates a signal set and registers for two signals.                      Parameters          context                  An execution context which provides the I/O executor that the signal                  set will use, by default, to dispatch handlers for any asynchronous                  operations performed on the signal set.                signal_number_1                  The first signal number to be added.                signal_number_2                  The second signal number to be added.                            Remarks                      This constructor is equivalent to performing:          boost::asio::signal_set signals(context);signals.add(signal_number_1);signals.add(signal_number_2);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_signal_set/basic_signal_set/overload6.html
basic_signal_set::basic_signal_set (3 of 8 overloads)basic_signal_set::basic_signal_set (3 of 8 overloads)HomeLibrariesPeopleFAQMorebasic_signal_set::basic_signal_set          (3 of 8 overloads)            Construct a signal set and add one signal.          basic_signal_set(    const executor_type &amp; ex,    int signal_number_1);            This constructor creates a signal set and registers for one signal.                      Parameters          ex                  The I/O executor that the signal set will use, by default, to dispatch                  handlers for any asynchronous operations performed on the signal                  set.                signal_number_1                  The signal number to be added.                            Remarks                      This constructor is equivalent to performing:          boost::asio::signal_set signals(ex);signals.add(signal_number_1);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_signal_set/basic_signal_set/overload3.html
basic_signal_set::basic_signal_set (4 of 8 overloads)basic_signal_set::basic_signal_set (4 of 8 overloads)HomeLibrariesPeopleFAQMorebasic_signal_set::basic_signal_set          (4 of 8 overloads)            Construct a signal set and add one signal.          template&lt;    typename ExecutionContext&gt;basic_signal_set(    ExecutionContext &amp; context,    int signal_number_1,    typename constraint&lt; is_convertible&lt; ExecutionContext &amp;, execution_context &amp; &gt;::value, defaulted_constraint &gt;::type  = defaulted_constraint());            This constructor creates a signal set and registers for one signal.                      Parameters          context                  An execution context which provides the I/O executor that the signal                  set will use, by default, to dispatch handlers for any asynchronous                  operations performed on the signal set.                signal_number_1                  The signal number to be added.                            Remarks                      This constructor is equivalent to performing:          boost::asio::signal_set signals(context);signals.add(signal_number_1);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_signal_set/basic_signal_set/overload4.html
basic_signal_set::basic_signal_set (8 of 8 overloads)basic_signal_set::basic_signal_set (8 of 8 overloads)HomeLibrariesPeopleFAQMorebasic_signal_set::basic_signal_set          (8 of 8 overloads)            Construct a signal set and add three signals.          template&lt;    typename ExecutionContext&gt;basic_signal_set(    ExecutionContext &amp; context,    int signal_number_1,    int signal_number_2,    int signal_number_3,    typename constraint&lt; is_convertible&lt; ExecutionContext &amp;, execution_context &amp; &gt;::value, defaulted_constraint &gt;::type  = defaulted_constraint());            This constructor creates a signal set and registers for three signals.                      Parameters          context                  An execution context which provides the I/O executor that the signal                  set will use, by default, to dispatch handlers for any asynchronous                  operations performed on the signal set.                signal_number_1                  The first signal number to be added.                signal_number_2                  The second signal number to be added.                signal_number_3                  The third signal number to be added.                            Remarks                      This constructor is equivalent to performing:          boost::asio::signal_set signals(context);signals.add(signal_number_1);signals.add(signal_number_2);signals.add(signal_number_3);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_signal_set/basic_signal_set/overload8.html
basic_signal_set::basic_signal_set (1 of 8 overloads)basic_signal_set::basic_signal_set (1 of 8 overloads)HomeLibrariesPeopleFAQMorebasic_signal_set::basic_signal_set          (1 of 8 overloads)            Construct a signal set without adding any signals.          basic_signal_set(    const executor_type &amp; ex);            This constructor creates a signal set without registering for any signals.                      Parameters          ex                  The I/O executor that the signal set will use, by default, to dispatch                  handlers for any asynchronous operations performed on the signal                  set.                Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_signal_set/basic_signal_set/overload1.html
basic_signal_set::basic_signal_set (7 of 8 overloads)basic_signal_set::basic_signal_set (7 of 8 overloads)HomeLibrariesPeopleFAQMorebasic_signal_set::basic_signal_set          (7 of 8 overloads)            Construct a signal set and add three signals.          basic_signal_set(    const executor_type &amp; ex,    int signal_number_1,    int signal_number_2,    int signal_number_3);            This constructor creates a signal set and registers for three signals.                      Parameters          ex                  The I/O executor that the signal set will use, by default, to dispatch                  handlers for any asynchronous operations performed on the signal                  set.                signal_number_1                  The first signal number to be added.                signal_number_2                  The second signal number to be added.                signal_number_3                  The third signal number to be added.                            Remarks                      This constructor is equivalent to performing:          boost::asio::signal_set signals(ex);signals.add(signal_number_1);signals.add(signal_number_2);signals.add(signal_number_3);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_signal_set/basic_signal_set/overload7.html
basic_signal_set::async_waitbasic_signal_set::async_waitHomeLibrariesPeopleFAQMorebasic_signal_set::async_wait           Start          an asynchronous operation to wait for a signal to be delivered.        template&lt;    typename SignalToken = DEFAULT&gt;DEDUCED async_wait(    SignalToken &amp;&amp; token = DEFAULT);          This function may be used to initiate an asynchronous wait against the          signal set. It is an initiating function for an asynchronous          operation, and always returns immediately.                  For each call to async_wait(), the completion handler will be called          exactly once. The completion handler will be called when:                      One of the registered signals in the signal set occurs; or                          The signal set was cancelled, in which case the handler is passed the              error code boost::asio::error::operation_aborted.                      Parameters        token                The completion                token that will be used to produce a completion handler, which                will be called when the wait completes. Potential completion tokens                include use_future, use_awaitable, yield_context, or a function                object with the correct completion signature. The function signature                of the completion handler must be:              void handler(  const boost::system::error_code&amp; error, // Result of operation.  int signal_number // Indicates which signal occurred.);                Regardless of whether the asynchronous operation completes immediately                or not, the completion handler will not be invoked from within this                function. On immediate completion, invocation of the handler will                be performed in a manner equivalent to using post.                        Completion          Signature        void(boost::system::error_code, int)          Per-Operation          Cancellation                  This asynchronous operation supports cancellation for the following cancellation_type          values:                      cancellation_type::terminal                          cancellation_type::partial                          cancellation_type::total            Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_signal_set/async_wait.html
basic_signal_set::clear (2 of 2 overloads)basic_signal_set::clear (2 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_signal_set::clear          (2 of 2 overloads)            Remove all signals from a signal_set.          void clear(    boost::system::error_code &amp; ec);            This function removes all signals from the set. It has no effect if the            set is already empty.                      Parameters          ec                  Set to indicate what error occurred, if any.                            Remarks                      Removes all queued notifications.          Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_signal_set/clear/overload2.html
basic_signal_set::clear (1 of 2 overloads)basic_signal_set::clear (1 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_signal_set::clear          (1 of 2 overloads)            Remove all signals from a signal_set.          void clear();            This function removes all signals from the set. It has no effect if the            set is already empty.                      Exceptions          boost::system::system_error                  Thrown on failure.                            Remarks                      Removes all queued notifications.          Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_signal_set/clear/overload1.html
basic_signal_set::cancel (2 of 2 overloads)basic_signal_set::cancel (2 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_signal_set::cancel          (2 of 2 overloads)            Cancel all operations associated with the signal set.          void cancel(    boost::system::error_code &amp; ec);            This function forces the completion of any pending asynchronous wait            operations against the signal set. The handler for each cancelled operation            will be invoked with the boost::asio::error::operation_aborted            error code.                      Cancellation does not alter the set of registered signals.                      Parameters          ec                  Set to indicate what error occurred, if any.                            Remarks                      If a registered signal occurred before cancel() is called, then the handlers for asynchronous            wait operations will:                          have already been invoked; or                              have been queued for invocation in the near future.                          These handlers can no longer be cancelled, and therefore are passed an            error code that indicates the successful completion of the wait operation.          Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_signal_set/cancel/overload2.html
basic_signal_set::cancel (1 of 2 overloads)basic_signal_set::cancel (1 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_signal_set::cancel          (1 of 2 overloads)            Cancel all operations associated with the signal set.          void cancel();            This function forces the completion of any pending asynchronous wait            operations against the signal set. The handler for each cancelled operation            will be invoked with the boost::asio::error::operation_aborted            error code.                      Cancellation does not alter the set of registered signals.                      Exceptions          boost::system::system_error                  Thrown on failure.                            Remarks                      If a registered signal occurred before cancel() is called, then the handlers for asynchronous            wait operations will:                          have already been invoked; or                              have been queued for invocation in the near future.                          These handlers can no longer be cancelled, and therefore are passed an            error code that indicates the successful completion of the wait operation.          Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_signal_set/cancel/overload1.html
basic_signal_set::~basic_signal_setbasic_signal_set::~basic_signal_setHomeLibrariesPeopleFAQMorebasic_signal_set::~basic_signal_set           Destroys          the signal set.        ~basic_signal_set();          This function destroys the signal set, cancelling any outstanding asynchronous          wait operations associated with the signal set as if by calling cancel.        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_signal_set/_basic_signal_set.html
basic_signal_set::executor_typebasic_signal_set::executor_typeHomeLibrariesPeopleFAQMorebasic_signal_set::executor_type           The          type of the executor associated with the object.        typedef Executor executor_type;          Requirements                  Header: boost/asio/basic_signal_set.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_signal_set/executor_type.html
basic_signal_set::basic_signal_setbasic_signal_set::basic_signal_setHomeLibrariesPeopleFAQMorebasic_signal_set::basic_signal_set           Construct          a signal set without adding any signals.        explicit basic_signal_set(    const executor_type &amp; ex);  » more...template&lt;    typename ExecutionContext&gt;explicit basic_signal_set(    ExecutionContext &amp; context,    typename constraint&lt; is_convertible&lt; ExecutionContext &amp;, execution_context &amp; &gt;::value, defaulted_constraint &gt;::type  = defaulted_constraint());  » more...          Construct a signal set and add one signal.        basic_signal_set(    const executor_type &amp; ex,    int signal_number_1);  » more...template&lt;    typename ExecutionContext&gt;basic_signal_set(    ExecutionContext &amp; context,    int signal_number_1,    typename constraint&lt; is_convertible&lt; ExecutionContext &amp;, execution_context &amp; &gt;::value, defaulted_constraint &gt;::type  = defaulted_constraint());  » more...          Construct a signal set and add two signals.        basic_signal_set(    const executor_type &amp; ex,    int signal_number_1,    int signal_number_2);  » more...template&lt;    typename ExecutionContext&gt;basic_signal_set(    ExecutionContext &amp; context,    int signal_number_1,    int signal_number_2,    typename constraint&lt; is_convertible&lt; ExecutionContext &amp;, execution_context &amp; &gt;::value, defaulted_constraint &gt;::type  = defaulted_constraint());  » more...          Construct a signal set and add three signals.        basic_signal_set(    const executor_type &amp; ex,    int signal_number_1,    int signal_number_2,    int signal_number_3);  » more...template&lt;    typename ExecutionContext&gt;basic_signal_set(    ExecutionContext &amp; context,    int signal_number_1,    int signal_number_2,    int signal_number_3,    typename constraint&lt; is_convertible&lt; ExecutionContext &amp;, execution_context &amp; &gt;::value, defaulted_constraint &gt;::type  = defaulted_constraint());  » more...Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_signal_set/basic_signal_set.html
basic_signal_set::removebasic_signal_set::removeHomeLibrariesPeopleFAQMorebasic_signal_set::remove           Remove          a signal from a signal_set.        void remove(    int signal_number);  » more...void remove(    int signal_number,    boost::system::error_code &amp; ec);  » more...Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_signal_set/remove.html
basic_signal_set::clearbasic_signal_set::clearHomeLibrariesPeopleFAQMorebasic_signal_set::clear           Remove          all signals from a signal_set.        void clear();  » more...void clear(    boost::system::error_code &amp; ec);  » more...Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_signal_set/clear.html
basic_signal_set::remove (2 of 2 overloads)basic_signal_set::remove (2 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_signal_set::remove          (2 of 2 overloads)            Remove a signal from a signal_set.          void remove(    int signal_number,    boost::system::error_code &amp; ec);            This function removes the specified signal from the set. It has no effect            if the signal is not in the set.                      Parameters          signal_number                  The signal to be removed from the set.                ec                  Set to indicate what error occurred, if any.                            Remarks                      Removes any notifications that have been queued for the specified signal            number.          Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_signal_set/remove/overload2.html
basic_signal_set::remove (1 of 2 overloads)basic_signal_set::remove (1 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_signal_set::remove          (1 of 2 overloads)            Remove a signal from a signal_set.          void remove(    int signal_number);            This function removes the specified signal from the set. It has no effect            if the signal is not in the set.                      Parameters          signal_number                  The signal to be removed from the set.                            Exceptions          boost::system::system_error                  Thrown on failure.                            Remarks                      Removes any notifications that have been queued for the specified signal            number.          Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_signal_set/remove/overload1.html
basic_signal_set::get_executorbasic_signal_set::get_executorHomeLibrariesPeopleFAQMorebasic_signal_set::get_executor           Get          the executor associated with the object.        executor_type get_executor();Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_signal_set/get_executor.html
basic_signal_set::addbasic_signal_set::addHomeLibrariesPeopleFAQMorebasic_signal_set::add           Add a signal          to a signal_set.        void add(    int signal_number);  » more...void add(    int signal_number,    boost::system::error_code &amp; ec);  » more...Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_signal_set/add.html
basic_signal_set::add (2 of 2 overloads)basic_signal_set::add (2 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_signal_set::add          (2 of 2 overloads)            Add a signal to a signal_set.          void add(    int signal_number,    boost::system::error_code &amp; ec);            This function adds the specified signal to the set. It has no effect            if the signal is already in the set.                      Parameters          signal_number                  The signal to be added to the set.                ec                  Set to indicate what error occurred, if any.                Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_signal_set/add/overload2.html
basic_signal_set::add (1 of 2 overloads)basic_signal_set::add (1 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_signal_set::add          (1 of 2 overloads)            Add a signal to a signal_set.          void add(    int signal_number);            This function adds the specified signal to the set. It has no effect            if the signal is already in the set.                      Parameters          signal_number                  The signal to be added to the set.                            Exceptions          boost::system::system_error                  Thrown on failure.                Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_signal_set/add/overload1.html
basic_signal_set::cancelbasic_signal_set::cancelHomeLibrariesPeopleFAQMorebasic_signal_set::cancel           Cancel          all operations associated with the signal set.        void cancel();  » more...void cancel(    boost::system::error_code &amp; ec);  » more...Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_signal_set/cancel.html
posix::basic_descriptor::rebind_executorposix::basic_descriptor::rebind_executorHomeLibrariesPeopleFAQMoreposix::basic_descriptor::rebind_executor                      Rebinds the descriptor type to another executor.      template&lt;    typename Executor1&gt;struct rebind_executor        Types                                        Name                                                                Description                                                                other                                                                The descriptor type when rebound to the specified executor.                                      Requirements              Header: boost/asio/posix/basic_descriptor.hpp              Convenience header: boost/asio.hpp      Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/posix__basic_descriptor__rebind_executor.html
boost::system::is_error_code_enum&lt; boost::asio::error::basic_errors &gt;::valueboost::system::is_error_code_enum&lt; boost::asio::error::basic_errors &gt;::valueHomeLibrariesPeopleFAQMoreboost::system::is_error_code_enum&lt;        boost::asio::error::basic_errors &gt;::value                  static const bool value = true;Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/is_error_code_enum_lt__basic_errors__gt_/value.html
serial_portserial_portHomeLibrariesPeopleFAQMoreserial_port                      Typedef for the typical usage of a serial port.      typedef basic_serial_port serial_port;        Types                                        Name                                                                Description                                                                rebind_executor                                                                Rebinds the serial port type to another executor.                                                                executor_type                                                                The type of the executor associated with the object.                                                                lowest_layer_type                                                                A basic_basic_serial_port is always the lowest layer.                                                                native_handle_type                                                                The native representation of a serial port.                                      Member        Functions                                        Name                                                                Description                                                                assign                                                                Assign an existing native serial port to the serial port.                                                                async_read_some                                                                Start an asynchronous read.                                                                async_write_some                                                                Start an asynchronous write.                                                                basic_serial_port [constructor]                                                                Construct a basic_serial_port without opening it.   —                  Construct and open a basic_serial_port.   — Construct                  a basic_serial_port on an existing native serial port.   —                   Move-construct a basic_serial_port from another.                                                                cancel                                                                Cancel all asynchronous operations associated with the serial port.                                                                close                                                                Close the serial port.                                                                get_executor                                                                Get the executor associated with the object.                                                                get_option                                                                Get an option from the serial port.                                                                is_open                                                                Determine whether the serial port is open.                                                                lowest_layer                                                                Get a reference to the lowest layer.   — Get a const                  reference to the lowest layer.                                                                native_handle                                                                Get the native serial port representation.                                                                open                                                                Open the serial port using the specified device name.                                                                operator=                                                                Move-assign a basic_serial_port from another.                                                                read_some                                                                Read some data from the serial port.                                                                send_break                                                                Send a break sequence to the serial port.                                                                set_option                                                                Set an option on the serial port.                                                                write_some                                                                Write some data to the serial port.                                                                ~basic_serial_port [destructor]                                                                Destroys the serial port.                                      The basic_serial_port class provides        a wrapper over serial port functionality.              Thread        Safety              Distinct objects: Safe.              Shared objects: Unsafe.              Requirements              Header: boost/asio/serial_port.hpp              Convenience header: boost/asio.hpp      Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/serial_port.html
io_context::service::get_io_contextio_context::service::get_io_contextHomeLibrariesPeopleFAQMoreio_context::service::get_io_context           Get          the io_context          object that owns the service.        boost::asio::io_context &amp; get_io_context();Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/io_context__service/get_io_context.html
io_context::service::serviceio_context::service::serviceHomeLibrariesPeopleFAQMoreio_context::service::service           Constructor.        service(    boost::asio::io_context &amp; owner);          Parameters        owner                The io_context object that owns                the service.              Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/io_context__service/service.html
io_context::service::~serviceio_context::service::~serviceHomeLibrariesPeopleFAQMoreio_context::service::~service           Destructor.        virtual ~service();Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/io_context__service/_service.html
basic_stream_file::close (2 of 2 overloads)basic_stream_file::close (2 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_stream_file::close          (2 of 2 overloads)            Inherited from basic_file.                      Close the file.          void close(    boost::system::error_code &amp; ec);            This function is used to close the file. Any asynchronous read or write            operations will be cancelled immediately, and will complete with the            boost::asio::error::operation_aborted error.                      Parameters          ec                  Set to indicate what error occurred, if any. Note that, even if                  the function indicates an error, the underlying descriptor is closed.                            Example          boost::asio::stream_file file(my_context);...boost::system::error_code ec;file.close(ec);if (ec){  // An error occurred.}Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/close/overload2.html
basic_stream_file::close (1 of 2 overloads)basic_stream_file::close (1 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_stream_file::close          (1 of 2 overloads)            Inherited from basic_file.                      Close the file.          void close();            This function is used to close the file. Any asynchronous read or write            operations will be cancelled immediately, and will complete with the            boost::asio::error::operation_aborted error.                      Exceptions          boost::system::system_error                  Thrown on failure. Note that, even if the function indicates an                  error, the underlying descriptor is closed.                Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/close/overload1.html
basic_stream_file::flagsbasic_stream_file::flagsHomeLibrariesPeopleFAQMorebasic_stream_file::flags          Inherited from file_base.                   A bitmask          type (C++ Std [lib.bitmask.types]).        typedef unspecified flags;          Requirements                  Header: boost/asio/basic_stream_file.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/flags.html
basic_stream_file::sync_allbasic_stream_file::sync_allHomeLibrariesPeopleFAQMorebasic_stream_file::sync_all           Synchronise          the file to disk.        void sync_all();  » more...void sync_all(    boost::system::error_code &amp; ec);  » more...Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/sync_all.html
basic_stream_file::basic_stream_file (5 of 10 overloads)basic_stream_file::basic_stream_file (5 of 10 overloads)HomeLibrariesPeopleFAQMorebasic_stream_file::basic_stream_file          (5 of 10 overloads)            Construct and open a basic_stream_file.          basic_stream_file(    const executor_type &amp; ex,    const std::string &amp; path,    file_base::flags open_flags);            This constructor initialises and opens a file.                      Parameters          ex                  The I/O executor that the file will use, by default, to dispatch                  handlers for any asynchronous operations performed on the file.                path                  The path name identifying the file to be opened.                open_flags                  A set of flags that determine how the file should be opened.                            Exceptions          boost::system::system_error                  Thrown on failure.                Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/basic_stream_file/overload5.html
basic_stream_file::basic_stream_file (2 of 10 overloads)basic_stream_file::basic_stream_file (2 of 10 overloads)HomeLibrariesPeopleFAQMorebasic_stream_file::basic_stream_file          (2 of 10 overloads)            Construct a basic_stream_file without opening            it.          template&lt;    typename ExecutionContext&gt;basic_stream_file(    ExecutionContext &amp; context,    typename constraint&lt; is_convertible&lt; ExecutionContext &amp;, execution_context &amp; &gt;::value, defaulted_constraint &gt;::type  = defaulted_constraint());            This constructor initialises a file without opening it. The file needs            to be opened before data can be read from or or written to it.                      Parameters          context                  An execution context which provides the I/O executor that the file                  will use, by default, to dispatch handlers for any asynchronous                  operations performed on the file.                Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/basic_stream_file/overload2.html
basic_stream_file::basic_stream_file (6 of 10 overloads)basic_stream_file::basic_stream_file (6 of 10 overloads)HomeLibrariesPeopleFAQMorebasic_stream_file::basic_stream_file          (6 of 10 overloads)            Construct and open a basic_stream_file.          template&lt;    typename ExecutionContext&gt;basic_stream_file(    ExecutionContext &amp; context,    const std::string &amp; path,    file_base::flags open_flags,    typename constraint&lt; is_convertible&lt; ExecutionContext &amp;, execution_context &amp; &gt;::value, defaulted_constraint &gt;::type  = defaulted_constraint());            This constructor initialises and opens a file.                      Parameters          context                  An execution context which provides the I/O executor that the file                  will use, by default, to dispatch handlers for any asynchronous                  operations performed on the file.                path                  The path name identifying the file to be opened.                open_flags                  A set of flags that determine how the file should be opened.                            Exceptions          boost::system::system_error                  Thrown on failure.                Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/basic_stream_file/overload6.html
basic_stream_file::basic_stream_file (10 of 10 overloads)basic_stream_file::basic_stream_file (10 of 10 overloads)HomeLibrariesPeopleFAQMorebasic_stream_file::basic_stream_file          (10 of 10 overloads)            Move-construct a basic_stream_file from a file            of another executor type.          template&lt;    typename Executor1&gt;basic_stream_file(    basic_stream_file&lt; Executor1 &gt; &amp;&amp; other,    typename constraint&lt; is_convertible&lt; Executor1, Executor &gt;::value, defaulted_constraint &gt;::type  = defaulted_constraint());            This constructor moves a stream file from one object to another.                      Parameters          other                  The other basic_stream_file object                  from which the move will occur.                            Remarks                      Following the move, the moved-from object is in the same state as if            constructed using the basic_stream_file(const executor_type&amp;)            constructor.          Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/basic_stream_file/overload10.html
basic_stream_file::basic_stream_file (3 of 10 overloads)basic_stream_file::basic_stream_file (3 of 10 overloads)HomeLibrariesPeopleFAQMorebasic_stream_file::basic_stream_file          (3 of 10 overloads)            Construct and open a basic_stream_file.          basic_stream_file(    const executor_type &amp; ex,    const char * path,    file_base::flags open_flags);            This constructor initialises and opens a file.                      Parameters          ex                  The I/O executor that the file will use, by default, to dispatch                  handlers for any asynchronous operations performed on the file.                path                  The path name identifying the file to be opened.                open_flags                  A set of flags that determine how the file should be opened.                            Exceptions          boost::system::system_error                  Thrown on failure.                Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/basic_stream_file/overload3.html
basic_stream_file::basic_stream_file (4 of 10 overloads)basic_stream_file::basic_stream_file (4 of 10 overloads)HomeLibrariesPeopleFAQMorebasic_stream_file::basic_stream_file          (4 of 10 overloads)            Construct and open a basic_stream_file.          template&lt;    typename ExecutionContext&gt;basic_stream_file(    ExecutionContext &amp; context,    const char * path,    file_base::flags open_flags,    typename constraint&lt; is_convertible&lt; ExecutionContext &amp;, execution_context &amp; &gt;::value, defaulted_constraint &gt;::type  = defaulted_constraint());            This constructor initialises and opens a file.                      Parameters          context                  An execution context which provides the I/O executor that the file                  will use, by default, to dispatch handlers for any asynchronous                  operations performed on the file.                path                  The path name identifying the file to be opened.                open_flags                  A set of flags that determine how the file should be opened.                            Exceptions          boost::system::system_error                  Thrown on failure.                Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/basic_stream_file/overload4.html
basic_stream_file::basic_stream_file (8 of 10 overloads)basic_stream_file::basic_stream_file (8 of 10 overloads)HomeLibrariesPeopleFAQMorebasic_stream_file::basic_stream_file          (8 of 10 overloads)            Construct a basic_stream_file on an existing            native file.          template&lt;    typename ExecutionContext&gt;basic_stream_file(    ExecutionContext &amp; context,    const native_handle_type &amp; native_file,    typename constraint&lt; is_convertible&lt; ExecutionContext &amp;, execution_context &amp; &gt;::value, defaulted_constraint &gt;::type  = defaulted_constraint());            This constructor initialises a stream file object to hold an existing            native file.                      Parameters          context                  An execution context which provides the I/O executor that the file                  will use, by default, to dispatch handlers for any asynchronous                  operations performed on the file.                native_file                  The new underlying file implementation.                            Exceptions          boost::system::system_error                  Thrown on failure.                Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/basic_stream_file/overload8.html
basic_stream_file::basic_stream_file (1 of 10 overloads)basic_stream_file::basic_stream_file (1 of 10 overloads)HomeLibrariesPeopleFAQMorebasic_stream_file::basic_stream_file          (1 of 10 overloads)            Construct a basic_stream_file without opening            it.          basic_stream_file(    const executor_type &amp; ex);            This constructor initialises a file without opening it. The file needs            to be opened before data can be read from or or written to it.                      Parameters          ex                  The I/O executor that the file will use, by default, to dispatch                  handlers for any asynchronous operations performed on the file.                Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/basic_stream_file/overload1.html
basic_stream_file::basic_stream_file (7 of 10 overloads)basic_stream_file::basic_stream_file (7 of 10 overloads)HomeLibrariesPeopleFAQMorebasic_stream_file::basic_stream_file          (7 of 10 overloads)            Construct a basic_stream_file on an existing            native file.          basic_stream_file(    const executor_type &amp; ex,    const native_handle_type &amp; native_file);            This constructor initialises a stream file object to hold an existing            native file.                      Parameters          ex                  The I/O executor that the file will use, by default, to dispatch                  handlers for any asynchronous operations performed on the file.                native_file                  The new underlying file implementation.                            Exceptions          boost::system::system_error                  Thrown on failure.                Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/basic_stream_file/overload7.html
basic_stream_file::basic_stream_file (9 of 10 overloads)basic_stream_file::basic_stream_file (9 of 10 overloads)HomeLibrariesPeopleFAQMorebasic_stream_file::basic_stream_file          (9 of 10 overloads)            Move-construct a basic_stream_file from another.          basic_stream_file(    basic_stream_file &amp;&amp; other);            This constructor moves a stream file from one object to another.                      Parameters          other                  The other basic_stream_file object                  from which the move will occur.                            Remarks                      Following the move, the moved-from object is in the same state as if            constructed using the basic_stream_file(const executor_type&amp;)            constructor.          Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/basic_stream_file/overload9.html
basic_stream_file::sync_data (2 of 2 overloads)basic_stream_file::sync_data (2 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_stream_file::sync_data          (2 of 2 overloads)            Inherited from basic_file.                      Synchronise the file data to disk.          void sync_data(    boost::system::error_code &amp; ec);            This function synchronises the file data to disk. Note that the semantics            of this synchronisation vary between operation systems.                      Parameters          ec                  Set to indicate what error occurred, if any.                Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/sync_data/overload2.html
basic_stream_file::sync_data (1 of 2 overloads)basic_stream_file::sync_data (1 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_stream_file::sync_data          (1 of 2 overloads)            Inherited from basic_file.                      Synchronise the file data to disk.          void sync_data();            This function synchronises the file data to disk. Note that the semantics            of this synchronisation vary between operation systems.                      Exceptions          boost::system::system_error                  Thrown on failure.                Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/sync_data/overload1.html
basic_stream_file::native_handlebasic_stream_file::native_handleHomeLibrariesPeopleFAQMorebasic_stream_file::native_handle          Inherited from basic_file.                   Get          the native file representation.        native_handle_type native_handle();          This function may be used to obtain the underlying representation of the          file. This is intended to allow access to native file functionality that          is not otherwise provided.        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/native_handle.html
basic_stream_file::seekbasic_stream_file::seekHomeLibrariesPeopleFAQMorebasic_stream_file::seek           Seek to          a position in the file.        uint64_t seek(    int64_t offset,    file_base::seek_basis whence);  » more...uint64_t seek(    int64_t offset,    file_base::seek_basis whence,    boost::system::error_code &amp; ec);  » more...Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/seek.html
basic_stream_file::write_some (2 of 2 overloads)basic_stream_file::write_some (2 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_stream_file::write_some          (2 of 2 overloads)            Write some data to the file.          template&lt;    typename ConstBufferSequence&gt;std::size_t write_some(    const ConstBufferSequence &amp; buffers,    boost::system::error_code &amp; ec);            This function is used to write data to the stream file. The function            call will block until one or more bytes of the data has been written            successfully, or until an error occurs.                      Parameters          buffers                  One or more data buffers to be written to the file.                ec                  Set to indicate what error occurred, if any.                            Return            Value                      The number of bytes written. Returns 0 if an error occurred.                      Remarks                      The write_some operation may not transmit all of the data to the peer.            Consider using the write function if you need to            ensure that all data is written before the blocking operation completes.          Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/write_some/overload2.html
basic_stream_file::write_some (1 of 2 overloads)basic_stream_file::write_some (1 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_stream_file::write_some          (1 of 2 overloads)            Write some data to the file.          template&lt;    typename ConstBufferSequence&gt;std::size_t write_some(    const ConstBufferSequence &amp; buffers);            This function is used to write data to the stream file. The function            call will block until one or more bytes of the data has been written            successfully, or until an error occurs.                      Parameters          buffers                  One or more data buffers to be written to the file.                            Return            Value                      The number of bytes written.                      Exceptions          boost::system::system_error                  Thrown on failure. An error code of boost::asio::error::eof                  indicates that the end of the file was reached.                            Remarks                      The write_some operation may not transmit all of the data to the peer.            Consider using the write function if you need to            ensure that all data is written before the blocking operation completes.                      Example                      To write a single data buffer use the buffer function as follows:          file.write_some(boost::asio::buffer(data, size));            See the buffer            documentation for information on writing multiple buffers in one go,            and how to use it with arrays, boost::array or std::vector.          Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/write_some/overload1.html
basic_stream_file::release (2 of 2 overloads)basic_stream_file::release (2 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_stream_file::release          (2 of 2 overloads)            Inherited from basic_file.                      Release ownership of the underlying native file.          native_handle_type release(    boost::system::error_code &amp; ec);            This function causes all outstanding asynchronous read and write operations            to finish immediately, and the handlers for cancelled operations will            be passed the boost::asio::error::operation_aborted error. Ownership            of the native file is then transferred to the caller.                      Parameters          ec                  Set to indicate what error occurred, if any.                            Remarks                      This function is unsupported on Windows versions prior to Windows 8.1,            and will fail with boost::asio::error::operation_not_supported            on these platforms.          Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/release/overload2.html
basic_stream_file::release (1 of 2 overloads)basic_stream_file::release (1 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_stream_file::release          (1 of 2 overloads)            Inherited from basic_file.                      Release ownership of the underlying native file.          native_handle_type release();            This function causes all outstanding asynchronous read and write operations            to finish immediately, and the handlers for cancelled operations will            be passed the boost::asio::error::operation_aborted error. Ownership            of the native file is then transferred to the caller.                      Exceptions          boost::system::system_error                  Thrown on failure.                            Remarks                      This function is unsupported on Windows versions prior to Windows 8.1,            and will fail with boost::asio::error::operation_not_supported            on these platforms.          Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/release/overload1.html
basic_stream_file::async_read_somebasic_stream_file::async_read_someHomeLibrariesPeopleFAQMorebasic_stream_file::async_read_some           Start          an asynchronous read.        template&lt;    typename MutableBufferSequence,    typename ReadToken = DEFAULT&gt;DEDUCED async_read_some(    const MutableBufferSequence &amp; buffers,    ReadToken &amp;&amp; token = DEFAULT);          This function is used to asynchronously read data from the stream file.          It is an initiating function for an asynchronous          operation, and always returns immediately.                  Parameters        buffers                One or more buffers into which the data will be read. Although the                buffers object may be copied as necessary, ownership of the underlying                memory blocks is retained by the caller, which must guarantee that                they remain valid until the completion handler is called.              token                The completion                token that will be used to produce a completion handler, which                will be called when the read completes. Potential completion tokens                include use_future, use_awaitable, yield_context, or a function                object with the correct completion signature. The function signature                of the completion handler must be:              void handler(  const boost::system::error_code&amp; error, // Result of operation.  std::size_t bytes_transferred // Number of bytes read.);                Regardless of whether the asynchronous operation completes immediately                or not, the completion handler will not be invoked from within this                function. On immediate completion, invocation of the handler will                be performed in a manner equivalent to using post.                        Completion          Signature        void(boost::system::error_code, std::size_t)          Remarks                  The read operation may not read all of the requested number of bytes. Consider          using the async_read function if you need          to ensure that the requested amount of data is read before the asynchronous          operation completes.                  Example                  To read into a single data buffer use the buffer function as follows:        file.async_read_some(boost::asio::buffer(data, size), handler);          See the buffer          documentation for information on reading into multiple buffers in one go,          and how to use it with arrays, boost::array or std::vector.                  Per-Operation          Cancellation                  On POSIX or Windows operating systems, this asynchronous operation supports          cancellation for the following cancellation_type values:                      cancellation_type::terminal                          cancellation_type::partial                          cancellation_type::total            Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/async_read_some.html
basic_stream_file::cancel (2 of 2 overloads)basic_stream_file::cancel (2 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_stream_file::cancel          (2 of 2 overloads)            Inherited from basic_file.                      Cancel all asynchronous operations associated with the file.          void cancel(    boost::system::error_code &amp; ec);            This function causes all outstanding asynchronous read and write operations            to finish immediately, and the handlers for cancelled operations will            be passed the boost::asio::error::operation_aborted error.                      Parameters          ec                  Set to indicate what error occurred, if any.                            Remarks                      Calls to cancel()            will always fail with boost::asio::error::operation_not_supported            when run on Windows XP, Windows Server 2003, and earlier versions of            Windows, unless BOOST_ASIO_ENABLE_CANCELIO is defined. However, the CancelIo            function has two issues that should be considered before enabling its            use:                          It will only cancel asynchronous operations that were initiated in                the current thread.                              It can appear to complete without error, but the request to cancel                the unfinished operations may be silently ignored by the operating                system. Whether it works or not seems to depend on the drivers that                are installed.                          For portable cancellation, consider using the close() function to simultaneously cancel the            outstanding operations and close the file.                      When running on Windows Vista, Windows Server 2008, and later, the CancelIoEx            function is always used. This function does not have the problems described            above.          Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/cancel/overload2.html
basic_stream_file::cancel (1 of 2 overloads)basic_stream_file::cancel (1 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_stream_file::cancel          (1 of 2 overloads)            Inherited from basic_file.                      Cancel all asynchronous operations associated with the file.          void cancel();            This function causes all outstanding asynchronous read and write operations            to finish immediately, and the handlers for cancelled operations will            be passed the boost::asio::error::operation_aborted error.                      Exceptions          boost::system::system_error                  Thrown on failure.                            Remarks                      Calls to cancel()            will always fail with boost::asio::error::operation_not_supported            when run on Windows XP, Windows Server 2003, and earlier versions of            Windows, unless BOOST_ASIO_ENABLE_CANCELIO is defined. However, the CancelIo            function has two issues that should be considered before enabling its            use:                          It will only cancel asynchronous operations that were initiated in                the current thread.                              It can appear to complete without error, but the request to cancel                the unfinished operations may be silently ignored by the operating                system. Whether it works or not seems to depend on the drivers that                are installed.                          For portable cancellation, consider using the close() function to simultaneously cancel the            outstanding operations and close the file.                      When running on Windows Vista, Windows Server 2008, and later, the CancelIoEx            function is always used. This function does not have the problems described            above.          Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/cancel/overload1.html
basic_stream_file::seek (2 of 2 overloads)basic_stream_file::seek (2 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_stream_file::seek          (2 of 2 overloads)            Seek to a position in the file.          uint64_t seek(    int64_t offset,    file_base::seek_basis whence,    boost::system::error_code &amp; ec);            This function updates the current position in the file.                      Parameters          offset                  The requested position in the file, relative to whence.                whence                  One of seek_set,                  seek_cur or seek_end.                ec                  Set to indicate what error occurred, if any.                            Return            Value                      The new position relative to the beginning of the file.          Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/seek/overload2.html
basic_stream_file::seek (1 of 2 overloads)basic_stream_file::seek (1 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_stream_file::seek          (1 of 2 overloads)            Seek to a position in the file.          uint64_t seek(    int64_t offset,    file_base::seek_basis whence);            This function updates the current position in the file.                      Parameters          offset                  The requested position in the file, relative to whence.                whence                  One of seek_set,                  seek_cur or seek_end.                            Return            Value                      The new position relative to the beginning of the file.                      Exceptions          boost::system::system_error                  Thrown on failure.                Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/seek/overload1.html
basic_stream_file::is_openbasic_stream_file::is_openHomeLibrariesPeopleFAQMorebasic_stream_file::is_open          Inherited from basic_file.                   Determine          whether the file is open.        bool is_open() const;Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/is_open.html
basic_stream_file::executor_typebasic_stream_file::executor_typeHomeLibrariesPeopleFAQMorebasic_stream_file::executor_type           The          type of the executor associated with the object.        typedef Executor executor_type;          Requirements                  Header: boost/asio/basic_stream_file.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/executor_type.html
basic_stream_file::assign (2 of 2 overloads)basic_stream_file::assign (2 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_stream_file::assign          (2 of 2 overloads)            Inherited from basic_file.                      Assign an existing native file to the file.          void assign(    const native_handle_type &amp; native_file,    boost::system::error_code &amp; ec);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/assign/overload2.html
basic_stream_file::assign (1 of 2 overloads)basic_stream_file::assign (1 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_stream_file::assign          (1 of 2 overloads)            Inherited from basic_file.                      Assign an existing native file to the file.          void assign(    const native_handle_type &amp; native_file);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/assign/overload1.html
basic_stream_file::resizebasic_stream_file::resizeHomeLibrariesPeopleFAQMorebasic_stream_file::resize           Alter          the size of the file.        void resize(    uint64_t n);  » more...void resize(    uint64_t n,    boost::system::error_code &amp; ec);  » more...Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/resize.html
basic_stream_file::sync_all_on_writebasic_stream_file::sync_all_on_writeHomeLibrariesPeopleFAQMorebasic_stream_file::sync_all_on_write          Inherited from file_base.                   Open          the file so that write operations automatically synchronise the file data          and metadata to disk.        static const flags sync_all_on_write = implementation_defined;Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/sync_all_on_write.html
basic_stream_file::read_somebasic_stream_file::read_someHomeLibrariesPeopleFAQMorebasic_stream_file::read_some           Read          some data from the file.        template&lt;    typename MutableBufferSequence&gt;std::size_t read_some(    const MutableBufferSequence &amp; buffers);  » more...template&lt;    typename MutableBufferSequence&gt;std::size_t read_some(    const MutableBufferSequence &amp; buffers,    boost::system::error_code &amp; ec);  » more...Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/read_some.html
basic_stream_file::sizebasic_stream_file::sizeHomeLibrariesPeopleFAQMorebasic_stream_file::size           Get the          size of the file.        uint64_t size() const;  » more...uint64_t size(    boost::system::error_code &amp; ec) const;  » more...Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/size.html
basic_stream_file::native_handle_typebasic_stream_file::native_handle_typeHomeLibrariesPeopleFAQMorebasic_stream_file::native_handle_type           The          native representation of a file.        typedef implementation_defined native_handle_type;          Requirements                  Header: boost/asio/basic_stream_file.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/native_handle_type.html
basic_stream_file::read_some (2 of 2 overloads)basic_stream_file::read_some (2 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_stream_file::read_some          (2 of 2 overloads)            Read some data from the file.          template&lt;    typename MutableBufferSequence&gt;std::size_t read_some(    const MutableBufferSequence &amp; buffers,    boost::system::error_code &amp; ec);            This function is used to read data from the stream file. The function            call will block until one or more bytes of data has been read successfully,            or until an error occurs.                      Parameters          buffers                  One or more buffers into which the data will be read.                ec                  Set to indicate what error occurred, if any.                            Return            Value                      The number of bytes read. Returns 0 if an error occurred.                      Remarks                      The read_some operation may not read all of the requested number of bytes.            Consider using the read function if you need to            ensure that the requested amount of data is read before the blocking            operation completes.          Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/read_some/overload2.html
basic_stream_file::read_some (1 of 2 overloads)basic_stream_file::read_some (1 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_stream_file::read_some          (1 of 2 overloads)            Read some data from the file.          template&lt;    typename MutableBufferSequence&gt;std::size_t read_some(    const MutableBufferSequence &amp; buffers);            This function is used to read data from the stream file. The function            call will block until one or more bytes of data has been read successfully,            or until an error occurs.                      Parameters          buffers                  One or more buffers into which the data will be read.                            Return            Value                      The number of bytes read.                      Exceptions          boost::system::system_error                  Thrown on failure. An error code of boost::asio::error::eof                  indicates that the end of the file was reached.                            Remarks                      The read_some operation may not read all of the requested number of bytes.            Consider using the read function if you need to            ensure that the requested amount of data is read before the blocking            operation completes.                      Example                      To read into a single data buffer use the buffer function as follows:          file.read_some(boost::asio::buffer(data, size));            See the buffer            documentation for information on reading into multiple buffers in one            go, and how to use it with arrays, boost::array or std::vector.          Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/read_some/overload1.html
basic_stream_file::~basic_stream_filebasic_stream_file::~basic_stream_fileHomeLibrariesPeopleFAQMorebasic_stream_file::~basic_stream_file           Destroys          the file.        ~basic_stream_file();          This function destroys the file, cancelling any outstanding asynchronous          operations associated with the file as if by calling cancel.        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/_basic_stream_file.html
basic_stream_file::seek_basisbasic_stream_file::seek_basisHomeLibrariesPeopleFAQMorebasic_stream_file::seek_basis          Inherited from file_base.                   Basis          for seeking in a file.        enum seek_basis                              Values        seek_set                Seek to an absolute position.              seek_cur                Seek to an offset relative to the current file position.              seek_end                Seek to an offset relative to the end of the file.              Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/seek_basis.html
basic_stream_file::truncatebasic_stream_file::truncateHomeLibrariesPeopleFAQMorebasic_stream_file::truncate          Inherited from file_base.                   Open          the file with any existing contents truncated.        static const flags truncate = implementation_defined;Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/truncate.html
basic_stream_file::operator= (2 of 2 overloads)basic_stream_file::operator= (2 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_stream_file::operator=          (2 of 2 overloads)            Move-assign a basic_stream_file from a file            of another executor type.          template&lt;    typename Executor1&gt;constraint&lt; is_convertible&lt; Executor1, Executor &gt;::value, basic_stream_file &amp; &gt;::type operator=(    basic_stream_file&lt; Executor1 &gt; &amp;&amp; other);            This assignment operator moves a stream file from one object to another.                      Parameters          other                  The other basic_stream_file object                  from which the move will occur.                            Remarks                      Following the move, the moved-from object is in the same state as if            constructed using the basic_stream_file(const executor_type&amp;)            constructor.          Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/operator_eq_/overload2.html
basic_stream_file::operator= (1 of 2 overloads)basic_stream_file::operator= (1 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_stream_file::operator=          (1 of 2 overloads)            Move-assign a basic_stream_file from another.          basic_stream_file &amp; operator=(    basic_stream_file &amp;&amp; other);            This assignment operator moves a stream file from one object to another.                      Parameters          other                  The other basic_stream_file object                  from which the move will occur.                            Remarks                      Following the move, the moved-from object is in the same state as if            constructed using the basic_stream_file(const executor_type&amp;)            constructor.          Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/operator_eq_/overload1.html
basic_stream_file::assignbasic_stream_file::assignHomeLibrariesPeopleFAQMorebasic_stream_file::assign           Assign          an existing native file to the file.        void assign(    const native_handle_type &amp; native_file);  » more...void assign(    const native_handle_type &amp; native_file,    boost::system::error_code &amp; ec);  » more...Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/assign.html
basic_stream_file::read_onlybasic_stream_file::read_onlyHomeLibrariesPeopleFAQMorebasic_stream_file::read_only          Inherited from file_base.                   Open          the file for reading.        static const flags read_only = implementation_defined;Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/read_only.html
basic_stream_file::createbasic_stream_file::createHomeLibrariesPeopleFAQMorebasic_stream_file::create          Inherited from file_base.                   Create          the file if it does not exist.        static const flags create = implementation_defined;Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/create.html
basic_stream_file::releasebasic_stream_file::releaseHomeLibrariesPeopleFAQMorebasic_stream_file::release           Release          ownership of the underlying native file.        native_handle_type release();  » more...native_handle_type release(    boost::system::error_code &amp; ec);  » more...Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/release.html
basic_stream_file::async_write_somebasic_stream_file::async_write_someHomeLibrariesPeopleFAQMorebasic_stream_file::async_write_some           Start          an asynchronous write.        template&lt;    typename ConstBufferSequence,    typename WriteToken = DEFAULT&gt;DEDUCED async_write_some(    const ConstBufferSequence &amp; buffers,    WriteToken &amp;&amp; token = DEFAULT);          This function is used to asynchronously write data to the stream file.          It is an initiating function for an asynchronous          operation, and always returns immediately.                  Parameters        buffers                One or more data buffers to be written to the file. Although the                buffers object may be copied as necessary, ownership of the underlying                memory blocks is retained by the caller, which must guarantee that                they remain valid until the completion handler is called.              token                The completion                token that will be used to produce a completion handler, which                will be called when the write completes. Potential completion tokens                include use_future, use_awaitable, yield_context, or a function                object with the correct completion signature. The function signature                of the completion handler must be:              void handler(  const boost::system::error_code&amp; error, // Result of operation.  std::size_t bytes_transferred // Number of bytes written.);                Regardless of whether the asynchronous operation completes immediately                or not, the completion handler will not be invoked from within this                function. On immediate completion, invocation of the handler will                be performed in a manner equivalent to using post.                        Completion          Signature        void(boost::system::error_code, std::size_t)          Remarks                  The write operation may not transmit all of the data to the peer. Consider          using the async_write function if you need          to ensure that all data is written before the asynchronous operation completes.                  Example                  To write a single data buffer use the buffer function as follows:        file.async_write_some(boost::asio::buffer(data, size), handler);          See the buffer          documentation for information on writing multiple buffers in one go, and          how to use it with arrays, boost::array or std::vector.                  Per-Operation          Cancellation                  On POSIX or Windows operating systems, this asynchronous operation supports          cancellation for the following cancellation_type values:                      cancellation_type::terminal                          cancellation_type::partial                          cancellation_type::total            Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/async_write_some.html
basic_stream_file::appendbasic_stream_file::appendHomeLibrariesPeopleFAQMorebasic_stream_file::append          Inherited from file_base.                   Open          the file in append mode.        static const flags append = implementation_defined;Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/append.html
basic_stream_file::sync_all (2 of 2 overloads)basic_stream_file::sync_all (2 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_stream_file::sync_all          (2 of 2 overloads)            Inherited from basic_file.                      Synchronise the file to disk.          void sync_all(    boost::system::error_code &amp; ec);            This function synchronises the file data and metadata to disk. Note that            the semantics of this synchronisation vary between operation systems.                      Parameters          ec                  Set to indicate what error occurred, if any.                Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/sync_all/overload2.html
basic_stream_file::sync_all (1 of 2 overloads)basic_stream_file::sync_all (1 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_stream_file::sync_all          (1 of 2 overloads)            Inherited from basic_file.                      Synchronise the file to disk.          void sync_all();            This function synchronises the file data and metadata to disk. Note that            the semantics of this synchronisation vary between operation systems.                      Exceptions          boost::system::system_error                  Thrown on failure.                Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/sync_all/overload1.html
basic_stream_file::write_somebasic_stream_file::write_someHomeLibrariesPeopleFAQMorebasic_stream_file::write_some           Write          some data to the file.        template&lt;    typename ConstBufferSequence&gt;std::size_t write_some(    const ConstBufferSequence &amp; buffers);  » more...template&lt;    typename ConstBufferSequence&gt;std::size_t write_some(    const ConstBufferSequence &amp; buffers,    boost::system::error_code &amp; ec);  » more...Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/write_some.html
basic_stream_file::sync_databasic_stream_file::sync_dataHomeLibrariesPeopleFAQMorebasic_stream_file::sync_data           Synchronise          the file data to disk.        void sync_data();  » more...void sync_data(    boost::system::error_code &amp; ec);  » more...Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/sync_data.html
basic_stream_file::read_writebasic_stream_file::read_writeHomeLibrariesPeopleFAQMorebasic_stream_file::read_write          Inherited from file_base.                   Open          the file for reading and writing.        static const flags read_write = implementation_defined;Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/read_write.html
basic_stream_file::open (2 of 4 overloads)basic_stream_file::open (2 of 4 overloads)HomeLibrariesPeopleFAQMorebasic_stream_file::open          (2 of 4 overloads)            Inherited from basic_file.                      Open the file using the specified path.          void open(    const char * path,    file_base::flags open_flags,    boost::system::error_code &amp; ec);            This function opens the file so that it will use the specified path.                      Parameters          path                  The path name identifying the file to be opened.                open_flags                  A set of flags that determine how the file should be opened.                ec                  Set to indicate what error occurred, if any.                            Example          boost::asio::stream_file file(my_context);boost::system::error_code ec;file.open("/path/to/my/file", boost::asio::stream_file::read_only, ec);if (ec){  // An error occurred.}Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/open/overload2.html
basic_stream_file::open (3 of 4 overloads)basic_stream_file::open (3 of 4 overloads)HomeLibrariesPeopleFAQMorebasic_stream_file::open          (3 of 4 overloads)            Inherited from basic_file.                      Open the file using the specified path.          void open(    const std::string &amp; path,    file_base::flags open_flags);            This function opens the file so that it will use the specified path.                      Parameters          path                  The path name identifying the file to be opened.                open_flags                  A set of flags that determine how the file should be opened.                            Exceptions          boost::system::system_error                  Thrown on failure.                            Example          boost::asio::stream_file file(my_context);file.open("/path/to/my/file", boost::asio::stream_file::read_only);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/open/overload3.html
basic_stream_file::open (4 of 4 overloads)basic_stream_file::open (4 of 4 overloads)HomeLibrariesPeopleFAQMorebasic_stream_file::open          (4 of 4 overloads)            Inherited from basic_file.                      Open the file using the specified path.          void open(    const std::string &amp; path,    file_base::flags open_flags,    boost::system::error_code &amp; ec);            This function opens the file so that it will use the specified path.                      Parameters          path                  The path name identifying the file to be opened.                open_flags                  A set of flags that determine how the file should be opened.                ec                  Set to indicate what error occurred, if any.                            Example          boost::asio::stream_file file(my_context);boost::system::error_code ec;file.open("/path/to/my/file", boost::asio::stream_file::read_only, ec);if (ec){  // An error occurred.}Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/open/overload4.html
basic_stream_file::open (1 of 4 overloads)basic_stream_file::open (1 of 4 overloads)HomeLibrariesPeopleFAQMorebasic_stream_file::open          (1 of 4 overloads)            Inherited from basic_file.                      Open the file using the specified path.          void open(    const char * path,    file_base::flags open_flags);            This function opens the file so that it will use the specified path.                      Parameters          path                  The path name identifying the file to be opened.                open_flags                  A set of flags that determine how the file should be opened.                            Exceptions          boost::system::system_error                  Thrown on failure.                            Example          boost::asio::stream_file file(my_context);file.open("/path/to/my/file", boost::asio::stream_file::read_only);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/open/overload1.html
basic_stream_file::operator=basic_stream_file::operator=HomeLibrariesPeopleFAQMorebasic_stream_file::operator=           Move-assign          a basic_stream_file from another.        basic_stream_file &amp; operator=(    basic_stream_file &amp;&amp; other);  » more...          Move-assign a basic_stream_file from a file          of another executor type.        template&lt;    typename Executor1&gt;constraint&lt; is_convertible&lt; Executor1, Executor &gt;::value, basic_stream_file &amp; &gt;::type operator=(    basic_stream_file&lt; Executor1 &gt; &amp;&amp; other);  » more...Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/operator_eq_.html
basic_stream_file::basic_stream_filebasic_stream_file::basic_stream_fileHomeLibrariesPeopleFAQMorebasic_stream_file::basic_stream_file           Construct          a basic_stream_file without opening          it.        explicit basic_stream_file(    const executor_type &amp; ex);  » more...template&lt;    typename ExecutionContext&gt;explicit basic_stream_file(    ExecutionContext &amp; context,    typename constraint&lt; is_convertible&lt; ExecutionContext &amp;, execution_context &amp; &gt;::value, defaulted_constraint &gt;::type  = defaulted_constraint());  » more...          Construct and open a basic_stream_file.        basic_stream_file(    const executor_type &amp; ex,    const char * path,    file_base::flags open_flags);  » more...template&lt;    typename ExecutionContext&gt;basic_stream_file(    ExecutionContext &amp; context,    const char * path,    file_base::flags open_flags,    typename constraint&lt; is_convertible&lt; ExecutionContext &amp;, execution_context &amp; &gt;::value, defaulted_constraint &gt;::type  = defaulted_constraint());  » more...basic_stream_file(    const executor_type &amp; ex,    const std::string &amp; path,    file_base::flags open_flags);  » more...template&lt;    typename ExecutionContext&gt;basic_stream_file(    ExecutionContext &amp; context,    const std::string &amp; path,    file_base::flags open_flags,    typename constraint&lt; is_convertible&lt; ExecutionContext &amp;, execution_context &amp; &gt;::value, defaulted_constraint &gt;::type  = defaulted_constraint());  » more...          Construct a basic_stream_file on an existing          native file.        basic_stream_file(    const executor_type &amp; ex,    const native_handle_type &amp; native_file);  » more...template&lt;    typename ExecutionContext&gt;basic_stream_file(    ExecutionContext &amp; context,    const native_handle_type &amp; native_file,    typename constraint&lt; is_convertible&lt; ExecutionContext &amp;, execution_context &amp; &gt;::value, defaulted_constraint &gt;::type  = defaulted_constraint());  » more...          Move-construct a basic_stream_file from another.        basic_stream_file(    basic_stream_file &amp;&amp; other);  » more...          Move-construct a basic_stream_file from a file          of another executor type.        template&lt;    typename Executor1&gt;basic_stream_file(    basic_stream_file&lt; Executor1 &gt; &amp;&amp; other,    typename constraint&lt; is_convertible&lt; Executor1, Executor &gt;::value, defaulted_constraint &gt;::type  = defaulted_constraint());  » more...Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/basic_stream_file.html
basic_stream_file::openbasic_stream_file::openHomeLibrariesPeopleFAQMorebasic_stream_file::open           Open the          file using the specified path.        void open(    const char * path,    file_base::flags open_flags);  » more...void open(    const char * path,    file_base::flags open_flags,    boost::system::error_code &amp; ec);  » more...void open(    const std::string &amp; path,    file_base::flags open_flags);  » more...void open(    const std::string &amp; path,    file_base::flags open_flags,    boost::system::error_code &amp; ec);  » more...Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/open.html
basic_stream_file::get_executorbasic_stream_file::get_executorHomeLibrariesPeopleFAQMorebasic_stream_file::get_executor          Inherited from basic_file.                   Get          the executor associated with the object.        executor_type get_executor();Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/get_executor.html
basic_stream_file::closebasic_stream_file::closeHomeLibrariesPeopleFAQMorebasic_stream_file::close           Close          the file.        void close();  » more...void close(    boost::system::error_code &amp; ec);  » more...Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/close.html
basic_stream_file::write_onlybasic_stream_file::write_onlyHomeLibrariesPeopleFAQMorebasic_stream_file::write_only          Inherited from file_base.                   Open          the file for writing.        static const flags write_only = implementation_defined;Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/write_only.html
basic_stream_file::exclusivebasic_stream_file::exclusiveHomeLibrariesPeopleFAQMorebasic_stream_file::exclusive          Inherited from file_base.                   Ensure          a new file is created. Must be combined with create.        static const flags exclusive = implementation_defined;Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/exclusive.html
basic_stream_file::cancelbasic_stream_file::cancelHomeLibrariesPeopleFAQMorebasic_stream_file::cancel           Cancel          all asynchronous operations associated with the file.        void cancel();  » more...void cancel(    boost::system::error_code &amp; ec);  » more...Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/cancel.html
basic_stream_file::resize (2 of 2 overloads)basic_stream_file::resize (2 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_stream_file::resize          (2 of 2 overloads)            Inherited from basic_file.                      Alter the size of the file.          void resize(    uint64_t n,    boost::system::error_code &amp; ec);            This function resizes the file to the specified size, in bytes. If the            current file size exceeds n            then any extra data is discarded. If the current size is less than n then the file is extended and filled            with zeroes.                      Parameters          n                  The new size for the file.                ec                  Set to indicate what error occurred, if any.                Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/resize/overload2.html
basic_stream_file::resize (1 of 2 overloads)basic_stream_file::resize (1 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_stream_file::resize          (1 of 2 overloads)            Inherited from basic_file.                      Alter the size of the file.          void resize(    uint64_t n);            This function resizes the file to the specified size, in bytes. If the            current file size exceeds n            then any extra data is discarded. If the current size is less than n then the file is extended and filled            with zeroes.                      Parameters          n                  The new size for the file.                            Exceptions          boost::system::system_error                  Thrown on failure.                Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/resize/overload1.html
basic_stream_file::size (2 of 2 overloads)basic_stream_file::size (2 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_stream_file::size          (2 of 2 overloads)            Inherited from basic_file.                      Get the size of the file.          uint64_t size(    boost::system::error_code &amp; ec) const;            This function determines the size of the file, in bytes.                      Parameters          ec                  Set to indicate what error occurred, if any.                Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/size/overload2.html
basic_stream_file::size (1 of 2 overloads)basic_stream_file::size (1 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_stream_file::size          (1 of 2 overloads)            Inherited from basic_file.                      Get the size of the file.          uint64_t size() const;            This function determines the size of the file, in bytes.                      Exceptions          boost::system::system_error                  Thrown on failure.                Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_stream_file/size/overload1.html
enable_partial_cancellationenable_partial_cancellationHomeLibrariesPeopleFAQMoreenable_partial_cancellation                      A cancellation filter that enables terminal and partial cancellation.      typedef cancellation_filter&lt; cancellation_type::terminal|cancellation_type::partial &gt; enable_partial_cancellation;        Member        Functions                                        Name                                                                Description                                                                operator()                                                                Returns type &amp; Mask.                                      Requirements              Header: boost/asio/cancellation_state.hpp              Convenience header: boost/asio.hpp      Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/enable_partial_cancellation.html
posix::basic_stream_descriptor::rebind_executor::otherposix::basic_stream_descriptor::rebind_executor::otherHomeLibrariesPeopleFAQMoreposix::basic_stream_descriptor::rebind_executor::other           The          descriptor type when rebound to the specified executor.        typedef basic_stream_descriptor&lt; Executor1 &gt; other;          Types                                              Name                                                                        Description                                                                        rebind_executor                                                                        Rebinds the descriptor type to another executor.                                                                        bytes_readable                                                                        IO control command to get the amount of data that can be read                    without blocking.                                                                        executor_type                                                                        The type of the executor associated with the object.                                                                        lowest_layer_type                                                                        A descriptor is always the lowest layer.                                                                        native_handle_type                                                                        The native representation of a descriptor.                                                                        wait_type                                                                        Wait types.                                            Member          Functions                                              Name                                                                        Description                                                                        assign                                                                        Assign an existing native descriptor to the descriptor.                                                                        async_read_some                                                                        Start an asynchronous read.                                                                        async_wait                                                                        Asynchronously wait for the descriptor to become ready to read,                    ready to write, or to have pending error conditions.                                                                        async_write_some                                                                        Start an asynchronous write.                                                                        basic_stream_descriptor [constructor]                                                                        Construct a stream descriptor without opening it.   —                    Construct a stream descriptor on an existing native descriptor.                      — Move-construct a stream descriptor from another.                                                                        cancel                                                                        Cancel all asynchronous operations associated with the descriptor.                                                                        close                                                                        Close the descriptor.                                                                        get_executor                                                                        Get the executor associated with the object.                                                                        io_control                                                                        Perform an IO control command on the descriptor.                                                                        is_open                                                                        Determine whether the descriptor is open.                                                                        lowest_layer                                                                        Get a reference to the lowest layer.   — Get a const                    reference to the lowest layer.                                                                        native_handle                                                                        Get the native descriptor representation.                                                                        native_non_blocking                                                                        Gets the non-blocking mode of the native descriptor implementation.                      — Sets the non-blocking mode of the native descriptor                    implementation.                                                                        non_blocking                                                                        Gets the non-blocking mode of the descriptor.   — Sets                    the non-blocking mode of the descriptor.                                                                        operator=                                                                        Move-assign a stream descriptor from another.                                                                        read_some                                                                        Read some data from the descriptor.                                                                        release                                                                        Release ownership of the native descriptor implementation.                                                                        wait                                                                        Wait for the descriptor to become ready to read, ready to write,                    or to have pending error conditions.                                                                        write_some                                                                        Write some data to the descriptor.                                            The posix::basic_stream_descriptor class          template provides asynchronous and blocking stream-oriented descriptor          functionality.                  Thread          Safety                  Distinct objects: Safe.                  Shared objects: Unsafe.                  Synchronous read_some and          write_some operations are          thread safe with respect to each other, if the underlying operating system          calls are also thread safe. This means that it is permitted to perform          concurrent calls to these synchronous operations on a single descriptor          object. Other synchronous operations, such as close,          are not thread safe.                  Requirements                  Header: boost/asio/posix/basic_stream_descriptor.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/posix__basic_stream_descriptor__rebind_executor/other.html
associated_executor::typeassociated_executor::typeHomeLibrariesPeopleFAQMoreassociated_executor::type           If          T has a nested type executor_type, T::executor_type.          Otherwise Executor.        typedef see_below type;          Requirements                  Header: boost/asio/associated_executor.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/associated_executor/type.html
associated_executor::getassociated_executor::getHomeLibrariesPeopleFAQMoreassociated_executor::get           If T has a nested type executor_type,          returns t.get_executor().          Otherwise returns ex.        static type get(    const T &amp; t,    const Executor &amp; ex = Executor());Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/associated_executor/get.html
executor_binder::operator()executor_binder::operator()HomeLibrariesPeopleFAQMoreexecutor_binder::operator()                  template&lt;    typename... Args&gt;auto operator()(    Args &amp;&amp; ...);  » more...template&lt;    typename... Args&gt;auto operator()(    Args &amp;&amp; ...) const;  » more...Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/executor_binder/operator_lp__rp_.html
executor_binder::executor_binder (5 of 9 overloads)executor_binder::executor_binder (5 of 9 overloads)HomeLibrariesPeopleFAQMoreexecutor_binder::executor_binder          (5 of 9 overloads)            Construct a copy of a different executor wrapper type, but specify a            different executor.          template&lt;    typename U,    typename OtherExecutor&gt;executor_binder(    executor_arg_t ,    const executor_type &amp; e,    const executor_binder&lt; U, OtherExecutor &gt; &amp; other);            This constructor is only valid if the type T            is constructible from type U.          Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/executor_binder/executor_binder/overload5.html
executor_binder::executor_binder (2 of 9 overloads)executor_binder::executor_binder (2 of 9 overloads)HomeLibrariesPeopleFAQMoreexecutor_binder::executor_binder          (2 of 9 overloads)            Copy constructor.          executor_binder(    const executor_binder &amp; other);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/executor_binder/executor_binder/overload2.html
executor_binder::executor_binder (6 of 9 overloads)executor_binder::executor_binder (6 of 9 overloads)HomeLibrariesPeopleFAQMoreexecutor_binder::executor_binder          (6 of 9 overloads)            Move constructor.          executor_binder(    executor_binder &amp;&amp; other);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/executor_binder/executor_binder/overload6.html
executor_binder::executor_binder (3 of 9 overloads)executor_binder::executor_binder (3 of 9 overloads)HomeLibrariesPeopleFAQMoreexecutor_binder::executor_binder          (3 of 9 overloads)            Construct a copy, but specify a different executor.          executor_binder(    executor_arg_t ,    const executor_type &amp; e,    const executor_binder &amp; other);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/executor_binder/executor_binder/overload3.html
executor_binder::executor_binder (4 of 9 overloads)executor_binder::executor_binder (4 of 9 overloads)HomeLibrariesPeopleFAQMoreexecutor_binder::executor_binder          (4 of 9 overloads)            Construct a copy of a different executor wrapper type.          template&lt;    typename U,    typename OtherExecutor&gt;executor_binder(    const executor_binder&lt; U, OtherExecutor &gt; &amp; other);            This constructor is only valid if the Executor            type is constructible from type OtherExecutor,            and the type T is constructible            from type U.          Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/executor_binder/executor_binder/overload4.html
executor_binder::executor_binder (8 of 9 overloads)executor_binder::executor_binder (8 of 9 overloads)HomeLibrariesPeopleFAQMoreexecutor_binder::executor_binder          (8 of 9 overloads)            Move construct from a different executor wrapper type.          template&lt;    typename U,    typename OtherExecutor&gt;executor_binder(    executor_binder&lt; U, OtherExecutor &gt; &amp;&amp; other);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/executor_binder/executor_binder/overload8.html
executor_binder::executor_binder (1 of 9 overloads)executor_binder::executor_binder (1 of 9 overloads)HomeLibrariesPeopleFAQMoreexecutor_binder::executor_binder          (1 of 9 overloads)            Construct an executor wrapper for the specified object.          template&lt;    typename U&gt;executor_binder(    executor_arg_t ,    const executor_type &amp; e,    U &amp;&amp; u);            This constructor is only valid if the type T            is constructible from type U.          Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/executor_binder/executor_binder/overload1.html
executor_binder::executor_binder (7 of 9 overloads)executor_binder::executor_binder (7 of 9 overloads)HomeLibrariesPeopleFAQMoreexecutor_binder::executor_binder          (7 of 9 overloads)            Move construct the target object, but specify a different executor.          executor_binder(    executor_arg_t ,    const executor_type &amp; e,    executor_binder &amp;&amp; other);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/executor_binder/executor_binder/overload7.html
executor_binder::executor_binder (9 of 9 overloads)executor_binder::executor_binder (9 of 9 overloads)HomeLibrariesPeopleFAQMoreexecutor_binder::executor_binder          (9 of 9 overloads)            Move construct from a different executor wrapper type, but specify a            different executor.          template&lt;    typename U,    typename OtherExecutor&gt;executor_binder(    executor_arg_t ,    const executor_type &amp; e,    executor_binder&lt; U, OtherExecutor &gt; &amp;&amp; other);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/executor_binder/executor_binder/overload9.html
executor_binder::target_typeexecutor_binder::target_typeHomeLibrariesPeopleFAQMoreexecutor_binder::target_type           The          type of the target object.        typedef T target_type;          Requirements                  Header: boost/asio/bind_executor.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/executor_binder/target_type.html
executor_binder::executor_typeexecutor_binder::executor_typeHomeLibrariesPeopleFAQMoreexecutor_binder::executor_type           The          type of the associated executor.        typedef Executor executor_type;          Requirements                  Header: boost/asio/bind_executor.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/executor_binder/executor_type.html
executor_binder::get (2 of 2 overloads)executor_binder::get (2 of 2 overloads)HomeLibrariesPeopleFAQMoreexecutor_binder::get          (2 of 2 overloads)            Obtain a reference to the target object.          const target_type &amp; get() const;Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/executor_binder/get/overload2.html
executor_binder::get (1 of 2 overloads)executor_binder::get (1 of 2 overloads)HomeLibrariesPeopleFAQMoreexecutor_binder::get          (1 of 2 overloads)            Obtain a reference to the target object.          target_type &amp; get();Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/executor_binder/get/overload1.html
executor_binder::argument_typeexecutor_binder::argument_typeHomeLibrariesPeopleFAQMoreexecutor_binder::argument_type           The          type of the function's argument.        typedef see_below argument_type;          The type of argument_type          is based on the type T          of the wrapper's target object:                      if T is a pointer to              a function type accepting a single argument, argument_type              is a synonym for the return type of T;                          if T is a class type              with a member type argument_type,              then argument_type              is a synonym for T::argument_type;                          otherwise argument_type              is not defined.                      Requirements                  Header: boost/asio/bind_executor.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/executor_binder/argument_type.html
executor_binder::first_argument_typeexecutor_binder::first_argument_typeHomeLibrariesPeopleFAQMoreexecutor_binder::first_argument_type           The          type of the function's first argument.        typedef see_below first_argument_type;          The type of first_argument_type          is based on the type T          of the wrapper's target object:                      if T is a pointer to              a function type accepting two arguments, first_argument_type              is a synonym for the return type of T;                          if T is a class type              with a member type first_argument_type,              then first_argument_type              is a synonym for T::first_argument_type;                          otherwise first_argument_type              is not defined.                      Requirements                  Header: boost/asio/bind_executor.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/executor_binder/first_argument_type.html
executor_binder::getexecutor_binder::getHomeLibrariesPeopleFAQMoreexecutor_binder::get           Obtain a reference          to the target object.        target_type &amp; get();  » more...const target_type &amp; get() const;  » more...Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/executor_binder/get.html
executor_binder::second_argument_typeexecutor_binder::second_argument_typeHomeLibrariesPeopleFAQMoreexecutor_binder::second_argument_type           The          type of the function's second argument.        typedef see_below second_argument_type;          The type of second_argument_type          is based on the type T          of the wrapper's target object:                      if T is a pointer to              a function type accepting two arguments, second_argument_type              is a synonym for the return type of T;                          if T is a class type              with a member type first_argument_type,              then second_argument_type              is a synonym for T::second_argument_type;                          otherwise second_argument_type              is not defined.                      Requirements                  Header: boost/asio/bind_executor.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/executor_binder/second_argument_type.html
executor_binder::result_typeexecutor_binder::result_typeHomeLibrariesPeopleFAQMoreexecutor_binder::result_type           The          return type if a function.        typedef see_below result_type;          The type of result_type          is based on the type T          of the wrapper's target object:                      if T is a pointer to              function type, result_type              is a synonym for the return type of T;                          if T is a class type              with a member type result_type,              then result_type is              a synonym for T::result_type;                          otherwise result_type              is not defined.                      Requirements                  Header: boost/asio/bind_executor.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/executor_binder/result_type.html
executor_binder::get_executorexecutor_binder::get_executorHomeLibrariesPeopleFAQMoreexecutor_binder::get_executor           Obtain          the associated executor.        executor_type get_executor() const;Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/executor_binder/get_executor.html
executor_binder::~executor_binderexecutor_binder::~executor_binderHomeLibrariesPeopleFAQMoreexecutor_binder::~executor_binder           Destructor.        ~executor_binder();Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/executor_binder/_executor_binder.html
executor_binder::executor_binderexecutor_binder::executor_binderHomeLibrariesPeopleFAQMoreexecutor_binder::executor_binder           Construct          an executor wrapper for the specified object.        template&lt;    typename U&gt;executor_binder(    executor_arg_t ,    const executor_type &amp; e,    U &amp;&amp; u);  » more...          Copy constructor.        executor_binder(    const executor_binder &amp; other);  » more...          Construct a copy, but specify a different executor.        executor_binder(    executor_arg_t ,    const executor_type &amp; e,    const executor_binder &amp; other);  » more...          Construct a copy of a different executor wrapper type.        template&lt;    typename U,    typename OtherExecutor&gt;executor_binder(    const executor_binder&lt; U, OtherExecutor &gt; &amp; other);  » more...          Construct a copy of a different executor wrapper type, but specify a different          executor.        template&lt;    typename U,    typename OtherExecutor&gt;executor_binder(    executor_arg_t ,    const executor_type &amp; e,    const executor_binder&lt; U, OtherExecutor &gt; &amp; other);  » more...          Move constructor.        executor_binder(    executor_binder &amp;&amp; other);  » more...          Move construct the target object, but specify a different executor.        executor_binder(    executor_arg_t ,    const executor_type &amp; e,    executor_binder &amp;&amp; other);  » more...          Move construct from a different executor wrapper type.        template&lt;    typename U,    typename OtherExecutor&gt;executor_binder(    executor_binder&lt; U, OtherExecutor &gt; &amp;&amp; other);  » more...          Move construct from a different executor wrapper type, but specify a different          executor.        template&lt;    typename U,    typename OtherExecutor&gt;executor_binder(    executor_arg_t ,    const executor_type &amp; e,    executor_binder&lt; U, OtherExecutor &gt; &amp;&amp; other);  » more...Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/executor_binder/executor_binder.html
executor_binder::operator() (2 of 2 overloads)executor_binder::operator() (2 of 2 overloads)HomeLibrariesPeopleFAQMoreexecutor_binder::operator()          (2 of 2 overloads)template&lt;    typename... Args&gt;auto operator()(    Args &amp;&amp; ...) const;Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/executor_binder/operator_lp__rp_/overload2.html
executor_binder::operator() (1 of 2 overloads)executor_binder::operator() (1 of 2 overloads)HomeLibrariesPeopleFAQMoreexecutor_binder::operator()          (1 of 2 overloads)template&lt;    typename... Args&gt;auto operator()(    Args &amp;&amp; ...);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/executor_binder/operator_lp__rp_/overload1.html
ssl::stream::impl_struct::sslssl::stream::impl_struct::sslHomeLibrariesPeopleFAQMoressl::stream::impl_struct::ssl                  SSL * ssl;Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/ssl__stream__impl_struct/ssl.html
async_read_untilasync_read_untilHomeLibrariesPeopleFAQMoreasync_read_until                      The async_read_until function        is a composed asynchronous operation that reads data into a dynamic buffer        sequence, or into a streambuf, until it contains a delimiter, matches a regular        expression, or a function object indicates a match.              Start an asynchronous operation to read data into a dynamic buffer sequence        until it contains a specified delimiter.      template&lt;    typename AsyncReadStream,    typename DynamicBuffer_v1,    typename ReadToken = DEFAULT&gt;DEDUCED async_read_until(    AsyncReadStream &amp; s,    DynamicBuffer_v1 &amp;&amp; buffers,    char delim,    ReadToken &amp;&amp; token = DEFAULT,    typename constraint&lt; is_dynamic_buffer_v1&lt; typename decay&lt; DynamicBuffer_v1 &gt;::type &gt;::value &gt;::type  = 0,    typename constraint&lt; !is_dynamic_buffer_v2&lt; typename decay&lt; DynamicBuffer_v1 &gt;::type &gt;::value &gt;::type  = 0);  » more...template&lt;    typename AsyncReadStream,    typename DynamicBuffer_v1,    typename ReadToken = DEFAULT&gt;DEDUCED async_read_until(    AsyncReadStream &amp; s,    DynamicBuffer_v1 &amp;&amp; buffers,    string_view delim,    ReadToken &amp;&amp; token = DEFAULT,    typename constraint&lt; is_dynamic_buffer_v1&lt; typename decay&lt; DynamicBuffer_v1 &gt;::type &gt;::value &gt;::type  = 0,    typename constraint&lt; !is_dynamic_buffer_v2&lt; typename decay&lt; DynamicBuffer_v1 &gt;::type &gt;::value &gt;::type  = 0);  » more...        Start an asynchronous operation to read data into a dynamic buffer sequence        until some part of its data matches a regular expression.      template&lt;    typename AsyncReadStream,    typename DynamicBuffer_v1,    typename ReadToken = DEFAULT&gt;DEDUCED async_read_until(    AsyncReadStream &amp; s,    DynamicBuffer_v1 &amp;&amp; buffers,    const boost::regex &amp; expr,    ReadToken &amp;&amp; token = DEFAULT,    typename constraint&lt; is_dynamic_buffer_v1&lt; typename decay&lt; DynamicBuffer_v1 &gt;::type &gt;::value &gt;::type  = 0,    typename constraint&lt; !is_dynamic_buffer_v2&lt; typename decay&lt; DynamicBuffer_v1 &gt;::type &gt;::value &gt;::type  = 0);  » more...        Start an asynchronous operation to read data into a dynamic buffer sequence        until a function object indicates a match.      template&lt;    typename AsyncReadStream,    typename DynamicBuffer_v1,    typename MatchCondition,    typename ReadToken = DEFAULT&gt;DEDUCED async_read_until(    AsyncReadStream &amp; s,    DynamicBuffer_v1 &amp;&amp; buffers,    MatchCondition match_condition,    ReadToken &amp;&amp; token = DEFAULT,    typename constraint&lt; is_match_condition&lt; MatchCondition &gt;::value &gt;::type  = 0,    typename constraint&lt; is_dynamic_buffer_v1&lt; typename decay&lt; DynamicBuffer_v1 &gt;::type &gt;::value &gt;::type  = 0,    typename constraint&lt; !is_dynamic_buffer_v2&lt; typename decay&lt; DynamicBuffer_v1 &gt;::type &gt;::value &gt;::type  = 0);  » more...        Start an asynchronous operation to read data into a streambuf until it contains        a specified delimiter.      template&lt;    typename AsyncReadStream,    typename Allocator,    typename ReadToken = DEFAULT&gt;DEDUCED async_read_until(    AsyncReadStream &amp; s,    boost::asio::basic_streambuf&lt; Allocator &gt; &amp; b,    char delim,    ReadToken &amp;&amp; token = DEFAULT);  » more...template&lt;    typename AsyncReadStream,    typename Allocator,    typename ReadToken = DEFAULT&gt;DEDUCED async_read_until(    AsyncReadStream &amp; s,    boost::asio::basic_streambuf&lt; Allocator &gt; &amp; b,    string_view delim,    ReadToken &amp;&amp; token = DEFAULT);  » more...        Start an asynchronous operation to read data into a streambuf until some        part of its data matches a regular expression.      template&lt;    typename AsyncReadStream,    typename Allocator,    typename ReadToken = DEFAULT&gt;DEDUCED async_read_until(    AsyncReadStream &amp; s,    boost::asio::basic_streambuf&lt; Allocator &gt; &amp; b,    const boost::regex &amp; expr,    ReadToken &amp;&amp; token = DEFAULT);  » more...        Start an asynchronous operation to read data into a streambuf until a function        object indicates a match.      template&lt;    typename AsyncReadStream,    typename Allocator,    typename MatchCondition,    typename ReadToken = DEFAULT&gt;DEDUCED async_read_until(    AsyncReadStream &amp; s,    boost::asio::basic_streambuf&lt; Allocator &gt; &amp; b,    MatchCondition match_condition,    ReadToken &amp;&amp; token = DEFAULT,    typename constraint&lt; is_match_condition&lt; MatchCondition &gt;::value &gt;::type  = 0);  » more...        Start an asynchronous operation to read data into a dynamic buffer sequence        until it contains a specified delimiter.      template&lt;    typename AsyncReadStream,    typename DynamicBuffer_v2,    typename ReadToken = DEFAULT&gt;DEDUCED async_read_until(    AsyncReadStream &amp; s,    DynamicBuffer_v2 buffers,    char delim,    ReadToken &amp;&amp; token = DEFAULT,    typename constraint&lt; is_dynamic_buffer_v2&lt; DynamicBuffer_v2 &gt;::value &gt;::type  = 0);  » more...template&lt;    typename AsyncReadStream,    typename DynamicBuffer_v2,    typename ReadToken = DEFAULT&gt;DEDUCED async_read_until(    AsyncReadStream &amp; s,    DynamicBuffer_v2 buffers,    string_view delim,    ReadToken &amp;&amp; token = DEFAULT,    typename constraint&lt; is_dynamic_buffer_v2&lt; DynamicBuffer_v2 &gt;::value &gt;::type  = 0);  » more...        Start an asynchronous operation to read data into a dynamic buffer sequence        until some part of its data matches a regular expression.      template&lt;    typename AsyncReadStream,    typename DynamicBuffer_v2,    typename ReadToken = DEFAULT&gt;DEDUCED async_read_until(    AsyncReadStream &amp; s,    DynamicBuffer_v2 buffers,    const boost::regex &amp; expr,    ReadToken &amp;&amp; token = DEFAULT,    typename constraint&lt; is_dynamic_buffer_v2&lt; DynamicBuffer_v2 &gt;::value &gt;::type  = 0);  » more...        Start an asynchronous operation to read data into a dynamic buffer sequence        until a function object indicates a match.      template&lt;    typename AsyncReadStream,    typename DynamicBuffer_v2,    typename MatchCondition,    typename ReadToken = DEFAULT&gt;DEDUCED async_read_until(    AsyncReadStream &amp; s,    DynamicBuffer_v2 buffers,    MatchCondition match_condition,    ReadToken &amp;&amp; token = DEFAULT,    typename constraint&lt; is_match_condition&lt; MatchCondition &gt;::value &gt;::type  = 0,    typename constraint&lt; is_dynamic_buffer_v2&lt; DynamicBuffer_v2 &gt;::value &gt;::type  = 0);  » more...        Requirements              Header: boost/asio/read_until.hpp              Convenience header: boost/asio.hpp      Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/async_read_until.html
experimental::parallel_group::async_waitexperimental::parallel_group::async_waitHomeLibrariesPeopleFAQMoreexperimental::parallel_group::async_wait           Initiate          an asynchronous wait for the group of operations.        template&lt;    typename CancellationCondition,    typename CompletionToken&gt;auto async_wait(    CancellationCondition cancellation_condition,    CompletionToken &amp;&amp; token);          Launches the group and asynchronously waits for completion.                  Parameters        cancellation_condition                A function object, called on completion of an operation within the                group, that is used to determine whether to cancel the remaining                operations. The function object is passed the arguments of the completed                operation's handler. To trigger cancellation of the remaining operations,                it must return a cancellation_type value                other than boost::asio::cancellation_type::none.              token                A completion                token whose signature is comprised of a std::array&lt;std::size_t, N&gt; indicating the completion order                of the operations, followed by all operations' completion handler                arguments.                        The library provides the following cancellation_condition          types:                      experimental::wait_for_all                          experimental::wait_for_one                          experimental::wait_for_one_error                          experimental::wait_for_one_success            Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/experimental__parallel_group/async_wait.html
experimental::parallel_group::signatureexperimental::parallel_group::signatureHomeLibrariesPeopleFAQMoreexperimental::parallel_group::signature           The          completion signature for the group of operations.        typedef detail::parallel_group_signature&lt; sizeof...(Ops), typename detail::parallel_op_signature&lt; Ops &gt;::type...&gt;::type signature;          Requirements                  Header: boost/asio/experimental/parallel_group.hpp                  Convenience header: None        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/experimental__parallel_group/signature.html
experimental::parallel_group::parallel_groupexperimental::parallel_group::parallel_groupHomeLibrariesPeopleFAQMoreexperimental::parallel_group::parallel_group           Constructor.        parallel_group(    Ops... ops);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/experimental__parallel_group/parallel_group.html
execution::receiver_invocation_errorexecution::receiver_invocation_errorHomeLibrariesPeopleFAQMoreexecution::receiver_invocation_error                      Exception reported via set_error        when an exception escapes from set_value.      class receiver_invocation_error        Member        Functions                                        Name                                                                Description                                                                receiver_invocation_error [constructor]                                                                Constructor.                                      Requirements              Header: boost/asio/execution/receiver_invocation_error.hpp              Convenience header: boost/asio/execution.hpp      Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/execution__receiver_invocation_error.html
dynamic_buffer (2 of 4 overloads)dynamic_buffer (2 of 4 overloads)HomeLibrariesPeopleFAQMoredynamic_buffer        (2 of 4 overloads)          Create a new dynamic buffer that represents the given string.        template&lt;    typename Elem,    typename Traits,    typename Allocator&gt;dynamic_string_buffer&lt; Elem, Traits, Allocator &gt; dynamic_buffer(    std::basic_string&lt; Elem, Traits, Allocator &gt; &amp; data,    std::size_t max_size);          Return          Value                  dynamic_string_buffer&lt;Elem, Traits, Allocator&gt;(data, max_size).        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/dynamic_buffer/overload2.html
dynamic_buffer (3 of 4 overloads)dynamic_buffer (3 of 4 overloads)HomeLibrariesPeopleFAQMoredynamic_buffer        (3 of 4 overloads)          Create a new dynamic buffer that represents the given vector.        template&lt;    typename Elem,    typename Allocator&gt;dynamic_vector_buffer&lt; Elem, Allocator &gt; dynamic_buffer(    std::vector&lt; Elem, Allocator &gt; &amp; data);          Return          Value                  dynamic_vector_buffer&lt;Elem, Allocator&gt;(data).        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/dynamic_buffer/overload3.html
dynamic_buffer (4 of 4 overloads)dynamic_buffer (4 of 4 overloads)HomeLibrariesPeopleFAQMoredynamic_buffer        (4 of 4 overloads)          Create a new dynamic buffer that represents the given vector.        template&lt;    typename Elem,    typename Allocator&gt;dynamic_vector_buffer&lt; Elem, Allocator &gt; dynamic_buffer(    std::vector&lt; Elem, Allocator &gt; &amp; data,    std::size_t max_size);          Return          Value                  dynamic_vector_buffer&lt;Elem, Allocator&gt;(data, max_size).        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/dynamic_buffer/overload4.html
dynamic_buffer (1 of 4 overloads)dynamic_buffer (1 of 4 overloads)HomeLibrariesPeopleFAQMoredynamic_buffer        (1 of 4 overloads)          Create a new dynamic buffer that represents the given string.        template&lt;    typename Elem,    typename Traits,    typename Allocator&gt;dynamic_string_buffer&lt; Elem, Traits, Allocator &gt; dynamic_buffer(    std::basic_string&lt; Elem, Traits, Allocator &gt; &amp; data);          Return          Value                  dynamic_string_buffer&lt;Elem, Traits, Allocator&gt;(data).        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/dynamic_buffer/overload1.html
Buffer-oriented asynchronous write stream requirementsBuffer-oriented asynchronous write stream requirementsHomeLibrariesPeopleFAQMoreBuffer-oriented      asynchronous write stream requirements        A type X meets the AsyncWriteStream requirements if it satisfies        the requirements listed below.              In the table below, a denotes        a value of type X, cb denotes a (possibly const) value satisfying        the ConstBufferSequence requirements,        and t is a completion token.      Table 7. AsyncWriteStream requirements                                  operation                                                                type                                                                semantics, pre/post-conditions                                                                a.get_executor()                                                                A type satisfying the Executor                  requirements.                                                                Returns the associated I/O executor.                                                                a.async_write_some(cb,t)                                                                The return type is determined according to the requirements for                  an asynchronous                  operation.                                                                Meets the requirements for a write                  operation and an asynchronous                  operation with completion signature void(error_code                  ec,                  size_t n).  If buffer_size(cb)                  &gt; 0,                  initiates an asynchronous operation to write one or more bytes                  of data to the stream a                  from the buffer sequence cb.                  If successful, ec                  is set such that !ec is true,                  and n is the number                  of bytes written. If an error occurred, ec                  is set such that !!ec is true,                  and n is 0.                   If buffer_size(cb) == 0, the operation completes immediately.                  ec is set such                  that !ec                  is true, and n is 0.                              Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/AsyncWriteStream.html
experimental::operator|experimental::operator|HomeLibrariesPeopleFAQMoreexperimental::operator|                      Pipe operator used to chain deferred operations.      template&lt;    typename Head,    typename Tail&gt;auto operator|(    Head head,    Tail &amp;&amp; tail) const;        Requirements              Header: boost/asio/experimental/deferred.hpp              Convenience header: None      Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/experimental__operator_pipe_.html
buffers_iterator::operator+=buffers_iterator::operator+=HomeLibrariesPeopleFAQMorebuffers_iterator::operator+=           Addition          operator.        buffers_iterator &amp; operator+=(    std::ptrdiff_t difference);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffers_iterator/operator_plus__eq_.html
buffers_iterator::beginbuffers_iterator::beginHomeLibrariesPeopleFAQMorebuffers_iterator::begin           Construct          an iterator representing the beginning of the buffers' data.        static buffers_iterator begin(    const BufferSequence &amp; buffers);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffers_iterator/begin.html
buffers_iterator::operator&lt;buffers_iterator::operator&lt;HomeLibrariesPeopleFAQMorebuffers_iterator::operator&lt;           Compare          two iterators.        friend bool operator&lt;(    const buffers_iterator &amp; a,    const buffers_iterator &amp; b);          Requirements                  Header: boost/asio/buffers_iterator.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffers_iterator/operator_lt_.html
buffers_iterator::value_typebuffers_iterator::value_typeHomeLibrariesPeopleFAQMorebuffers_iterator::value_type           The          type of the value pointed to by the iterator.        typedef ByteType value_type;          Requirements                  Header: boost/asio/buffers_iterator.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffers_iterator/value_type.html
buffers_iterator::operator- (2 of 2 overloads)buffers_iterator::operator- (2 of 2 overloads)HomeLibrariesPeopleFAQMorebuffers_iterator::operator-          (2 of 2 overloads)            Subtraction operator.          friend std::ptrdiff_t operator-(    const buffers_iterator &amp; a,    const buffers_iterator &amp; b);            Requirements                      Header: boost/asio/buffers_iterator.hpp                      Convenience header: boost/asio.hpp          Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffers_iterator/operator_minus_/overload2.html
buffers_iterator::operator- (1 of 2 overloads)buffers_iterator::operator- (1 of 2 overloads)HomeLibrariesPeopleFAQMorebuffers_iterator::operator-          (1 of 2 overloads)            Subtraction operator.          friend buffers_iterator operator-(    const buffers_iterator &amp; iter,    std::ptrdiff_t difference);            Requirements                      Header: boost/asio/buffers_iterator.hpp                      Convenience header: boost/asio.hpp          Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffers_iterator/operator_minus_/overload1.html
buffers_iterator::operator&gt;buffers_iterator::operator&gt;HomeLibrariesPeopleFAQMorebuffers_iterator::operator&gt;           Compare          two iterators.        friend bool operator&gt;(    const buffers_iterator &amp; a,    const buffers_iterator &amp; b);          Requirements                  Header: boost/asio/buffers_iterator.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffers_iterator/operator_gt_.html
buffers_iterator::operator[]buffers_iterator::operator[]HomeLibrariesPeopleFAQMorebuffers_iterator::operator[]           Access          an individual element.        reference operator[](    std::ptrdiff_t difference) const;Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffers_iterator/operator_lb__rb_.html
buffers_iterator::operator++buffers_iterator::operator++HomeLibrariesPeopleFAQMorebuffers_iterator::operator++           Increment          operator (prefix).        buffers_iterator &amp; operator++();  » more...          Increment operator (postfix).        buffers_iterator operator++(    int );  » more...Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffers_iterator/operator_plus__plus_.html
buffers_iterator::operator+ (2 of 2 overloads)buffers_iterator::operator+ (2 of 2 overloads)HomeLibrariesPeopleFAQMorebuffers_iterator::operator+          (2 of 2 overloads)            Addition operator.          friend buffers_iterator operator+(    std::ptrdiff_t difference,    const buffers_iterator &amp; iter);            Requirements                      Header: boost/asio/buffers_iterator.hpp                      Convenience header: boost/asio.hpp          Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffers_iterator/operator_plus_/overload2.html
buffers_iterator::operator+ (1 of 2 overloads)buffers_iterator::operator+ (1 of 2 overloads)HomeLibrariesPeopleFAQMorebuffers_iterator::operator+          (1 of 2 overloads)            Addition operator.          friend buffers_iterator operator+(    const buffers_iterator &amp; iter,    std::ptrdiff_t difference);            Requirements                      Header: boost/asio/buffers_iterator.hpp                      Convenience header: boost/asio.hpp          Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffers_iterator/operator_plus_/overload1.html
buffers_iterator::operator-&gt;buffers_iterator::operator-&gt;HomeLibrariesPeopleFAQMorebuffers_iterator::operator-&gt;           Dereference          an iterator.        pointer operator-&gt;() const;Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffers_iterator/operator_arrow_.html
buffers_iterator::operator!=buffers_iterator::operator!=HomeLibrariesPeopleFAQMorebuffers_iterator::operator!=           Test          two iterators for inequality.        friend bool operator!=(    const buffers_iterator &amp; a,    const buffers_iterator &amp; b);          Requirements                  Header: boost/asio/buffers_iterator.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffers_iterator/operator_not__eq_.html
buffers_iterator::pointerbuffers_iterator::pointerHomeLibrariesPeopleFAQMorebuffers_iterator::pointer           The          type of the result of applying operator-&gt;() to the iterator.        typedef const_or_non_const_ByteType * pointer;          If the buffer sequence stores buffer objects that are convertible to mutable_buffer,          this is a pointer to a non-const ByteType. Otherwise, a pointer to a const          ByteType.                  Requirements                  Header: boost/asio/buffers_iterator.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffers_iterator/pointer.html
buffers_iterator::operator+buffers_iterator::operator+HomeLibrariesPeopleFAQMorebuffers_iterator::operator+           Addition          operator.        friend buffers_iterator operator+(    const buffers_iterator &amp; iter,    std::ptrdiff_t difference);  » more...friend buffers_iterator operator+(    std::ptrdiff_t difference,    const buffers_iterator &amp; iter);  » more...Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffers_iterator/operator_plus_.html
buffers_iterator::operator-- (2 of 2 overloads)buffers_iterator::operator-- (2 of 2 overloads)HomeLibrariesPeopleFAQMorebuffers_iterator::operator--          (2 of 2 overloads)            Decrement operator (postfix).          buffers_iterator operator--(    int );Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffers_iterator/operator_minus__minus_/overload2.html
buffers_iterator::operator-- (1 of 2 overloads)buffers_iterator::operator-- (1 of 2 overloads)HomeLibrariesPeopleFAQMorebuffers_iterator::operator--          (1 of 2 overloads)            Decrement operator (prefix).          buffers_iterator &amp; operator--();Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffers_iterator/operator_minus__minus_/overload1.html
buffers_iterator::buffers_iteratorbuffers_iterator::buffers_iteratorHomeLibrariesPeopleFAQMorebuffers_iterator::buffers_iterator           Default          constructor. Creates an iterator in an undefined state.        buffers_iterator();Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffers_iterator/buffers_iterator.html
buffers_iterator::iterator_categorybuffers_iterator::iterator_categoryHomeLibrariesPeopleFAQMorebuffers_iterator::iterator_category           The          iterator category.        typedef std::random_access_iterator_tag iterator_category;          Requirements                  Header: boost/asio/buffers_iterator.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffers_iterator/iterator_category.html
buffers_iterator::operator&gt;=buffers_iterator::operator&gt;=HomeLibrariesPeopleFAQMorebuffers_iterator::operator&gt;=           Compare          two iterators.        friend bool operator&gt;=(    const buffers_iterator &amp; a,    const buffers_iterator &amp; b);          Requirements                  Header: boost/asio/buffers_iterator.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffers_iterator/operator_gt__eq_.html
buffers_iterator::referencebuffers_iterator::referenceHomeLibrariesPeopleFAQMorebuffers_iterator::reference           The          type of the result of applying operator*() to the iterator.        typedef const_or_non_const_ByteType &amp; reference;          If the buffer sequence stores buffer objects that are convertible to mutable_buffer,          this is a reference to a non-const ByteType. Otherwise, a reference to          a const ByteType.                  Requirements                  Header: boost/asio/buffers_iterator.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffers_iterator/reference.html
buffers_iterator::operator--buffers_iterator::operator--HomeLibrariesPeopleFAQMorebuffers_iterator::operator--           Decrement          operator (prefix).        buffers_iterator &amp; operator--();  » more...          Decrement operator (postfix).        buffers_iterator operator--(    int );  » more...Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffers_iterator/operator_minus__minus_.html
buffers_iterator::difference_typebuffers_iterator::difference_typeHomeLibrariesPeopleFAQMorebuffers_iterator::difference_type           The          type used for the distance between two iterators.        typedef std::ptrdiff_t difference_type;          Requirements                  Header: boost/asio/buffers_iterator.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffers_iterator/difference_type.html
buffers_iterator::operator-buffers_iterator::operator-HomeLibrariesPeopleFAQMorebuffers_iterator::operator-           Subtraction          operator.        friend buffers_iterator operator-(    const buffers_iterator &amp; iter,    std::ptrdiff_t difference);  » more...friend std::ptrdiff_t operator-(    const buffers_iterator &amp; a,    const buffers_iterator &amp; b);  » more...Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffers_iterator/operator_minus_.html
buffers_iterator::operator *buffers_iterator::operator *HomeLibrariesPeopleFAQMorebuffers_iterator::operator        *           Dereference          an iterator.        reference operator *() const;Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffers_iterator/operator__star_.html
buffers_iterator::operator-=buffers_iterator::operator-=HomeLibrariesPeopleFAQMorebuffers_iterator::operator-=           Subtraction          operator.        buffers_iterator &amp; operator-=(    std::ptrdiff_t difference);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffers_iterator/operator_minus__eq_.html
buffers_iterator::endbuffers_iterator::endHomeLibrariesPeopleFAQMorebuffers_iterator::end           Construct an          iterator representing the end of the buffers' data.        static buffers_iterator end(    const BufferSequence &amp; buffers);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffers_iterator/end.html
buffers_iterator::operator==buffers_iterator::operator==HomeLibrariesPeopleFAQMorebuffers_iterator::operator==           Test          two iterators for equality.        friend bool operator==(    const buffers_iterator &amp; a,    const buffers_iterator &amp; b);          Requirements                  Header: boost/asio/buffers_iterator.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffers_iterator/operator_eq__eq_.html
buffers_iterator::operator++ (2 of 2 overloads)buffers_iterator::operator++ (2 of 2 overloads)HomeLibrariesPeopleFAQMorebuffers_iterator::operator++          (2 of 2 overloads)            Increment operator (postfix).          buffers_iterator operator++(    int );Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffers_iterator/operator_plus__plus_/overload2.html
buffers_iterator::operator++ (1 of 2 overloads)buffers_iterator::operator++ (1 of 2 overloads)HomeLibrariesPeopleFAQMorebuffers_iterator::operator++          (1 of 2 overloads)            Increment operator (prefix).          buffers_iterator &amp; operator++();Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffers_iterator/operator_plus__plus_/overload1.html
buffers_iterator::operator&lt;=buffers_iterator::operator&lt;=HomeLibrariesPeopleFAQMorebuffers_iterator::operator&lt;=           Compare          two iterators.        friend bool operator&lt;=(    const buffers_iterator &amp; a,    const buffers_iterator &amp; b);          Requirements                  Header: boost/asio/buffers_iterator.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffers_iterator/operator_lt__eq_.html
Range connect handler requirementsRange connect handler requirementsHomeLibrariesPeopleFAQMoreRange connect      handler requirements        A range connect handler must meet the requirements for a handler.        A value h of a range connect        handler class should work correctly in the expression h(ec,        ep),        where ec is an lvalue of        type const error_code        and ep is an lvalue of the        type Protocol::endpoint for the Protocol        type in the corresponding async_connect() function.      Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/RangeConnectHandler.html
posix::descriptorposix::descriptorHomeLibrariesPeopleFAQMoreposix::descriptor                      Typedef for the typical usage of posix::basic_descriptor.      typedef basic_descriptor descriptor;        Types                                        Name                                                                Description                                                                rebind_executor                                                                Rebinds the descriptor type to another executor.                                                                bytes_readable                                                                IO control command to get the amount of data that can be read without                  blocking.                                                                executor_type                                                                The type of the executor associated with the object.                                                                lowest_layer_type                                                                A descriptor is always the lowest layer.                                                                native_handle_type                                                                The native representation of a descriptor.                                                                wait_type                                                                Wait types.                                      Member        Functions                                        Name                                                                Description                                                                assign                                                                Assign an existing native descriptor to the descriptor.                                                                async_wait                                                                Asynchronously wait for the descriptor to become ready to read,                  ready to write, or to have pending error conditions.                                                                basic_descriptor [constructor]                                                                Construct a descriptor without opening it.   — Construct                  a descriptor on an existing native descriptor.   — Move-construct                  a descriptor from another.                                                                cancel                                                                Cancel all asynchronous operations associated with the descriptor.                                                                close                                                                Close the descriptor.                                                                get_executor                                                                Get the executor associated with the object.                                                                io_control                                                                Perform an IO control command on the descriptor.                                                                is_open                                                                Determine whether the descriptor is open.                                                                lowest_layer                                                                Get a reference to the lowest layer.   — Get a const                  reference to the lowest layer.                                                                native_handle                                                                Get the native descriptor representation.                                                                native_non_blocking                                                                Gets the non-blocking mode of the native descriptor implementation.                    — Sets the non-blocking mode of the native descriptor                  implementation.                                                                non_blocking                                                                Gets the non-blocking mode of the descriptor.   — Sets                  the non-blocking mode of the descriptor.                                                                operator=                                                                Move-assign a descriptor from another.                                                                release                                                                Release ownership of the native descriptor implementation.                                                                wait                                                                Wait for the descriptor to become ready to read, ready to write,                  or to have pending error conditions.                                      Protected        Member Functions                                        Name                                                                Description                                                                ~basic_descriptor [destructor]                                                                Protected destructor to prevent deletion through this type.                                      The posix::basic_descriptor class template        provides the ability to wrap a POSIX descriptor.              Thread Safety              Distinct objects: Safe.              Shared objects: Unsafe.              Requirements              Header: boost/asio/posix/descriptor.hpp              Convenience header: boost/asio.hpp      Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/posix__descriptor.html
mutable_buffermutable_bufferHomeLibrariesPeopleFAQMoremutable_buffer                      Holds a buffer that can be modified.      class mutable_buffer        Member Functions                                        Name                                                                Description                                                                data                                                                Get a pointer to the beginning of the memory range.                                                                mutable_buffer [constructor]                                                                Construct an empty buffer.   — Construct a buffer to                  represent a given memory range.                                                                operator+=                                                                Move the start of the buffer by the specified number of bytes.                                                                size                                                                Get the size of the memory range.                                      Related Functions                                        Name                                                                Description                                                                operator+                                                                Create a new modifiable buffer that is offset from the start of                  another.                                      The mutable_buffer        class provides a safe representation of a buffer that can be modified. It        does not own the underlying data, and so is cheap to copy or assign.              Accessing        Buffer Contents              The contents of a buffer may be accessed using the data() and size() member functions:      boost::asio::mutable_buffer b1 = ...;std::size_t s1 = b1.size();unsigned char* p1 = static_cast&lt;unsigned char*&gt;(b1.data());        The data()        member function permits violations of type safety, so uses of it in application        code should be carefully considered.              Requirements              Header: boost/asio/buffer.hpp              Convenience header: boost/asio.hpp      Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/mutable_buffer.html
experimental::deferred_sequence::deferred_sequenceexperimental::deferred_sequence::deferred_sequenceHomeLibrariesPeopleFAQMoreexperimental::deferred_sequence::deferred_sequence                  template&lt;    typename H,    typename T&gt;constexpr deferred_sequence(    deferred_init_tag ,    H &amp;&amp; head,    T &amp;&amp; tail);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/experimental__deferred_sequence/deferred_sequence.html
experimental::deferred_sequence::decltypeexperimental::deferred_sequence::decltypeHomeLibrariesPeopleFAQMoreexperimental::deferred_sequence::decltype                  template&lt;    typename CompletionToken&gt;decltype(    auto );Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/experimental__deferred_sequence/decltype.html
buffered_write_stream::close (2 of 2 overloads)buffered_write_stream::close (2 of 2 overloads)HomeLibrariesPeopleFAQMorebuffered_write_stream::close          (2 of 2 overloads)            Close the stream.          void close(    boost::system::error_code &amp; ec);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffered_write_stream/close/overload2.html
buffered_write_stream::close (1 of 2 overloads)buffered_write_stream::close (1 of 2 overloads)HomeLibrariesPeopleFAQMorebuffered_write_stream::close          (1 of 2 overloads)            Close the stream.          void close();Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffered_write_stream/close/overload1.html
buffered_write_stream::lowest_layer_typebuffered_write_stream::lowest_layer_typeHomeLibrariesPeopleFAQMorebuffered_write_stream::lowest_layer_type           The          type of the lowest layer.        typedef next_layer_type::lowest_layer_type lowest_layer_type;          Requirements                  Header: boost/asio/buffered_write_stream.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffered_write_stream/lowest_layer_type.html
buffered_write_stream::buffered_write_stream (2 of 2 overloads)buffered_write_stream::buffered_write_stream (2 of 2 overloads)HomeLibrariesPeopleFAQMorebuffered_write_stream::buffered_write_stream          (2 of 2 overloads)            Construct, passing the specified argument to initialise the next layer.          template&lt;    typename Arg&gt;buffered_write_stream(    Arg &amp; a,    std::size_t buffer_size);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffered_write_stream/buffered_write_stream/overload2.html
buffered_write_stream::buffered_write_stream (1 of 2 overloads)buffered_write_stream::buffered_write_stream (1 of 2 overloads)HomeLibrariesPeopleFAQMorebuffered_write_stream::buffered_write_stream          (1 of 2 overloads)            Construct, passing the specified argument to initialise the next layer.          template&lt;    typename Arg&gt;buffered_write_stream(    Arg &amp; a);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffered_write_stream/buffered_write_stream/overload1.html
buffered_write_stream::buffered_write_streambuffered_write_stream::buffered_write_streamHomeLibrariesPeopleFAQMorebuffered_write_stream::buffered_write_stream           Construct,          passing the specified argument to initialise the next layer.        template&lt;    typename Arg&gt;explicit buffered_write_stream(    Arg &amp; a);  » more...template&lt;    typename Arg&gt;buffered_write_stream(    Arg &amp; a,    std::size_t buffer_size);  » more...Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffered_write_stream/buffered_write_stream.html
buffered_write_stream::in_availbuffered_write_stream::in_availHomeLibrariesPeopleFAQMorebuffered_write_stream::in_avail           Determine          the amount of data that may be read without blocking.        std::size_t in_avail();  » more...std::size_t in_avail(    boost::system::error_code &amp; ec);  » more...Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffered_write_stream/in_avail.html
buffered_write_stream::async_flushbuffered_write_stream::async_flushHomeLibrariesPeopleFAQMorebuffered_write_stream::async_flush           Start          an asynchronous flush.        template&lt;    typename WriteHandler = DEFAULT&gt;DEDUCED async_flush(    WriteHandler &amp;&amp; handler = DEFAULT);          Completion          Signature        void(boost::system::error_code, std::size_t)Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffered_write_stream/async_flush.html
buffered_write_stream::write_some (2 of 2 overloads)buffered_write_stream::write_some (2 of 2 overloads)HomeLibrariesPeopleFAQMorebuffered_write_stream::write_some          (2 of 2 overloads)            Write the given data to the stream. Returns the number of bytes written,            or 0 if an error occurred and the error handler did not throw.          template&lt;    typename ConstBufferSequence&gt;std::size_t write_some(    const ConstBufferSequence &amp; buffers,    boost::system::error_code &amp; ec);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffered_write_stream/write_some/overload2.html
buffered_write_stream::write_some (1 of 2 overloads)buffered_write_stream::write_some (1 of 2 overloads)HomeLibrariesPeopleFAQMorebuffered_write_stream::write_some          (1 of 2 overloads)            Write the given data to the stream. Returns the number of bytes written.            Throws an exception on failure.          template&lt;    typename ConstBufferSequence&gt;std::size_t write_some(    const ConstBufferSequence &amp; buffers);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffered_write_stream/write_some/overload1.html
buffered_write_stream::async_read_somebuffered_write_stream::async_read_someHomeLibrariesPeopleFAQMorebuffered_write_stream::async_read_some           Start          an asynchronous read. The buffer into which the data will be read must          be valid for the lifetime of the asynchronous operation.        template&lt;    typename MutableBufferSequence,    typename ReadHandler = DEFAULT&gt;DEDUCED async_read_some(    const MutableBufferSequence &amp; buffers,    ReadHandler &amp;&amp; handler = DEFAULT);          Completion          Signature        void(boost::system::error_code, std::size_t)Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffered_write_stream/async_read_some.html
buffered_write_stream::lowest_layerbuffered_write_stream::lowest_layerHomeLibrariesPeopleFAQMorebuffered_write_stream::lowest_layer           Get          a reference to the lowest layer.        lowest_layer_type &amp; lowest_layer();  » more...          Get a const reference to the lowest layer.        const lowest_layer_type &amp; lowest_layer() const;  » more...Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffered_write_stream/lowest_layer.html
buffered_write_stream::executor_typebuffered_write_stream::executor_typeHomeLibrariesPeopleFAQMorebuffered_write_stream::executor_type           The          type of the executor associated with the object.        typedef lowest_layer_type::executor_type executor_type;          Requirements                  Header: boost/asio/buffered_write_stream.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffered_write_stream/executor_type.html
buffered_write_stream::read_somebuffered_write_stream::read_someHomeLibrariesPeopleFAQMorebuffered_write_stream::read_some           Read          some data from the stream. Returns the number of bytes read. Throws an          exception on failure.        template&lt;    typename MutableBufferSequence&gt;std::size_t read_some(    const MutableBufferSequence &amp; buffers);  » more...          Read some data from the stream. Returns the number of bytes read or 0 if          an error occurred.        template&lt;    typename MutableBufferSequence&gt;std::size_t read_some(    const MutableBufferSequence &amp; buffers,    boost::system::error_code &amp; ec);  » more...Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffered_write_stream/read_some.html
buffered_write_stream::read_some (2 of 2 overloads)buffered_write_stream::read_some (2 of 2 overloads)HomeLibrariesPeopleFAQMorebuffered_write_stream::read_some          (2 of 2 overloads)            Read some data from the stream. Returns the number of bytes read or 0            if an error occurred.          template&lt;    typename MutableBufferSequence&gt;std::size_t read_some(    const MutableBufferSequence &amp; buffers,    boost::system::error_code &amp; ec);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffered_write_stream/read_some/overload2.html
buffered_write_stream::read_some (1 of 2 overloads)buffered_write_stream::read_some (1 of 2 overloads)HomeLibrariesPeopleFAQMorebuffered_write_stream::read_some          (1 of 2 overloads)            Read some data from the stream. Returns the number of bytes read. Throws            an exception on failure.          template&lt;    typename MutableBufferSequence&gt;std::size_t read_some(    const MutableBufferSequence &amp; buffers);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffered_write_stream/read_some/overload1.html
buffered_write_stream::flushbuffered_write_stream::flushHomeLibrariesPeopleFAQMorebuffered_write_stream::flush           Flush          all data from the buffer to the next layer. Returns the number of bytes          written to the next layer on the last write operation. Throws an exception          on failure.        std::size_t flush();  » more...          Flush all data from the buffer to the next layer. Returns the number of          bytes written to the next layer on the last write operation, or 0 if an          error occurred.        std::size_t flush(    boost::system::error_code &amp; ec);  » more...Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffered_write_stream/flush.html
buffered_write_stream::async_write_somebuffered_write_stream::async_write_someHomeLibrariesPeopleFAQMorebuffered_write_stream::async_write_some           Start          an asynchronous write. The data being written must be valid for the lifetime          of the asynchronous operation.        template&lt;    typename ConstBufferSequence,    typename WriteHandler = DEFAULT&gt;DEDUCED async_write_some(    const ConstBufferSequence &amp; buffers,    WriteHandler &amp;&amp; handler = DEFAULT);          Completion          Signature        void(boost::system::error_code, std::size_t)Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffered_write_stream/async_write_some.html
buffered_write_stream::default_buffer_sizebuffered_write_stream::default_buffer_sizeHomeLibrariesPeopleFAQMorebuffered_write_stream::default_buffer_size           The          default buffer size.        static const std::size_t default_buffer_size = implementation_defined;Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffered_write_stream/default_buffer_size.html
buffered_write_stream::next_layerbuffered_write_stream::next_layerHomeLibrariesPeopleFAQMorebuffered_write_stream::next_layer           Get          a reference to the next layer.        next_layer_type &amp; next_layer();Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffered_write_stream/next_layer.html
buffered_write_stream::peek (2 of 2 overloads)buffered_write_stream::peek (2 of 2 overloads)HomeLibrariesPeopleFAQMorebuffered_write_stream::peek          (2 of 2 overloads)            Peek at the incoming data on the stream. Returns the number of bytes            read, or 0 if an error occurred.          template&lt;    typename MutableBufferSequence&gt;std::size_t peek(    const MutableBufferSequence &amp; buffers,    boost::system::error_code &amp; ec);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffered_write_stream/peek/overload2.html
buffered_write_stream::peek (1 of 2 overloads)buffered_write_stream::peek (1 of 2 overloads)HomeLibrariesPeopleFAQMorebuffered_write_stream::peek          (1 of 2 overloads)            Peek at the incoming data on the stream. Returns the number of bytes            read. Throws an exception on failure.          template&lt;    typename MutableBufferSequence&gt;std::size_t peek(    const MutableBufferSequence &amp; buffers);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffered_write_stream/peek/overload1.html
buffered_write_stream::write_somebuffered_write_stream::write_someHomeLibrariesPeopleFAQMorebuffered_write_stream::write_some           Write          the given data to the stream. Returns the number of bytes written. Throws          an exception on failure.        template&lt;    typename ConstBufferSequence&gt;std::size_t write_some(    const ConstBufferSequence &amp; buffers);  » more...          Write the given data to the stream. Returns the number of bytes written,          or 0 if an error occurred and the error handler did not throw.        template&lt;    typename ConstBufferSequence&gt;std::size_t write_some(    const ConstBufferSequence &amp; buffers,    boost::system::error_code &amp; ec);  » more...Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffered_write_stream/write_some.html
buffered_write_stream::flush (2 of 2 overloads)buffered_write_stream::flush (2 of 2 overloads)HomeLibrariesPeopleFAQMorebuffered_write_stream::flush          (2 of 2 overloads)            Flush all data from the buffer to the next layer. Returns the number            of bytes written to the next layer on the last write operation, or 0            if an error occurred.          std::size_t flush(    boost::system::error_code &amp; ec);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffered_write_stream/flush/overload2.html
buffered_write_stream::flush (1 of 2 overloads)buffered_write_stream::flush (1 of 2 overloads)HomeLibrariesPeopleFAQMorebuffered_write_stream::flush          (1 of 2 overloads)            Flush all data from the buffer to the next layer. Returns the number            of bytes written to the next layer on the last write operation. Throws            an exception on failure.          std::size_t flush();Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffered_write_stream/flush/overload1.html
buffered_write_stream::get_executorbuffered_write_stream::get_executorHomeLibrariesPeopleFAQMorebuffered_write_stream::get_executor           Get          the executor associated with the object.        executor_type get_executor();Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffered_write_stream/get_executor.html
buffered_write_stream::next_layer_typebuffered_write_stream::next_layer_typeHomeLibrariesPeopleFAQMorebuffered_write_stream::next_layer_type           The          type of the next layer.        typedef remove_reference&lt; Stream &gt;::type next_layer_type;          Requirements                  Header: boost/asio/buffered_write_stream.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffered_write_stream/next_layer_type.html
buffered_write_stream::closebuffered_write_stream::closeHomeLibrariesPeopleFAQMorebuffered_write_stream::close           Close          the stream.        void close();  » more...void close(    boost::system::error_code &amp; ec);  » more...Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffered_write_stream/close.html
buffered_write_stream::lowest_layer (2 of 2 overloads)buffered_write_stream::lowest_layer (2 of 2 overloads)HomeLibrariesPeopleFAQMorebuffered_write_stream::lowest_layer          (2 of 2 overloads)            Get a const reference to the lowest layer.          const lowest_layer_type &amp; lowest_layer() const;Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffered_write_stream/lowest_layer/overload2.html
buffered_write_stream::lowest_layer (1 of 2 overloads)buffered_write_stream::lowest_layer (1 of 2 overloads)HomeLibrariesPeopleFAQMorebuffered_write_stream::lowest_layer          (1 of 2 overloads)            Get a reference to the lowest layer.          lowest_layer_type &amp; lowest_layer();Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffered_write_stream/lowest_layer/overload1.html
buffered_write_stream::in_avail (2 of 2 overloads)buffered_write_stream::in_avail (2 of 2 overloads)HomeLibrariesPeopleFAQMorebuffered_write_stream::in_avail          (2 of 2 overloads)            Determine the amount of data that may be read without blocking.          std::size_t in_avail(    boost::system::error_code &amp; ec);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffered_write_stream/in_avail/overload2.html
buffered_write_stream::in_avail (1 of 2 overloads)buffered_write_stream::in_avail (1 of 2 overloads)HomeLibrariesPeopleFAQMorebuffered_write_stream::in_avail          (1 of 2 overloads)            Determine the amount of data that may be read without blocking.          std::size_t in_avail();Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffered_write_stream/in_avail/overload1.html
buffered_write_stream::peekbuffered_write_stream::peekHomeLibrariesPeopleFAQMorebuffered_write_stream::peek           Peek          at the incoming data on the stream. Returns the number of bytes read. Throws          an exception on failure.        template&lt;    typename MutableBufferSequence&gt;std::size_t peek(    const MutableBufferSequence &amp; buffers);  » more...          Peek at the incoming data on the stream. Returns the number of bytes read,          or 0 if an error occurred.        template&lt;    typename MutableBufferSequence&gt;std::size_t peek(    const MutableBufferSequence &amp; buffers,    boost::system::error_code &amp; ec);  » more...Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/buffered_write_stream/peek.html
is_nothrow_require_conceptis_nothrow_require_conceptHomeLibrariesPeopleFAQMoreis_nothrow_require_concept                      A type trait that determines whether a require_concept        expression will not throw.      template&lt;    typename T,    typename Property&gt;struct is_nothrow_require_concept        Class template is_nothrow_require_concept        is a trait that is derived from true_type        if the expression boost::asio::require_concept(std::declval&lt;T&gt;(),        std::declval&lt;Property&gt;())        is noexcept; otherwise false_type.              Requirements              Header: boost/asio/require_concept.hpp              Convenience header: boost/asio.hpp      Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/is_nothrow_require_concept.html
associated_executor&lt; reference_wrapper&lt; T &gt;, Executor &gt;::typeassociated_executor&lt; reference_wrapper&lt; T &gt;, Executor &gt;::typeHomeLibrariesPeopleFAQMoreassociated_executor&lt;        reference_wrapper&lt; T &gt;, Executor &gt;::type           Forwards type          to the associator specialisation for the unwrapped type T.        typedef associated_executor&lt; T, Executor &gt;::type type;          Types                                              Name                                                                        Description                                                                        type                                                                        If T has a nested type executor_type, T::executor_type. Otherwise                    Executor.                                            Member          Functions                                              Name                                                                        Description                                                                        get [static]                                                                        If T has a nested type executor_type, returns t.get_executor().                    Otherwise returns ex.                                            A program may specialise this traits type if the T          template parameter in the specialisation is a user-defined type. The template          parameter Executor shall          be a type meeting the Executor requirements.                  Specialisations shall meet the following requirements, where t is a const reference to an object of          type T, and e is an object of type Executor.                      Provide a nested typedef type              that identifies a type meeting the Executor requirements.                          Provide a noexcept static member function named get,              callable as get(t)              and with return type type.                          Provide a noexcept static member function named get,              callable as get(t,e)              and with return type type.                      Requirements                  Header: boost/asio/associated_executor.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/associated_executor_lt__reference_wrapper_lt__T__gt__comma__Executor__gt_/type.html
associated_executor&lt; reference_wrapper&lt; T &gt;, Executor &gt;::getassociated_executor&lt; reference_wrapper&lt; T &gt;, Executor &gt;::getHomeLibrariesPeopleFAQMoreassociated_executor&lt;        reference_wrapper&lt; T &gt;, Executor &gt;::get           Forwards the request to get          the executor to the associator specialisation for the unwrapped type T.        static type get(    reference_wrapper&lt; T &gt; t,    const Executor &amp; ex = Executor());Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/associated_executor_lt__reference_wrapper_lt__T__gt__comma__Executor__gt_/get.html
is_applicable_propertyis_applicable_propertyHomeLibrariesPeopleFAQMoreis_applicable_property              template&lt;    typename T,    typename Property,    typename  = void&gt;struct is_applicable_property        Requirements              Header: boost/asio/is_applicable_property.hpp              Convenience header: boost/asio.hpp      Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/is_applicable_property.html
connect_pipe (2 of 2 overloads)connect_pipe (2 of 2 overloads)HomeLibrariesPeopleFAQMoreconnect_pipe        (2 of 2 overloads)          Connect two pipe ends using an anonymous pipe.        template&lt;    typename Executor1,    typename Executor2&gt;void connect_pipe(    basic_readable_pipe&lt; Executor1 &gt; &amp; read_end,    basic_writable_pipe&lt; Executor2 &gt; &amp; write_end,    boost::system::error_code &amp; ec);          Parameters        read_end                The read end of the pipe.              write_end                The write end of the pipe.                        Exceptions        boost::system::system_error                Thrown on failure.                        Parameters        ec                Set to indicate what error occurred, if any.              Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/connect_pipe/overload2.html
connect_pipe (1 of 2 overloads)connect_pipe (1 of 2 overloads)HomeLibrariesPeopleFAQMoreconnect_pipe        (1 of 2 overloads)          Connect two pipe ends using an anonymous pipe.        template&lt;    typename Executor1,    typename Executor2&gt;void connect_pipe(    basic_readable_pipe&lt; Executor1 &gt; &amp; read_end,    basic_writable_pipe&lt; Executor2 &gt; &amp; write_end);          Parameters        read_end                The read end of the pipe.              write_end                The write end of the pipe.                        Exceptions        boost::system::system_error                Thrown on failure.              Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/connect_pipe/overload1.html
Proto-allocator requirementsProto-allocator requirementsHomeLibrariesPeopleFAQMoreProto-allocator      requirements        A type A meets the proto-allocator        requirements if A is CopyConstructible (C++Std [copyconstructible]),        Destructible (C++Std [destructible]),        and allocator_traits&lt;A&gt;::rebind_alloc&lt;U&gt; meets        the allocator requirements (C++Std [allocator.requirements]), where U is an object type. [Note:        For example, std::allocator&lt;void&gt; meets        the proto-allocator requirements but not the allocator requirements. —end        note] No constructor, comparison operator, copy operation, move        operation, or swap operation on these types shall exit via an exception.      Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/ProtoAllocator.html
local::connect_pairlocal::connect_pairHomeLibrariesPeopleFAQMorelocal::connect_pair                      Create a pair of connected sockets.      template&lt;    typename Protocol,    typename Executor1,    typename Executor2&gt;void connect_pair(    basic_socket&lt; Protocol, Executor1 &gt; &amp; socket1,    basic_socket&lt; Protocol, Executor2 &gt; &amp; socket2);  » more...template&lt;    typename Protocol,    typename Executor1,    typename Executor2&gt;void connect_pair(    basic_socket&lt; Protocol, Executor1 &gt; &amp; socket1,    basic_socket&lt; Protocol, Executor2 &gt; &amp; socket2,    boost::system::error_code &amp; ec);  » more...        Requirements              Header: boost/asio/local/connect_pair.hpp              Convenience header: boost/asio.hpp      Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/local__connect_pair.html
readable_pipereadable_pipeHomeLibrariesPeopleFAQMorereadable_pipe                      Typedef for the typical usage of a readable pipe.      typedef basic_readable_pipe readable_pipe;        Types                                        Name                                                                Description                                                                rebind_executor                                                                Rebinds the pipe type to another executor.                                                                executor_type                                                                The type of the executor associated with the object.                                                                lowest_layer_type                                                                A basic_readable_pipe is always the lowest layer.                                                                native_handle_type                                                                The native representation of a pipe.                                      Member        Functions                                        Name                                                                Description                                                                assign                                                                Assign an existing native pipe to the pipe.                                                                async_read_some                                                                Start an asynchronous read.                                                                basic_readable_pipe [constructor]                                                                Construct a basic_readable_pipe without opening it.   —                  Construct a basic_readable_pipe on an existing native pipe.                    — Move-construct a basic_readable_pipe from another.                                                                cancel                                                                Cancel all asynchronous operations associated with the pipe.                                                                close                                                                Close the pipe.                                                                get_executor                                                                Get the executor associated with the object.                                                                is_open                                                                Determine whether the pipe is open.                                                                lowest_layer                                                                Get a reference to the lowest layer.   — Get a const                  reference to the lowest layer.                                                                native_handle                                                                Get the native pipe representation.                                                                operator=                                                                Move-assign a basic_readable_pipe from another.                                                                read_some                                                                Read some data from the pipe.                                                                ~basic_readable_pipe [destructor]                                                                Destroys the pipe.                                      The basic_readable_pipe class provides        a wrapper over pipe functionality.              Thread        Safety              Distinct objects: Safe.              Shared objects: Unsafe.              Requirements              Header: boost/asio/readable_pipe.hpp              Convenience header: boost/asio.hpp      Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/readable_pipe.html
execution::context_texecution::context_tHomeLibrariesPeopleFAQMoreexecution::context_t                      A property that is used to obtain the execution context that is associated        with an executor.      struct context_t        Types                                        Name                                                                Description                                                                polymorphic_query_result_type                                                                The type returned by queries against an any_executor.                                      Data Members                                        Name                                                                Description                                                                is_applicable_property_v [static]                                                                The context_t property applies to executors, senders, and schedulers.                                                                is_preferable [static]                                                                The context_t property cannot be preferred.                                                                is_requirable [static]                                                                The context_t property cannot be required.                                      Requirements              Header: boost/asio/execution/context.hpp              Convenience header: boost/asio/execution.hpp      Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/execution__context_t.html
bind_allocatorbind_allocatorHomeLibrariesPeopleFAQMorebind_allocator                      Associate an object of type T        with an allocator of type Allocator.      template&lt;    typename Allocator,    typename T&gt;allocator_binder&lt; typename decay&lt; T &gt;::type, Allocator &gt; bind_allocator(    const Allocator &amp; s,    T &amp;&amp; t);        Requirements              Header: boost/asio/bind_allocator.hpp              Convenience header: boost/asio.hpp      Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/bind_allocator.html
windows::basic_stream_handle::rebind_executorwindows::basic_stream_handle::rebind_executorHomeLibrariesPeopleFAQMorewindows::basic_stream_handle::rebind_executor                      Rebinds the handle type to another executor.      template&lt;    typename Executor1&gt;struct rebind_executor        Types                                        Name                                                                Description                                                                other                                                                The handle type when rebound to the specified executor.                                      Requirements              Header: boost/asio/windows/basic_stream_handle.hpp              Convenience header: boost/asio.hpp      Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/windows__basic_stream_handle__rebind_executor.html
any_io_executorany_io_executorHomeLibrariesPeopleFAQMoreany_io_executor                      Polymorphic executor type for use with I/O objects.      class any_io_executor :  public execution::any_executor&lt; SupportableProperties &gt;        Member Functions                                        Name                                                                Description                                                                any_io_executor [constructor]                                                                Default constructor.   — Construct in an empty state.                  Equivalent effects to default constructor.   — Copy constructor.                    — Move constructor.   — Construct to point                  to the same target as another any_executor.   — Construct                  a polymorphic wrapper for the specified executor.                                                                context                                                                Obtain the underlying execution context.                                                                execute                                                                Execute the function on the target executor.                                                                operator bool                                                                Determine whether the wrapper has a target executor.                                                                operator=                                                                Assignment operator.   — Move assignment operator.                    — Assignment operator that sets the polymorphic wrapper to                  the empty state.                                                                prefer                                                                Obtain a polymorphic wrapper with the specified property.                                                                query                                                                Obtain the value associated with the specified property.                                                                require                                                                Obtain a polymorphic wrapper with the specified property.                    —                                                                swap                                                                Swap targets with another polymorphic wrapper.                                                                target                                                                Get a pointer to the target executor.                                                                target_type                                                                Get the type of the target executor.                                                                ~any_io_executor [destructor]                                                                Destructor.                                      Related        Functions                                        Name                                                                Description                                                                operator!=                                                                Inequality operator.                                                                operator==                                                                Equality operator.                                      The any_io_executor type        is a polymorphic executor that supports the set of properties required by        I/O objects. It is defined as the execution::any_executor class template parameterised        as follows:      execution::any_executor&lt;  execution::context_as_t&lt;execution_context&amp;&gt;,  execution::blocking_t::never_t,  execution::prefer_only&lt;execution::blocking_t::possibly_t&gt;,  execution::prefer_only&lt;execution::outstanding_work_t::tracked_t&gt;,  execution::prefer_only&lt;execution::outstanding_work_t::untracked_t&gt;,  execution::prefer_only&lt;execution::relationship_t::fork_t&gt;,  execution::prefer_only&lt;execution::relationship_t::continuation_t&gt;&gt;        Requirements              Header: boost/asio/any_io_executor.hpp              Convenience header: boost/asio.hpp      Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/any_io_executor.html
execution::can_connectexecution::can_connectHomeLibrariesPeopleFAQMoreexecution::can_connect                      A type trait that determines whether a connect        expression is well-formed.      template&lt;    typename S,    typename R&gt;struct can_connect        Class template can_connect        is a trait that is derived from true_type        if the expression execution::connect(std::declval&lt;S&gt;(), std::declval&lt;R&gt;())        is well formed; otherwise false_type.              Requirements              Header: boost/asio/execution/connect.hpp              Convenience header: boost/asio/execution.hpp      Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/execution__can_connect.html
ip::tcp::v4ip::tcp::v4HomeLibrariesPeopleFAQMoreip::tcp::v4           Construct to represent the IPv4          TCP protocol.        static tcp v4();Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/ip__tcp/v4.html
ip::tcp::familyip::tcp::familyHomeLibrariesPeopleFAQMoreip::tcp::family           Obtain an identifier for          the protocol family.        int family() const;Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/ip__tcp/family.html
ip::tcp::v6ip::tcp::v6HomeLibrariesPeopleFAQMoreip::tcp::v6           Construct to represent the IPv6          TCP protocol.        static tcp v6();Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/ip__tcp/v6.html
ip::tcp::acceptorip::tcp::acceptorHomeLibrariesPeopleFAQMoreip::tcp::acceptor           The TCP acceptor type.        typedef basic_socket_acceptor&lt; tcp &gt; acceptor;          Types                                              Name                                                                        Description                                                                        rebind_executor                                                                        Rebinds the acceptor type to another executor.                                                                        broadcast                                                                        Socket option to permit sending of broadcast messages.                                                                        bytes_readable                                                                        IO control command to get the amount of data that can be read                    without blocking.                                                                        debug                                                                        Socket option to enable socket-level debugging.                                                                        do_not_route                                                                        Socket option to prevent routing, use local interfaces only.                                                                        enable_connection_aborted                                                                        Socket option to report aborted connections on accept.                                                                        endpoint_type                                                                        The endpoint type.                                                                        executor_type                                                                        The type of the executor associated with the object.                                                                        keep_alive                                                                        Socket option to send keep-alives.                                                                        linger                                                                        Socket option to specify whether the socket lingers on close                    if unsent data is present.                                                                        message_flags                                                                        Bitmask type for flags that can be passed to send and receive                    operations.                                                                        native_handle_type                                                                        The native representation of an acceptor.                                                                        out_of_band_inline                                                                        Socket option for putting received out-of-band data inline.                                                                        protocol_type                                                                        The protocol type.                                                                        receive_buffer_size                                                                        Socket option for the receive buffer size of a socket.                                                                        receive_low_watermark                                                                        Socket option for the receive low watermark.                                                                        reuse_address                                                                        Socket option to allow the socket to be bound to an address that                    is already in use.                                                                        send_buffer_size                                                                        Socket option for the send buffer size of a socket.                                                                        send_low_watermark                                                                        Socket option for the send low watermark.                                                                        shutdown_type                                                                        Different ways a socket may be shutdown.                                                                        wait_type                                                                        Wait types.                                            Member          Functions                                              Name                                                                        Description                                                                        accept                                                                        Accept a new connection.   — Accept a new connection                    and obtain the endpoint of the peer.                                                                        assign                                                                        Assigns an existing native acceptor to the acceptor.                                                                        async_accept                                                                        Start an asynchronous accept.                                                                        async_wait                                                                        Asynchronously wait for the acceptor to become ready to read,                    ready to write, or to have pending error conditions.                                                                        basic_socket_acceptor [constructor]                                                                        Construct an acceptor without opening it.   — Construct                    an open acceptor.   — Construct an acceptor opened                    on the given endpoint.   — Construct a basic_socket_acceptor                    on an existing native acceptor.   — Move-construct                    a basic_socket_acceptor from another.   — Move-construct                    a basic_socket_acceptor from an acceptor of another protocol                    type.                                                                        bind                                                                        Bind the acceptor to the given local endpoint.                                                                        cancel                                                                        Cancel all asynchronous operations associated with the acceptor.                                                                        close                                                                        Close the acceptor.                                                                        get_executor                                                                        Get the executor associated with the object.                                                                        get_option                                                                        Get an option from the acceptor.                                                                        io_control                                                                        Perform an IO control command on the acceptor.                                                                        is_open                                                                        Determine whether the acceptor is open.                                                                        listen                                                                        Place the acceptor into the state where it will listen for new                    connections.                                                                        local_endpoint                                                                        Get the local endpoint of the acceptor.                                                                        native_handle                                                                        Get the native acceptor representation.                                                                        native_non_blocking                                                                        Gets the non-blocking mode of the native acceptor implementation.                      — Sets the non-blocking mode of the native acceptor                    implementation.                                                                        non_blocking                                                                        Gets the non-blocking mode of the acceptor.   — Sets                    the non-blocking mode of the acceptor.                                                                        open                                                                        Open the acceptor using the specified protocol.                                                                        operator=                                                                        Move-assign a basic_socket_acceptor from another.   —                    Move-assign a basic_socket_acceptor from an acceptor of another                    protocol type.                                                                        release                                                                        Release ownership of the underlying native acceptor.                                                                        set_option                                                                        Set an option on the acceptor.                                                                        wait                                                                        Wait for the acceptor to become ready to read, ready to write,                    or to have pending error conditions.                                                                        ~basic_socket_acceptor [destructor]                                                                        Destroys the acceptor.                                            Data Members                                              Name                                                                        Description                                                                        max_connections [static]                                                                        (Deprecated: Use max_listen_connections.) The maximum length                    of the queue of pending incoming connections.                                                                        max_listen_connections [static]                                                                        The maximum length of the queue of pending incoming connections.                                                                        message_do_not_route [static]                                                                        Specify that the data should not be subject to routing.                                                                        message_end_of_record [static]                                                                        Specifies that the data marks the end of a record.                                                                        message_out_of_band [static]                                                                        Process out-of-band data.                                                                        message_peek [static]                                                                        Peek at incoming data without removing it from the input queue.                                            The basic_socket_acceptor class template          is used for accepting new socket connections.                  Thread Safety                  Distinct objects: Safe.                  Shared objects: Unsafe.                  Synchronous accept operations          are thread safe, if the underlying operating system calls are also thread          safe. This means that it is permitted to perform concurrent calls to synchronous          accept operations on a          single socket object. Other synchronous operations, such as open or close,          are not thread safe.                  Example                  Opening a socket acceptor with the SO_REUSEADDR option enabled:        boost::asio::ip::tcp::acceptor acceptor(my_context);boost::asio::ip::tcp::endpoint endpoint(boost::asio::ip::tcp::v4(), port);acceptor.open(endpoint.protocol());acceptor.set_option(boost::asio::ip::tcp::acceptor::reuse_address(true));acceptor.bind(endpoint);acceptor.listen();          Requirements                  Header: boost/asio/ip/tcp.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/ip__tcp/acceptor.html
ip::tcp::endpointip::tcp::endpointHomeLibrariesPeopleFAQMoreip::tcp::endpoint           The type of a TCP endpoint.        typedef basic_endpoint&lt; tcp &gt; endpoint;          Types                                              Name                                                                        Description                                                                        data_type                                                                        The type of the endpoint structure. This type is dependent on                    the underlying implementation of the socket layer.                                                                        protocol_type                                                                        The protocol type associated with the endpoint.                                            Member          Functions                                              Name                                                                        Description                                                                        address                                                                        Get the IP address associated with the endpoint.   —                    Set the IP address associated with the endpoint.                                                                        basic_endpoint [constructor]                                                                        Default constructor.   — Construct an endpoint using                    a port number, specified in the host's byte order. The IP address                    will be the any address (i.e. INADDR_ANY or in6addr_any). This                    constructor would typically be used for accepting new connections.                      — Construct an endpoint using a port number and an                    IP address. This constructor may be used for accepting connections                    on a specific interface or for making a connection to a remote                    endpoint.   — Copy constructor.   — Move                    constructor.                                                                        capacity                                                                        Get the capacity of the endpoint in the native type.                                                                        data                                                                        Get the underlying endpoint in the native type.                                                                        operator=                                                                        Assign from another endpoint.   — Move-assign from                    another endpoint.                                                                        port                                                                        Get the port associated with the endpoint. The port number is                    always in the host's byte order.   — Set the port associated                    with the endpoint. The port number is always in the host's byte                    order.                                                                        protocol                                                                        The protocol associated with the endpoint.                                                                        resize                                                                        Set the underlying size of the endpoint in the native type.                                                                        size                                                                        Get the underlying size of the endpoint in the native type.                                            Friends                                              Name                                                                        Description                                                                        operator!=                                                                        Compare two endpoints for inequality.                                                                        operator&lt;                                                                        Compare endpoints for ordering.                                                                        operator&lt;=                                                                        Compare endpoints for ordering.                                                                        operator==                                                                        Compare two endpoints for equality.                                                                        operator&gt;                                                                        Compare endpoints for ordering.                                                                        operator&gt;=                                                                        Compare endpoints for ordering.                                            Related          Functions                                              Name                                                                        Description                                                                        operator&lt;&lt;                                                                        Output an endpoint as a string.                                            The ip::basic_endpoint class template          describes an endpoint that may be associated with a particular socket.                  Thread Safety                  Distinct objects: Safe.                  Shared objects: Unsafe.                  Requirements                  Header: boost/asio/ip/tcp.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/ip__tcp/endpoint.html
ip::tcp::typeip::tcp::typeHomeLibrariesPeopleFAQMoreip::tcp::type           Obtain an identifier for the          type of the protocol.        int type() const;Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/ip__tcp/type.html
ip::tcp::iostreamip::tcp::iostreamHomeLibrariesPeopleFAQMoreip::tcp::iostream           The TCP iostream type.        typedef basic_socket_iostream&lt; tcp &gt; iostream;          Types                                              Name                                                                        Description                                                                        clock_type                                                                        The clock type.                                                                        duration                                                                        The duration type.                                                                        duration_type                                                                        (Deprecated: Use duration.) The duration type.                                                                        endpoint_type                                                                        The endpoint type.                                                                        protocol_type                                                                        The protocol type.                                                                        time_point                                                                        The time type.                                                                        time_type                                                                        (Deprecated: Use time_point.) The time type.                                            Member          Functions                                              Name                                                                        Description                                                                        basic_socket_iostream [constructor]                                                                        Construct a basic_socket_iostream without establishing a connection.                      — Construct a basic_socket_iostream from the supplied                    socket.   — Move-construct a basic_socket_iostream                    from another.   — Establish a connection to an endpoint                    corresponding to a resolver query.                                                                        close                                                                        Close the connection.                                                                        connect                                                                        Establish a connection to an endpoint corresponding to a resolver                    query.                                                                        error                                                                        Get the last error associated with the stream.                                                                        expires_after                                                                        Set the stream's expiry time relative to now.                                                                        expires_at                                                                        (Deprecated: Use expiry().) Get the stream's expiry time as an                    absolute time.   — Set the stream's expiry time as                    an absolute time.                                                                        expires_from_now                                                                        (Deprecated: Use expiry().) Get the stream's expiry time relative                    to now.   — (Deprecated: Use expires_after().) Set                    the stream's expiry time relative to now.                                                                        expiry                                                                        Get the stream's expiry time as an absolute time.                                                                        operator=                                                                        Move-assign a basic_socket_iostream from another.                                                                        rdbuf                                                                        Return a pointer to the underlying streambuf.                                                                        socket                                                                        Get a reference to the underlying socket.                                            Requirements                  Header: boost/asio/ip/tcp.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/ip__tcp/iostream.html
ip::tcp::resolverip::tcp::resolverHomeLibrariesPeopleFAQMoreip::tcp::resolver           The TCP resolver type.        typedef basic_resolver&lt; tcp &gt; resolver;          Types                                              Name                                                                        Description                                                                        rebind_executor                                                                        Rebinds the resolver type to another executor.                                                                        endpoint_type                                                                        The endpoint type.                                                                        executor_type                                                                        The type of the executor associated with the object.                                                                        flags                                                                        A bitmask type (C++ Std [lib.bitmask.types]).                                                                        iterator                                                                        (Deprecated.) The iterator type.                                                                        protocol_type                                                                        The protocol type.                                                                        query                                                                        (Deprecated.) The query type.                                                                        results_type                                                                        The results type.                                            Member          Functions                                              Name                                                                        Description                                                                        async_resolve                                                                        (Deprecated: Use overload with separate host and service parameters.)                    Asynchronously perform forward resolution of a query to a list                    of entries.   — Asynchronously perform forward resolution                    of a query to a list of entries.   — Asynchronously                    perform reverse resolution of an endpoint to a list of entries.                                                                        basic_resolver [constructor]                                                                        Construct with executor.   — Construct with execution                    context.   — Move-construct a basic_resolver from another.                                                                        cancel                                                                        Cancel any asynchronous operations that are waiting on the resolver.                                                                        get_executor                                                                        Get the executor associated with the object.                                                                        operator=                                                                        Move-assign a basic_resolver from another.                                                                        resolve                                                                        (Deprecated: Use overload with separate host and service parameters.)                    Perform forward resolution of a query to a list of entries.                      — Perform forward resolution of a query to a list                    of entries.   — Perform reverse resolution of an endpoint                    to a list of entries.                                                                        ~basic_resolver [destructor]                                                                        Destroys the resolver.                                            Data Members                                              Name                                                                        Description                                                                        address_configured [static]                                                                        Only return IPv4 addresses if a non-loopback IPv4 address is                    configured for the system. Only return IPv6 addresses if a non-loopback                    IPv6 address is configured for the system.                                                                        all_matching [static]                                                                        If used with v4_mapped, return all matching IPv6 and IPv4 addresses.                                                                        canonical_name [static]                                                                        Determine the canonical name of the host specified in the query.                                                                        numeric_host [static]                                                                        Host name should be treated as a numeric string defining an IPv4                    or IPv6 address and no name resolution should be attempted.                                                                        numeric_service [static]                                                                        Service name should be treated as a numeric string defining a                    port number and no name resolution should be attempted.                                                                        passive [static]                                                                        Indicate that returned endpoint is intended for use as a locally                    bound socket endpoint.                                                                        v4_mapped [static]                                                                        If the query protocol family is specified as IPv6, return IPv4-mapped                    IPv6 addresses on finding no IPv6 addresses.                                            The ip::basic_resolver class template          provides the ability to resolve a query to a list of endpoints.                  Thread Safety                  Distinct objects: Safe.                  Shared objects: Unsafe.                  Requirements                  Header: boost/asio/ip/tcp.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/ip__tcp/resolver.html
ip::tcp::operator!=ip::tcp::operator!=HomeLibrariesPeopleFAQMoreip::tcp::operator!=           Compare          two protocols for inequality.        friend bool operator!=(    const tcp &amp; p1,    const tcp &amp; p2);          Requirements                  Header: boost/asio/ip/tcp.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/ip__tcp/operator_not__eq_.html
ip::tcp::socketip::tcp::socketHomeLibrariesPeopleFAQMoreip::tcp::socket           The TCP socket type.        typedef basic_stream_socket&lt; tcp &gt; socket;          Types                                              Name                                                                        Description                                                                        rebind_executor                                                                        Rebinds the socket type to another executor.                                                                        broadcast                                                                        Socket option to permit sending of broadcast messages.                                                                        bytes_readable                                                                        IO control command to get the amount of data that can be read                    without blocking.                                                                        debug                                                                        Socket option to enable socket-level debugging.                                                                        do_not_route                                                                        Socket option to prevent routing, use local interfaces only.                                                                        enable_connection_aborted                                                                        Socket option to report aborted connections on accept.                                                                        endpoint_type                                                                        The endpoint type.                                                                        executor_type                                                                        The type of the executor associated with the object.                                                                        keep_alive                                                                        Socket option to send keep-alives.                                                                        linger                                                                        Socket option to specify whether the socket lingers on close                    if unsent data is present.                                                                        lowest_layer_type                                                                        A basic_socket is always the lowest layer.                                                                        message_flags                                                                        Bitmask type for flags that can be passed to send and receive                    operations.                                                                        native_handle_type                                                                        The native representation of a socket.                                                                        out_of_band_inline                                                                        Socket option for putting received out-of-band data inline.                                                                        protocol_type                                                                        The protocol type.                                                                        receive_buffer_size                                                                        Socket option for the receive buffer size of a socket.                                                                        receive_low_watermark                                                                        Socket option for the receive low watermark.                                                                        reuse_address                                                                        Socket option to allow the socket to be bound to an address that                    is already in use.                                                                        send_buffer_size                                                                        Socket option for the send buffer size of a socket.                                                                        send_low_watermark                                                                        Socket option for the send low watermark.                                                                        shutdown_type                                                                        Different ways a socket may be shutdown.                                                                        wait_type                                                                        Wait types.                                            Member Functions                                              Name                                                                        Description                                                                        assign                                                                        Assign an existing native socket to the socket.                                                                        async_connect                                                                        Start an asynchronous connect.                                                                        async_read_some                                                                        Start an asynchronous read.                                                                        async_receive                                                                        Start an asynchronous receive.                                                                        async_send                                                                        Start an asynchronous send.                                                                        async_wait                                                                        Asynchronously wait for the socket to become ready to read, ready                    to write, or to have pending error conditions.                                                                        async_write_some                                                                        Start an asynchronous write.                                                                        at_mark                                                                        Determine whether the socket is at the out-of-band data mark.                                                                        available                                                                        Determine the number of bytes available for reading.                                                                        basic_stream_socket [constructor]                                                                        Construct a basic_stream_socket without opening it.   —                    Construct and open a basic_stream_socket.   — Construct                    a basic_stream_socket, opening it and binding it to the given                    local endpoint.   — Construct a basic_stream_socket                    on an existing native socket.   — Move-construct a                    basic_stream_socket from another.   — Move-construct                    a basic_stream_socket from a socket of another protocol type.                                                                        bind                                                                        Bind the socket to the given local endpoint.                                                                        cancel                                                                        Cancel all asynchronous operations associated with the socket.                                                                        close                                                                        Close the socket.                                                                        connect                                                                        Connect the socket to the specified endpoint.                                                                        get_executor                                                                        Get the executor associated with the object.                                                                        get_option                                                                        Get an option from the socket.                                                                        io_control                                                                        Perform an IO control command on the socket.                                                                        is_open                                                                        Determine whether the socket is open.                                                                        local_endpoint                                                                        Get the local endpoint of the socket.                                                                        lowest_layer                                                                        Get a reference to the lowest layer.   — Get a const                    reference to the lowest layer.                                                                        native_handle                                                                        Get the native socket representation.                                                                        native_non_blocking                                                                        Gets the non-blocking mode of the native socket implementation.                      — Sets the non-blocking mode of the native socket                    implementation.                                                                        non_blocking                                                                        Gets the non-blocking mode of the socket.   — Sets                    the non-blocking mode of the socket.                                                                        open                                                                        Open the socket using the specified protocol.                                                                        operator=                                                                        Move-assign a basic_stream_socket from another.   —                    Move-assign a basic_stream_socket from a socket of another protocol                    type.                                                                        read_some                                                                        Read some data from the socket.                                                                        receive                                                                        Receive some data on the socket.   — Receive some data                    on a connected socket.                                                                        release                                                                        Release ownership of the underlying native socket.                                                                        remote_endpoint                                                                        Get the remote endpoint of the socket.                                                                        send                                                                        Send some data on the socket.                                                                        set_option                                                                        Set an option on the socket.                                                                        shutdown                                                                        Disable sends or receives on the socket.                                                                        wait                                                                        Wait for the socket to become ready to read, ready to write,                    or to have pending error conditions.                                                                        write_some                                                                        Write some data to the socket.                                                                        ~basic_stream_socket [destructor]                                                                        Destroys the socket.                                            Data          Members                                              Name                                                                        Description                                                                        max_connections [static]                                                                        (Deprecated: Use max_listen_connections.) The maximum length                    of the queue of pending incoming connections.                                                                        max_listen_connections [static]                                                                        The maximum length of the queue of pending incoming connections.                                                                        message_do_not_route [static]                                                                        Specify that the data should not be subject to routing.                                                                        message_end_of_record [static]                                                                        Specifies that the data marks the end of a record.                                                                        message_out_of_band [static]                                                                        Process out-of-band data.                                                                        message_peek [static]                                                                        Peek at incoming data without removing it from the input queue.                                            The basic_stream_socket class template          provides asynchronous and blocking stream-oriented socket functionality.                  Thread          Safety                  Distinct objects: Safe.                  Shared objects: Unsafe.                  Synchronous send, receive, and connect          operations are thread safe with respect to each other, if the underlying          operating system calls are also thread safe. This means that it is permitted          to perform concurrent calls to these synchronous operations on a single          socket object. Other synchronous operations, such as open          or close, are not thread          safe.                  Requirements                  Header: boost/asio/ip/tcp.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/ip__tcp/socket.html
ip::tcp::no_delayip::tcp::no_delayHomeLibrariesPeopleFAQMoreip::tcp::no_delay           Socket option for disabling          the Nagle algorithm.        typedef implementation_defined no_delay;          Implements the IPPROTO_TCP/TCP_NODELAY socket option.                  Examples                  Setting the option:        boost::asio::ip::tcp::socket socket(my_context);...boost::asio::ip::tcp::no_delay option(true);socket.set_option(option);          Getting the current option value:        boost::asio::ip::tcp::socket socket(my_context);...boost::asio::ip::tcp::no_delay option;socket.get_option(option);bool is_set = option.value();          Requirements                  Header: boost/asio/ip/tcp.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/ip__tcp/no_delay.html
ip::tcp::protocolip::tcp::protocolHomeLibrariesPeopleFAQMoreip::tcp::protocol           Obtain an identifier          for the protocol.        int protocol() const;Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/ip__tcp/protocol.html
ip::tcp::operator==ip::tcp::operator==HomeLibrariesPeopleFAQMoreip::tcp::operator==           Compare two          protocols for equality.        friend bool operator==(    const tcp &amp; p1,    const tcp &amp; p2);          Requirements                  Header: boost/asio/ip/tcp.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/ip__tcp/operator_eq__eq_.html
multiple_exceptionsmultiple_exceptionsHomeLibrariesPeopleFAQMoremultiple_exceptions                      Exception thrown when there are multiple pending exceptions to rethrow.      class multiple_exceptions :  public std::exception        Member        Functions                                        Name                                                                Description                                                                first_exception                                                                Obtain a pointer to the first exception.                                                                multiple_exceptions [constructor]                                                                Constructor.                                                                what                                                                Obtain message associated with exception.                                      Requirements              Header: boost/asio/multiple_exceptions.hpp              Convenience header: boost/asio.hpp      Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/multiple_exceptions.html
can_querycan_queryHomeLibrariesPeopleFAQMorecan_query                      A type trait that determines whether a query        expression is well-formed.      template&lt;    typename T,    typename Property&gt;struct can_query        Class template can_query        is a trait that is derived from true_type        if the expression boost::asio::query(std::declval&lt;T&gt;(),        std::declval&lt;Property&gt;())        is well formed; otherwise false_type.              Requirements              Header: boost/asio/query.hpp              Convenience header: boost/asio.hpp      Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/can_query.html
mutable_buffers_1mutable_buffers_1HomeLibrariesPeopleFAQMoremutable_buffers_1                      (Deprecated: Use mutable_buffer.) Adapts a single        modifiable buffer so that it meets the requirements of the MutableBufferSequence        concept.      class mutable_buffers_1 :  public mutable_buffer        Types                                        Name                                                                Description                                                                const_iterator                                                                A random-access iterator type that may be used to read elements.                                                                value_type                                                                The type for each element in the list of buffers.                                      Member        Functions                                        Name                                                                Description                                                                begin                                                                Get a random-access iterator to the first element.                                                                data                                                                Get a pointer to the beginning of the memory range.                                                                end                                                                Get a random-access iterator for one past the last element.                                                                mutable_buffers_1 [constructor]                                                                Construct to represent a given memory range.   — Construct                  to represent a single modifiable buffer.                                                                operator+=                                                                Move the start of the buffer by the specified number of bytes.                                                                size                                                                Get the size of the memory range.                                      Related        Functions                                        Name                                                                Description                                                                operator+                                                                Create a new modifiable buffer that is offset from the start of                  another.                                      Requirements              Header: boost/asio/buffer.hpp              Convenience header: boost/asio.hpp      Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/mutable_buffers_1.html
executor::on_work_startedexecutor::on_work_startedHomeLibrariesPeopleFAQMoreexecutor::on_work_started           Inform          the executor that it has some outstanding work to do.        void on_work_started() const;Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/executor/on_work_started.html
executor::executor (5 of 6 overloads)executor::executor (5 of 6 overloads)HomeLibrariesPeopleFAQMoreexecutor::executor          (5 of 6 overloads)            Construct a polymorphic wrapper for the specified executor.          template&lt;    typename Executor&gt;executor(    Executor e);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/executor/executor/overload5.html
executor::executor (2 of 6 overloads)executor::executor (2 of 6 overloads)HomeLibrariesPeopleFAQMoreexecutor::executor          (2 of 6 overloads)            Construct from nullptr.          executor(    nullptr_t );Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/executor/executor/overload2.html
executor::executor (6 of 6 overloads)executor::executor (6 of 6 overloads)HomeLibrariesPeopleFAQMoreexecutor::executor          (6 of 6 overloads)            Allocator-aware constructor to create a polymorphic wrapper for the specified            executor.          template&lt;    typename Executor,    typename Allocator&gt;executor(    allocator_arg_t ,    const Allocator &amp; a,    Executor e);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/executor/executor/overload6.html
executor::executor (3 of 6 overloads)executor::executor (3 of 6 overloads)HomeLibrariesPeopleFAQMoreexecutor::executor          (3 of 6 overloads)            Copy constructor.          executor(    const executor &amp; other);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/executor/executor/overload3.html
executor::executor (4 of 6 overloads)executor::executor (4 of 6 overloads)HomeLibrariesPeopleFAQMoreexecutor::executor          (4 of 6 overloads)            Move constructor.          executor(    executor &amp;&amp; other);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/executor/executor/overload4.html
executor::executor (1 of 6 overloads)executor::executor (1 of 6 overloads)HomeLibrariesPeopleFAQMoreexecutor::executor          (1 of 6 overloads)            Default constructor.          executor();Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/executor/executor/overload1.html
executor::postexecutor::postHomeLibrariesPeopleFAQMoreexecutor::post           Request the executor to invoke          the given function object.        template&lt;    typename Function,    typename Allocator&gt;void post(    Function &amp;&amp; f,    const Allocator &amp; a) const;          This function is used to ask the executor to execute the given function          object. The function object is executed according to the rules of the target          executor object.                  Parameters        f                The function object to be called. The executor will make a copy of                the handler object as required. The function signature of the function                object must be:              void function();a                An allocator that may be used by the executor to allocate the internal                storage needed for function invocation.              Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/executor/post.html
executor::unspecified_bool_trueexecutor::unspecified_bool_trueHomeLibrariesPeopleFAQMoreexecutor::unspecified_bool_true                  static void unspecified_bool_true(    unspecified_bool_type_t );Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/executor/unspecified_bool_true.html
executor::dispatchexecutor::dispatchHomeLibrariesPeopleFAQMoreexecutor::dispatch           Request the executor          to invoke the given function object.        template&lt;    typename Function,    typename Allocator&gt;void dispatch(    Function &amp;&amp; f,    const Allocator &amp; a) const;          This function is used to ask the executor to execute the given function          object. The function object is executed according to the rules of the target          executor object.                  Parameters        f                The function object to be called. The executor will make a copy of                the handler object as required. The function signature of the function                object must be:              void function();a                An allocator that may be used by the executor to allocate the internal                storage needed for function invocation.              Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/executor/dispatch.html
executor::on_work_finishedexecutor::on_work_finishedHomeLibrariesPeopleFAQMoreexecutor::on_work_finished           Inform          the executor that some work is no longer outstanding.        void on_work_finished() const;Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/executor/on_work_finished.html
executor::target (2 of 2 overloads)executor::target (2 of 2 overloads)HomeLibrariesPeopleFAQMoreexecutor::target          (2 of 2 overloads)            Obtain a pointer to the target executor object.          template&lt;    typename Executor&gt;const Executor * target() const;            Return            Value                      If target_type()            == typeid(T), a pointer to the stored executor target;            otherwise, a null pointer.          Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/executor/target/overload2.html
executor::target (1 of 2 overloads)executor::target (1 of 2 overloads)HomeLibrariesPeopleFAQMoreexecutor::target          (1 of 2 overloads)            Obtain a pointer to the target executor object.          template&lt;    typename Executor&gt;Executor * target();            Return            Value                      If target_type()            == typeid(T), a pointer to the stored executor target;            otherwise, a null pointer.          Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/executor/target/overload1.html
executor::target_typeexecutor::target_typeHomeLibrariesPeopleFAQMoreexecutor::target_type           Obtain type          information for the target executor object.        const std::type_info &amp; target_type() const;          Return          Value                  If *this          has a target type of type T,          typeid(T); otherwise,          typeid(void).        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/executor/target_type.html
executor::executorexecutor::executorHomeLibrariesPeopleFAQMoreexecutor::executor           Default constructor.        executor();  » more...          Construct from nullptr.        executor(    nullptr_t );  » more...          Copy constructor.        executor(    const executor &amp; other);  » more...          Move constructor.        executor(    executor &amp;&amp; other);  » more...          Construct a polymorphic wrapper for the specified executor.        template&lt;    typename Executor&gt;executor(    Executor e);  » more...          Allocator-aware constructor to create a polymorphic wrapper for the specified          executor.        template&lt;    typename Executor,    typename Allocator&gt;executor(    allocator_arg_t ,    const Allocator &amp; a,    Executor e);  » more...Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/executor/executor.html
executor::operator unspecified_bool_typeexecutor::operator unspecified_bool_typeHomeLibrariesPeopleFAQMoreexecutor::operator        unspecified_bool_type           Operator          to test if the executor contains a valid target.        operator unspecified_bool_type() const;Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/executor/operator_unspecified_bool_type.html
executor::deferexecutor::deferHomeLibrariesPeopleFAQMoreexecutor::defer           Request the executor to          invoke the given function object.        template&lt;    typename Function,    typename Allocator&gt;void defer(    Function &amp;&amp; f,    const Allocator &amp; a) const;          This function is used to ask the executor to execute the given function          object. The function object is executed according to the rules of the target          executor object.                  Parameters        f                The function object to be called. The executor will make a copy of                the handler object as required. The function signature of the function                object must be:              void function();a                An allocator that may be used by the executor to allocate the internal                storage needed for function invocation.              Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/executor/defer.html
executor::targetexecutor::targetHomeLibrariesPeopleFAQMoreexecutor::target           Obtain a pointer to the          target executor object.        template&lt;    typename Executor&gt;Executor * target();  » more...template&lt;    typename Executor&gt;const Executor * target() const;  » more...Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/executor/target.html
executor::~executorexecutor::~executorHomeLibrariesPeopleFAQMoreexecutor::~executor           Destructor.        ~executor();Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/executor/_executor.html
executor::operator= (2 of 4 overloads)executor::operator= (2 of 4 overloads)HomeLibrariesPeopleFAQMoreexecutor::operator=          (2 of 4 overloads)executor &amp; operator=(    executor &amp;&amp; other);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/executor/operator_eq_/overload2.html
executor::operator= (3 of 4 overloads)executor::operator= (3 of 4 overloads)HomeLibrariesPeopleFAQMoreexecutor::operator=          (3 of 4 overloads)            Assignment operator for nullptr_t.          executor &amp; operator=(    nullptr_t );Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/executor/operator_eq_/overload3.html
executor::operator= (4 of 4 overloads)executor::operator= (4 of 4 overloads)HomeLibrariesPeopleFAQMoreexecutor::operator=          (4 of 4 overloads)            Assignment operator to create a polymorphic wrapper for the specified            executor.          template&lt;    typename Executor&gt;executor &amp; operator=(    Executor &amp;&amp; e);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/executor/operator_eq_/overload4.html
executor::operator= (1 of 4 overloads)executor::operator= (1 of 4 overloads)HomeLibrariesPeopleFAQMoreexecutor::operator=          (1 of 4 overloads)            Assignment operator.          executor &amp; operator=(    const executor &amp; other);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/executor/operator_eq_/overload1.html
executor::operator!=executor::operator!=HomeLibrariesPeopleFAQMoreexecutor::operator!=           Compare          two executors for inequality.        friend bool operator!=(    const executor &amp; a,    const executor &amp; b);          Requirements                  Header: boost/asio/executor.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/executor/operator_not__eq_.html
executor::unspecified_bool_typeexecutor::unspecified_bool_typeHomeLibrariesPeopleFAQMoreexecutor::unspecified_bool_type                  typedef void(*) unspecified_bool_type;          Requirements                  Header: boost/asio/executor.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/executor/unspecified_bool_type.html
executor::operator=executor::operator=HomeLibrariesPeopleFAQMoreexecutor::operator=           Assignment operator.        executor &amp; operator=(    const executor &amp; other);  » more...executor &amp; operator=(    executor &amp;&amp; other);  » more...          Assignment operator for nullptr_t.        executor &amp; operator=(    nullptr_t );  » more...          Assignment operator to create a polymorphic wrapper for the specified executor.        template&lt;    typename Executor&gt;executor &amp; operator=(    Executor &amp;&amp; e);  » more...Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/executor/operator_eq_.html
executor::contextexecutor::contextHomeLibrariesPeopleFAQMoreexecutor::context           Obtain the underlying          execution context.        execution_context &amp; context() const;Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/executor/context.html
executor::operator==executor::operator==HomeLibrariesPeopleFAQMoreexecutor::operator==           Compare          two executors for equality.        friend bool operator==(    const executor &amp; a,    const executor &amp; b);          Requirements                  Header: boost/asio/executor.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/executor/operator_eq__eq_.html
dispatch (2 of 3 overloads)dispatch (2 of 3 overloads)HomeLibrariesPeopleFAQMoredispatch (2        of 3 overloads)          Submits a completion token or function object for execution.        template&lt;    typename Executor,    typename NullaryToken = DEFAULT&gt;DEDUCED dispatch(    const Executor &amp; ex,    NullaryToken &amp;&amp; token = DEFAULT,    typename constraint&lt; execution::is_executor&lt; Executor &gt;::value||is_executor&lt; Executor &gt;::value &gt;::type  = 0);          This function submits an object for execution using the specified executor.          The function object may be called from the current thread prior to returning          from dispatch().          Otherwise, it is queued for execution.                  Parameters        ex                The target executor.              token                The completion                token that will be used to produce a completion handler. The                function signature of the completion handler must be:              void handler();          Return Value                  This function returns async_initiate&lt;NullaryToken, void()&gt;(Init{ex}, token),          where Init is a function          object type defined as:        class Init{public:  using executor_type = Executor;  explicit Init(const Executor&amp; ex) : ex_(ex) {}  executor_type get_executor() const noexcept { return ex_; }  template &lt;typename CompletionHandler&gt;    void operator()(CompletionHandler&amp;&amp; completion_handler) const;private:  Executor ex_; // exposition only};          The function call operator of Init:                      Obtains the handler's associated executor object ex1              of type Ex1 by performing            auto ex1 = get_associated_executor(handler, ex);              Obtains the handler's associated allocator object alloc              by performing            auto alloc = get_associated_allocator(handler);              If execution::is_executor&lt;Ex1&gt;::value is true, constructs a function              object f with a member              executor_ that is initialised              with prefer(ex1, execution::outstanding_work.tracked),              a member handler_ that              is a decay-copy of completion_handler,              and a function call operator that performs:            auto a = get_associated_allocator(handler_);execution::execute(    prefer(executor_,      execution::blocking.possibly,      execution::allocator(a)),    std::move(handler_));              If execution::is_executor&lt;Ex1&gt;::value is false, constructs a function              object f with a member              work_ that is initialised              with make_work_guard(ex1), a member handler_              that is a decay-copy of completion_handler,              and a function call operator that performs:            auto a = get_associated_allocator(handler_);work_.get_executor().dispatch(std::move(handler_), a);work_.reset();              If execution::is_executor&lt;Ex&gt;::value is true, performs            execution::execute(    prefer(ex,      execution::blocking.possibly,      execution::allocator(alloc)),    std::move(f));              If execution::is_executor&lt;Ex&gt;::value is false, performs            ex.dispatch(std::move(f), alloc);          Completion          Signature        void()Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/dispatch/overload2.html
dispatch (3 of 3 overloads)dispatch (3 of 3 overloads)HomeLibrariesPeopleFAQMoredispatch (3        of 3 overloads)          Submits a completion token or function object for execution.        template&lt;    typename ExecutionContext,    typename NullaryToken = DEFAULT&gt;DEDUCED dispatch(    ExecutionContext &amp; ctx,    NullaryToken &amp;&amp; token = DEFAULT,    typename constraint&lt; is_convertible&lt; ExecutionContext &amp;, execution_context &amp; &gt;::value &gt;::type  = 0);          Parameters        ctx                An execution context, from which the target executor is obtained.              token                The completion                token that will be used to produce a completion handler. The                function signature of the completion handler must be:              void handler();          Return Value                  dispatch(ctx.get_executor(),          forward&lt;NullaryToken&gt;(token)).                  Completion          Signature        void()Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/dispatch/overload3.html
dispatch (1 of 3 overloads)dispatch (1 of 3 overloads)HomeLibrariesPeopleFAQMoredispatch (1        of 3 overloads)          Submits a completion token or function object for execution.        template&lt;    typename NullaryToken&gt;DEDUCED dispatch(    NullaryToken &amp;&amp; token);          This function submits an object for execution using the object's associated          executor. The function object may be called from the current thread prior          to returning from dispatch(). Otherwise, it is queued for execution.                  Parameters        token                The completion                token that will be used to produce a completion handler. The                function signature of the completion handler must be:              void handler();          Return Value                  This function returns async_initiate&lt;NullaryToken, void()&gt;(Init{}, token),          where Init is a function          object type defined as:        class Init{public:  template &lt;typename CompletionHandler&gt;    void operator()(CompletionHandler&amp;&amp; completion_handler) const;};          The function call operator of Init:                      Obtains the handler's associated executor object ex              of type Ex by performing            auto ex = get_associated_executor(handler);              Obtains the handler's associated allocator object alloc              by performing            auto alloc = get_associated_allocator(handler);              If execution::is_executor&lt;Ex&gt;::value is true, performs            execution::execute(    prefer(ex,      execution::blocking.possibly,      execution::allocator(alloc)),    std::forward&lt;CompletionHandler&gt;(completion_handler));              If execution::is_executor&lt;Ex&gt;::value is false, performs            ex.dispatch(    std::forward&lt;CompletionHandler&gt;(completion_handler),    alloc);          Completion          Signature        void()Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/dispatch/overload1.html
Buffer-oriented synchronous random-access read device requirementsBuffer-oriented synchronous random-access read device requirementsHomeLibrariesPeopleFAQMoreBuffer-oriented      synchronous random-access read device requirements        In the table below, a denotes        a synchronous random-access read device object, o        denotes an offset of type boost::uint64_t,        mb denotes an object satisfying        mutable buffer        sequence requirements, and ec        denotes an object of type error_code.      Table 30. Buffer-oriented synchronous random-access read device requirements                                  operation                                                                type                                                                semantics, pre/post-conditions                                                                a.read_some_at(o,                  mb);                                                                size_t                                                                Equivalent to:                error_code ec;size_t s = a.read_some_at(o, mb, ec);if (ec) throw system_error(ec);return s;                                                a.read_some_at(o,                  mb,                  ec);                                                                size_t                                                                Reads one or more bytes of data from the device a                  at offset o.                   The mutable buffer sequence mb                  specifies memory where the data should be placed. The read_some_at operation shall                  always fill a buffer in the sequence completely before proceeding                  to the next.  If successful, returns the number of                  bytes read and sets ec                  such that !ec                  is true. If an error occurred, returns 0                  and sets ec such                  that !!ec                  is true.  If the total size of all buffers in the sequence                  mb is 0, the function shall return 0 immediately.                              Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/SyncRandomAccessReadDevice.html
experimental::prepend_texperimental::prepend_tHomeLibrariesPeopleFAQMoreexperimental::prepend_t                      Completion token type used to specify that the completion handler arguments        should be passed additional values before the results of the operation.      template&lt;    typename CompletionToken,    typename... Values&gt;class prepend_t        Member        Functions                                        Name                                                                Description                                                                prepend_t [constructor]                                                                Constructor.                                      Data        Members                                        Name                                                                Description                                                                token_                                                                              values_                                                    Requirements              Header: boost/asio/experimental/prepend.hpp              Convenience header: None      Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/experimental__prepend_t.html
experimental::deferred_noopexperimental::deferred_noopHomeLibrariesPeopleFAQMoreexperimental::deferred_noop                      Used to represent an empty deferred action.      struct deferred_noop        Member        Functions                                        Name                                                                Description                                                                operator()                                                                No effect.                                      Requirements              Header: boost/asio/experimental/deferred.hpp              Convenience header: None      Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/experimental__deferred_noop.html
postpostHomeLibrariesPeopleFAQMorepost                      Submits a completion token or function object for execution.      template&lt;    typename NullaryToken&gt;DEDUCED post(    NullaryToken &amp;&amp; token);  » more...template&lt;    typename Executor,    typename NullaryToken = DEFAULT&gt;DEDUCED post(    const Executor &amp; ex,    NullaryToken &amp;&amp; token = DEFAULT,    typename constraint&lt; execution::is_executor&lt; Executor &gt;::value||is_executor&lt; Executor &gt;::value &gt;::type  = 0);  » more...template&lt;    typename ExecutionContext,    typename NullaryToken = DEFAULT&gt;DEDUCED post(    ExecutionContext &amp; ctx,    NullaryToken &amp;&amp; token = DEFAULT,    typename constraint&lt; is_convertible&lt; ExecutionContext &amp;, execution_context &amp; &gt;::value &gt;::type  = 0);  » more...        Requirements              Header: boost/asio/post.hpp              Convenience header: boost/asio.hpp      Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/post.html
experimental::channel_traits::container::typeexperimental::channel_traits::container::typeHomeLibrariesPeopleFAQMoreexperimental::channel_traits::container::type                  typedef user_defined type;          Requirements                  Header: boost/asio/experimental/channel_traits.hpp                  Convenience header: None        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/experimental__channel_traits__container/type.html
local::stream_protocollocal::stream_protocolHomeLibrariesPeopleFAQMorelocal::stream_protocol                      Encapsulates the flags needed for stream-oriented UNIX sockets.      class stream_protocol        Types                                        Name                                                                Description                                                                acceptor                                                                The UNIX domain acceptor type.                                                                endpoint                                                                The type of a UNIX domain endpoint.                                                                iostream                                                                The UNIX domain iostream type.                                                                socket                                                                The UNIX domain socket type.                                      Member        Functions                                        Name                                                                Description                                                                family                                                                Obtain an identifier for the protocol family.                                                                protocol                                                                Obtain an identifier for the protocol.                                                                type                                                                Obtain an identifier for the type of the protocol.                                      The local::stream_protocol class contains flags        necessary for stream-oriented UNIX domain sockets.              Thread        Safety              Distinct objects: Safe.              Shared objects: Safe.              Requirements              Header: boost/asio/local/stream_protocol.hpp              Convenience header: boost/asio.hpp      Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/local__stream_protocol.html
execution::relationship_t::continuation_t::continuation_texecution::relationship_t::continuation_t::continuation_tHomeLibrariesPeopleFAQMoreexecution::relationship_t::continuation_t::continuation_t           Default          constructor.        constexpr continuation_t();Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/execution__relationship_t__continuation_t/continuation_t.html
execution::relationship_t::continuation_t::is_requirableexecution::relationship_t::continuation_t::is_requirableHomeLibrariesPeopleFAQMoreexecution::relationship_t::continuation_t::is_requirable           The          execution::relationship_t::continuation_t property can be          required.        static constexpr bool is_requirable = true;Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/execution__relationship_t__continuation_t/is_requirable.html
execution::relationship_t::continuation_t::is_applicable_property_vexecution::relationship_t::continuation_t::is_applicable_property_vHomeLibrariesPeopleFAQMoreexecution::relationship_t::continuation_t::is_applicable_property_v           The          execution::relationship_t::continuation_t property applies          to executors, senders, and schedulers.        template &lt;typename T&gt;static constexpr bool is_applicable_property_v =    is_executor_v&lt;T&gt; || is_sender_v&lt;T&gt; || is_scheduler_v&lt;T&gt;;Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/execution__relationship_t__continuation_t/is_applicable_property_v.html
execution::relationship_t::continuation_t::valueexecution::relationship_t::continuation_t::valueHomeLibrariesPeopleFAQMoreexecution::relationship_t::continuation_t::value           Get          the value associated with a property object.        static constexpr relationship_t value();          Return          Value                  continuation_t();        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/execution__relationship_t__continuation_t/value.html
execution::relationship_t::continuation_t::is_preferableexecution::relationship_t::continuation_t::is_preferableHomeLibrariesPeopleFAQMoreexecution::relationship_t::continuation_t::is_preferable           The          execution::relationship_t::continuation_t property can be          preferred.        static constexpr bool is_preferable = true;Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/execution__relationship_t__continuation_t/is_preferable.html
execution::relationship_t::continuation_t::polymorphic_query_result_typeexecution::relationship_t::continuation_t::polymorphic_query_result_typeHomeLibrariesPeopleFAQMoreexecution::relationship_t::continuation_t::polymorphic_query_result_type           The          type returned by queries against an any_executor.        typedef relationship_t polymorphic_query_result_type;          Requirements                  Header: boost/asio/execution/relationship.hpp                  Convenience header: boost/asio/execution.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/execution__relationship_t__continuation_t/polymorphic_query_result_type.html
serial_port_base::flow_controlserial_port_base::flow_controlHomeLibrariesPeopleFAQMoreserial_port_base::flow_control                      Serial port option to permit changing the flow control.      class flow_control        Types                                        Name                                                                Description                                                                type                                                    Member        Functions                                        Name                                                                Description                                                                flow_control [constructor]                                                                              load                                                                              store                                                                              value                                                    Implements changing the flow control for a given serial port.              Requirements              Header: boost/asio/serial_port_base.hpp              Convenience header: boost/asio.hpp      Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/serial_port_base__flow_control.html
execution::executeexecution::executeHomeLibrariesPeopleFAQMoreexecution::execute                      A customisation point that executes a function on an executor.      constexpr unspecified execute = unspecified;        The name execution::execute denotes a customisation point object.              For some subexpressions e        and f, let E be a type such that decltype((e))        is E and let F be a type such that decltype((f))        is F. The expression execution::execute(e, f) is ill-formed if F        does not model invocable,        or if E does not model either        executor or sender. Otherwise, it is expression-equivalent        to:                  e.execute(f),            if that expression is valid. If the function selected does not execute            the function object f            on the executor e, the            program is ill-formed with no diagnostic required.                      Otherwise, execute(e, f),            if that expression is valid, with overload resolution performed in a            context that includes the declaration void            execute();            and that does not include a declaration of execution::execute.            If the function selected by overload resolution does not execute the            function object f on            the executor e, the program            is ill-formed with no diagnostic required.                  Requirements              Header: boost/asio/execution/execute.hpp              Convenience header: boost/asio/execution.hpp      Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/execution__execute.html
basic_file::rebind_executorbasic_file::rebind_executorHomeLibrariesPeopleFAQMorebasic_file::rebind_executor                      Rebinds the file type to another executor.      template&lt;    typename Executor1&gt;struct rebind_executor        Types                                        Name                                                                Description                                                                other                                                                The file type when rebound to the specified executor.                                      Requirements              Header: boost/asio/basic_file.hpp              Convenience header: boost/asio.hpp      Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_file__rebind_executor.html
ip::unicast::hopsip::unicast::hopsHomeLibrariesPeopleFAQMoreip::unicast::hops                      Socket option for time-to-live associated with outgoing unicast packets.      typedef implementation_defined hops;        Implements the IPPROTO_IP/IP_UNICAST_TTL socket option.              Examples              Setting the option:      boost::asio::ip::udp::socket socket(my_context);...boost::asio::ip::unicast::hops option(4);socket.set_option(option);        Getting the current option value:      boost::asio::ip::udp::socket socket(my_context);...boost::asio::ip::unicast::hops option;socket.get_option(option);int ttl = option.value();        Requirements              Header: boost/asio/ip/unicast.hpp              Convenience header: boost/asio.hpp      Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/ip__unicast__hops.html
basic_socket_acceptor::close (2 of 2 overloads)basic_socket_acceptor::close (2 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::close          (2 of 2 overloads)            Close the acceptor.          void close(    boost::system::error_code &amp; ec);            This function is used to close the acceptor. Any asynchronous accept            operations will be cancelled immediately.                      A subsequent call to open() is required before the acceptor can            again be used to again perform socket accept operations.                      Parameters          ec                  Set to indicate what error occurred, if any.                            Example          boost::asio::ip::tcp::acceptor acceptor(my_context);...boost::system::error_code ec;acceptor.close(ec);if (ec){  // An error occurred.}Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/close/overload2.html
basic_socket_acceptor::close (1 of 2 overloads)basic_socket_acceptor::close (1 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::close          (1 of 2 overloads)            Close the acceptor.          void close();            This function is used to close the acceptor. Any asynchronous accept            operations will be cancelled immediately.                      A subsequent call to open() is required before the acceptor can            again be used to again perform socket accept operations.                      Exceptions          boost::system::system_error                  Thrown on failure.                Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/close/overload1.html
basic_socket_acceptor::basic_socket_acceptor (5 of 10 overloads)basic_socket_acceptor::basic_socket_acceptor (5 of 10 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::basic_socket_acceptor          (5 of 10 overloads)            Construct an acceptor opened on the given endpoint.          basic_socket_acceptor(    const executor_type &amp; ex,    const endpoint_type &amp; endpoint,    bool reuse_addr = true);            This constructor creates an acceptor and automatically opens it to listen            for new connections on the specified endpoint.                      Parameters          ex                  The I/O executor that the acceptor will use, by default, to dispatch                  handlers for any asynchronous operations performed on the acceptor.                endpoint                  An endpoint on the local machine on which the acceptor will listen                  for new connections.                reuse_addr                  Whether the constructor should set the socket option socket_base::reuse_address.                            Exceptions          boost::system::system_error                  Thrown on failure.                            Remarks                      This constructor is equivalent to the following code:          basic_socket_acceptor&lt;Protocol&gt; acceptor(my_context);acceptor.open(endpoint.protocol());if (reuse_addr)  acceptor.set_option(socket_base::reuse_address(true));acceptor.bind(endpoint);acceptor.listen();Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/basic_socket_acceptor/overload5.html
basic_socket_acceptor::basic_socket_acceptor (2 of 10 overloads)basic_socket_acceptor::basic_socket_acceptor (2 of 10 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::basic_socket_acceptor          (2 of 10 overloads)            Construct an acceptor without opening it.          template&lt;    typename ExecutionContext&gt;basic_socket_acceptor(    ExecutionContext &amp; context,    typename constraint&lt; is_convertible&lt; ExecutionContext &amp;, execution_context &amp; &gt;::value &gt;::type  = 0);            This constructor creates an acceptor without opening it to listen for            new connections. The open() function must be called before the            acceptor can accept new socket connections.                      Parameters          context                  An execution context which provides the I/O executor that the acceptor                  will use, by default, to dispatch handlers for any asynchronous                  operations performed on the acceptor.                Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/basic_socket_acceptor/overload2.html
basic_socket_acceptor::basic_socket_acceptor (6 of 10 overloads)basic_socket_acceptor::basic_socket_acceptor (6 of 10 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::basic_socket_acceptor          (6 of 10 overloads)            Construct an acceptor opened on the given endpoint.          template&lt;    typename ExecutionContext&gt;basic_socket_acceptor(    ExecutionContext &amp; context,    const endpoint_type &amp; endpoint,    bool reuse_addr = true,    typename constraint&lt; is_convertible&lt; ExecutionContext &amp;, execution_context &amp; &gt;::value &gt;::type  = 0);            This constructor creates an acceptor and automatically opens it to listen            for new connections on the specified endpoint.                      Parameters          context                  An execution context which provides the I/O executor that the acceptor                  will use, by default, to dispatch handlers for any asynchronous                  operations performed on the acceptor.                endpoint                  An endpoint on the local machine on which the acceptor will listen                  for new connections.                reuse_addr                  Whether the constructor should set the socket option socket_base::reuse_address.                            Exceptions          boost::system::system_error                  Thrown on failure.                            Remarks                      This constructor is equivalent to the following code:          basic_socket_acceptor&lt;Protocol&gt; acceptor(my_context);acceptor.open(endpoint.protocol());if (reuse_addr)  acceptor.set_option(socket_base::reuse_address(true));acceptor.bind(endpoint);acceptor.listen();Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/basic_socket_acceptor/overload6.html
basic_socket_acceptor::basic_socket_acceptor (10 of 10 overloads)basic_socket_acceptor::basic_socket_acceptor (10 of 10 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::basic_socket_acceptor          (10 of 10 overloads)            Move-construct a basic_socket_acceptor from an            acceptor of another protocol type.          template&lt;    typename Protocol1,    typename Executor1&gt;basic_socket_acceptor(    basic_socket_acceptor&lt; Protocol1, Executor1 &gt; &amp;&amp; other,    typename constraint&lt; is_convertible&lt; Protocol1, Protocol &gt;::value &amp;&amp;is_convertible&lt; Executor1, Executor &gt;::value &gt;::type  = 0);            This constructor moves an acceptor from one object to another.                      Parameters          other                  The other basic_socket_acceptor                  object from which the move will occur.                            Remarks                      Following the move, the moved-from object is in the same state as if            constructed using the basic_socket_acceptor(const executor_type&amp;)            constructor.          Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/basic_socket_acceptor/overload10.html
basic_socket_acceptor::basic_socket_acceptor (3 of 10 overloads)basic_socket_acceptor::basic_socket_acceptor (3 of 10 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::basic_socket_acceptor          (3 of 10 overloads)            Construct an open acceptor.          basic_socket_acceptor(    const executor_type &amp; ex,    const protocol_type &amp; protocol);            This constructor creates an acceptor and automatically opens it.                      Parameters          ex                  The I/O executor that the acceptor will use, by default, to dispatch                  handlers for any asynchronous operations performed on the acceptor.                protocol                  An object specifying protocol parameters to be used.                            Exceptions          boost::system::system_error                  Thrown on failure.                Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/basic_socket_acceptor/overload3.html
basic_socket_acceptor::basic_socket_acceptor (4 of 10 overloads)basic_socket_acceptor::basic_socket_acceptor (4 of 10 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::basic_socket_acceptor          (4 of 10 overloads)            Construct an open acceptor.          template&lt;    typename ExecutionContext&gt;basic_socket_acceptor(    ExecutionContext &amp; context,    const protocol_type &amp; protocol,    typename constraint&lt; is_convertible&lt; ExecutionContext &amp;, execution_context &amp; &gt;::value, defaulted_constraint &gt;::type  = defaulted_constraint());            This constructor creates an acceptor and automatically opens it.                      Parameters          context                  An execution context which provides the I/O executor that the acceptor                  will use, by default, to dispatch handlers for any asynchronous                  operations performed on the acceptor.                protocol                  An object specifying protocol parameters to be used.                            Exceptions          boost::system::system_error                  Thrown on failure.                Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/basic_socket_acceptor/overload4.html
basic_socket_acceptor::basic_socket_acceptor (8 of 10 overloads)basic_socket_acceptor::basic_socket_acceptor (8 of 10 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::basic_socket_acceptor          (8 of 10 overloads)            Construct a basic_socket_acceptor on an            existing native acceptor.          template&lt;    typename ExecutionContext&gt;basic_socket_acceptor(    ExecutionContext &amp; context,    const protocol_type &amp; protocol,    const native_handle_type &amp; native_acceptor,    typename constraint&lt; is_convertible&lt; ExecutionContext &amp;, execution_context &amp; &gt;::value &gt;::type  = 0);            This constructor creates an acceptor object to hold an existing native            acceptor.                      Parameters          context                  An execution context which provides the I/O executor that the acceptor                  will use, by default, to dispatch handlers for any asynchronous                  operations performed on the acceptor.                protocol                  An object specifying protocol parameters to be used.                native_acceptor                  A native acceptor.                            Exceptions          boost::system::system_error                  Thrown on failure.                Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/basic_socket_acceptor/overload8.html
basic_socket_acceptor::basic_socket_acceptor (1 of 10 overloads)basic_socket_acceptor::basic_socket_acceptor (1 of 10 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::basic_socket_acceptor          (1 of 10 overloads)            Construct an acceptor without opening it.          basic_socket_acceptor(    const executor_type &amp; ex);            This constructor creates an acceptor without opening it to listen for            new connections. The open() function must be called before the            acceptor can accept new socket connections.                      Parameters          ex                  The I/O executor that the acceptor will use, by default, to dispatch                  handlers for any asynchronous operations performed on the acceptor.                Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/basic_socket_acceptor/overload1.html
basic_socket_acceptor::basic_socket_acceptor (7 of 10 overloads)basic_socket_acceptor::basic_socket_acceptor (7 of 10 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::basic_socket_acceptor          (7 of 10 overloads)            Construct a basic_socket_acceptor on an            existing native acceptor.          basic_socket_acceptor(    const executor_type &amp; ex,    const protocol_type &amp; protocol,    const native_handle_type &amp; native_acceptor);            This constructor creates an acceptor object to hold an existing native            acceptor.                      Parameters          ex                  The I/O executor that the acceptor will use, by default, to dispatch                  handlers for any asynchronous operations performed on the acceptor.                protocol                  An object specifying protocol parameters to be used.                native_acceptor                  A native acceptor.                            Exceptions          boost::system::system_error                  Thrown on failure.                Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/basic_socket_acceptor/overload7.html
basic_socket_acceptor::basic_socket_acceptor (9 of 10 overloads)basic_socket_acceptor::basic_socket_acceptor (9 of 10 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::basic_socket_acceptor          (9 of 10 overloads)            Move-construct a basic_socket_acceptor from another.          basic_socket_acceptor(    basic_socket_acceptor &amp;&amp; other);            This constructor moves an acceptor from one object to another.                      Parameters          other                  The other basic_socket_acceptor                  object from which the move will occur.                            Remarks                      Following the move, the moved-from object is in the same state as if            constructed using the basic_socket_acceptor(const executor_type&amp;)            constructor.          Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/basic_socket_acceptor/overload9.html
basic_socket_acceptor::set_optionbasic_socket_acceptor::set_optionHomeLibrariesPeopleFAQMorebasic_socket_acceptor::set_option           Set          an option on the acceptor.        template&lt;    typename SettableSocketOption&gt;void set_option(    const SettableSocketOption &amp; option);  » more...template&lt;    typename SettableSocketOption&gt;void set_option(    const SettableSocketOption &amp; option,    boost::system::error_code &amp; ec);  » more...Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/set_option.html
basic_socket_acceptor::native_handlebasic_socket_acceptor::native_handleHomeLibrariesPeopleFAQMorebasic_socket_acceptor::native_handle           Get          the native acceptor representation.        native_handle_type native_handle();          This function may be used to obtain the underlying representation of the          acceptor. This is intended to allow access to native acceptor functionality          that is not otherwise provided.        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/native_handle.html
basic_socket_acceptor::bindbasic_socket_acceptor::bindHomeLibrariesPeopleFAQMorebasic_socket_acceptor::bind           Bind          the acceptor to the given local endpoint.        void bind(    const endpoint_type &amp; endpoint);  » more...void bind(    const endpoint_type &amp; endpoint,    boost::system::error_code &amp; ec);  » more...Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/bind.html
basic_socket_acceptor::wait (2 of 2 overloads)basic_socket_acceptor::wait (2 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::wait          (2 of 2 overloads)            Wait for the acceptor to become ready to read, ready to write, or to            have pending error conditions.          void wait(    wait_type w,    boost::system::error_code &amp; ec);            This function is used to perform a blocking wait for an acceptor to enter            a ready to read, write or error condition state.                      Parameters          w                  Specifies the desired acceptor state.                ec                  Set to indicate what error occurred, if any.                            Example                      Waiting for an acceptor to become readable.          boost::asio::ip::tcp::acceptor acceptor(my_context);...boost::system::error_code ec;acceptor.wait(boost::asio::ip::tcp::acceptor::wait_read, ec);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/wait/overload2.html
basic_socket_acceptor::wait (1 of 2 overloads)basic_socket_acceptor::wait (1 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::wait          (1 of 2 overloads)            Wait for the acceptor to become ready to read, ready to write, or to            have pending error conditions.          void wait(    wait_type w);            This function is used to perform a blocking wait for an acceptor to enter            a ready to read, write or error condition state.                      Parameters          w                  Specifies the desired acceptor state.                            Example                      Waiting for an acceptor to become readable.          boost::asio::ip::tcp::acceptor acceptor(my_context);...acceptor.wait(boost::asio::ip::tcp::acceptor::wait_read);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/wait/overload1.html
basic_socket_acceptor::async_waitbasic_socket_acceptor::async_waitHomeLibrariesPeopleFAQMorebasic_socket_acceptor::async_wait           Asynchronously          wait for the acceptor to become ready to read, ready to write, or to have          pending error conditions.        template&lt;    typename WaitToken = DEFAULT&gt;DEDUCED async_wait(    wait_type w,    WaitToken &amp;&amp; token = DEFAULT);          This function is used to perform an asynchronous wait for an acceptor to          enter a ready to read, write or error condition state. It is an initiating          function for an asynchronous          operation, and always returns immediately.                  Parameters        w                Specifies the desired acceptor state.              token                The completion                token that will be used to produce a completion handler, which                will be called when the wait completes. Potential completion tokens                include use_future, use_awaitable, yield_context, or a function                object with the correct completion signature. The function signature                of the completion handler must be:              void handler(  const boost::system::error_code&amp; error // Result of operation.);                Regardless of whether the asynchronous operation completes immediately                or not, the completion handler will not be invoked from within this                function. On immediate completion, invocation of the handler will                be performed in a manner equivalent to using post.                        Completion          Signature        void(boost::system::error_code)          Example        void wait_handler(const boost::system::error_code&amp; error){  if (!error)  {    // Wait succeeded.  }}...boost::asio::ip::tcp::acceptor acceptor(my_context);...acceptor.async_wait(    boost::asio::ip::tcp::acceptor::wait_read,    wait_handler);          Per-Operation          Cancellation                  On POSIX or Windows operating systems, this asynchronous operation supports          cancellation for the following cancellation_type values:                      cancellation_type::terminal                          cancellation_type::partial                          cancellation_type::total            Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/async_wait.html
basic_socket_acceptor::release (2 of 2 overloads)basic_socket_acceptor::release (2 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::release          (2 of 2 overloads)            Release ownership of the underlying native acceptor.          native_handle_type release(    boost::system::error_code &amp; ec);            This function causes all outstanding asynchronous accept operations to            finish immediately, and the handlers for cancelled operations will be            passed the boost::asio::error::operation_aborted error. Ownership            of the native acceptor is then transferred to the caller.                      Parameters          ec                  Set to indicate what error occurred, if any.                            Remarks                      This function is unsupported on Windows versions prior to Windows 8.1,            and will fail with boost::asio::error::operation_not_supported            on these platforms.          Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/release/overload2.html
basic_socket_acceptor::release (1 of 2 overloads)basic_socket_acceptor::release (1 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::release          (1 of 2 overloads)            Release ownership of the underlying native acceptor.          native_handle_type release();            This function causes all outstanding asynchronous accept operations to            finish immediately, and the handlers for cancelled operations will be            passed the boost::asio::error::operation_aborted error. Ownership            of the native acceptor is then transferred to the caller.                      Exceptions          boost::system::system_error                  Thrown on failure.                            Remarks                      This function is unsupported on Windows versions prior to Windows 8.1,            and will fail with boost::asio::error::operation_not_supported            on these platforms.          Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/release/overload1.html
basic_socket_acceptor::max_connectionsbasic_socket_acceptor::max_connectionsHomeLibrariesPeopleFAQMorebasic_socket_acceptor::max_connections          Inherited from socket_base.                   (Deprecated:          Use max_listen_connections.) The maximum length of the queue of pending          incoming connections.        static const int max_connections = implementation_defined;Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/max_connections.html
basic_socket_acceptor::send_buffer_sizebasic_socket_acceptor::send_buffer_sizeHomeLibrariesPeopleFAQMorebasic_socket_acceptor::send_buffer_size          Inherited from socket_base.                   Socket          option for the send buffer size of a socket.        typedef implementation_defined send_buffer_size;          Implements the SOL_SOCKET/SO_SNDBUF socket option.                  Examples                  Setting the option:        boost::asio::ip::tcp::socket socket(my_context);...boost::asio::socket_base::send_buffer_size option(8192);socket.set_option(option);          Getting the current option value:        boost::asio::ip::tcp::socket socket(my_context);...boost::asio::socket_base::send_buffer_size option;socket.get_option(option);int size = option.value();          Requirements                  Header: boost/asio/basic_socket_acceptor.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/send_buffer_size.html
basic_socket_acceptor::async_acceptbasic_socket_acceptor::async_acceptHomeLibrariesPeopleFAQMorebasic_socket_acceptor::async_accept           Start          an asynchronous accept.        template&lt;    typename Protocol1,    typename Executor1,    typename AcceptToken = DEFAULT&gt;DEDUCED async_accept(    basic_socket&lt; Protocol1, Executor1 &gt; &amp; peer,    AcceptToken &amp;&amp; token = DEFAULT,    typename constraint&lt; is_convertible&lt; Protocol, Protocol1 &gt;::value &gt;::type  = 0);  » more...template&lt;    typename Executor1,    typename AcceptToken = DEFAULT&gt;DEDUCED async_accept(    basic_socket&lt; protocol_type, Executor1 &gt; &amp; peer,    endpoint_type &amp; peer_endpoint,    AcceptToken &amp;&amp; token = DEFAULT);  » more...template&lt;    typename MoveAcceptToken = DEFAULT&gt;DEDUCED async_accept(    MoveAcceptToken &amp;&amp; token = DEFAULT);  » more...template&lt;    typename Executor1,    typename MoveAcceptToken = DEFAULT&gt;DEDUCED async_accept(    const Executor1 &amp; ex,    MoveAcceptToken &amp;&amp; token = DEFAULT,    typename constraint&lt; is_executor&lt; Executor1 &gt;::value||execution::is_executor&lt; Executor1 &gt;::value &gt;::type  = 0);  » more...template&lt;    typename ExecutionContext,    typename MoveAcceptToken = DEFAULT&gt;DEDUCED async_accept(    ExecutionContext &amp; context,    MoveAcceptToken &amp;&amp; token = DEFAULT,    typename constraint&lt; is_convertible&lt; ExecutionContext &amp;, execution_context &amp; &gt;::value &gt;::type  = 0);  » more...template&lt;    typename MoveAcceptToken = DEFAULT&gt;DEDUCED async_accept(    endpoint_type &amp; peer_endpoint,    MoveAcceptToken &amp;&amp; token = DEFAULT);  » more...template&lt;    typename Executor1,    typename MoveAcceptToken = DEFAULT&gt;DEDUCED async_accept(    const Executor1 &amp; ex,    endpoint_type &amp; peer_endpoint,    MoveAcceptToken &amp;&amp; token = DEFAULT,    typename constraint&lt; is_executor&lt; Executor1 &gt;::value||execution::is_executor&lt; Executor1 &gt;::value &gt;::type  = 0);  » more...template&lt;    typename ExecutionContext,    typename MoveAcceptToken = DEFAULT&gt;DEDUCED async_accept(    ExecutionContext &amp; context,    endpoint_type &amp; peer_endpoint,    MoveAcceptToken &amp;&amp; token = DEFAULT,    typename constraint&lt; is_convertible&lt; ExecutionContext &amp;, execution_context &amp; &gt;::value &gt;::type  = 0);  » more...Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/async_accept.html
basic_socket_acceptor::cancel (2 of 2 overloads)basic_socket_acceptor::cancel (2 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::cancel          (2 of 2 overloads)            Cancel all asynchronous operations associated with the acceptor.          void cancel(    boost::system::error_code &amp; ec);            This function causes all outstanding asynchronous connect, send and receive            operations to finish immediately, and the handlers for cancelled operations            will be passed the boost::asio::error::operation_aborted            error.                      Parameters          ec                  Set to indicate what error occurred, if any.                Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/cancel/overload2.html
basic_socket_acceptor::cancel (1 of 2 overloads)basic_socket_acceptor::cancel (1 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::cancel          (1 of 2 overloads)            Cancel all asynchronous operations associated with the acceptor.          void cancel();            This function causes all outstanding asynchronous connect, send and receive            operations to finish immediately, and the handlers for cancelled operations            will be passed the boost::asio::error::operation_aborted            error.                      Exceptions          boost::system::system_error                  Thrown on failure.                Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/cancel/overload1.html
basic_socket_acceptor::async_accept (5 of 8 overloads)basic_socket_acceptor::async_accept (5 of 8 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::async_accept          (5 of 8 overloads)            Start an asynchronous accept.          template&lt;    typename ExecutionContext,    typename MoveAcceptToken = DEFAULT&gt;DEDUCED async_accept(    ExecutionContext &amp; context,    MoveAcceptToken &amp;&amp; token = DEFAULT,    typename constraint&lt; is_convertible&lt; ExecutionContext &amp;, execution_context &amp; &gt;::value &gt;::type  = 0);            This function is used to asynchronously accept a new connection. It is            an initiating function for an asynchronous            operation, and always returns immediately.                      This overload requires that the Protocol template parameter satisfy the            AcceptableProtocol type requirements.                      Parameters          context                  The I/O execution context object to be used for the newly accepted                  socket.                token                  The completion                  token that will be used to produce a completion handler,                  which will be called when the accept completes. Potential completion                  tokens include use_future, use_awaitable, yield_context, or a function                  object with the correct completion signature. The function signature                  of the completion handler must be:                void handler(  // Result of operation.  const boost::system::error_code&amp; error,  // On success, the newly accepted socket.  typename Protocol::socket::template rebind_executor&lt;    typename ExecutionContext::executor_type&gt;::other peer);                  Regardless of whether the asynchronous operation completes immediately                  or not, the completion handler will not be invoked from within                  this function. On immediate completion, invocation of the handler                  will be performed in a manner equivalent to using post.                            Completion            Signature          void(boost::system::error_code,   typename Protocol::socket::template rebind_executor&lt;     typename ExecutionContext::executor_type&gt;::other))            Example          void accept_handler(const boost::system::error_code&amp; error,    boost::asio::ip::tcp::socket peer){  if (!error)  {    // Accept succeeded.  }}...boost::asio::ip::tcp::acceptor acceptor(my_context);...acceptor.async_accept(my_context2, accept_handler);            Per-Operation            Cancellation                      On POSIX or Windows operating systems, this asynchronous operation supports            cancellation for the following cancellation_type values:                          cancellation_type::terminal                              cancellation_type::partial                              cancellation_type::total              Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/async_accept/overload5.html
basic_socket_acceptor::async_accept (2 of 8 overloads)basic_socket_acceptor::async_accept (2 of 8 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::async_accept          (2 of 8 overloads)            Start an asynchronous accept.          template&lt;    typename Executor1,    typename AcceptToken = DEFAULT&gt;DEDUCED async_accept(    basic_socket&lt; protocol_type, Executor1 &gt; &amp; peer,    endpoint_type &amp; peer_endpoint,    AcceptToken &amp;&amp; token = DEFAULT);            This function is used to asynchronously accept a new connection into            a socket, and additionally obtain the endpoint of the remote peer. It            is an initiating function for an asynchronous            operation, and always returns immediately.                      Parameters          peer                  The socket into which the new connection will be accepted. Ownership                  of the peer object is retained by the caller, which must guarantee                  that it is valid until the completion handler is called.                peer_endpoint                  An endpoint object into which the endpoint of the remote peer will                  be written. Ownership of the peer_endpoint object is retained by                  the caller, which must guarantee that it is valid until the handler                  is called.                token                  The completion                  token that will be used to produce a completion handler,                  which will be called when the accept completes. Potential completion                  tokens include use_future, use_awaitable, yield_context, or a function                  object with the correct completion signature. The function signature                  of the completion handler must be:                void handler(  const boost::system::error_code&amp; error // Result of operation.);                  Regardless of whether the asynchronous operation completes immediately                  or not, the completion handler will not be invoked from within                  this function. On immediate completion, invocation of the handler                  will be performed in a manner equivalent to using post.                            Completion            Signature          void(boost::system::error_code)            Per-Operation            Cancellation                      On POSIX or Windows operating systems, this asynchronous operation supports            cancellation for the following cancellation_type values:                          cancellation_type::terminal                              cancellation_type::partial                              cancellation_type::total              Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/async_accept/overload2.html
basic_socket_acceptor::async_accept (6 of 8 overloads)basic_socket_acceptor::async_accept (6 of 8 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::async_accept          (6 of 8 overloads)            Start an asynchronous accept.          template&lt;    typename MoveAcceptToken = DEFAULT&gt;DEDUCED async_accept(    endpoint_type &amp; peer_endpoint,    MoveAcceptToken &amp;&amp; token = DEFAULT);            This function is used to asynchronously accept a new connection. It is            an initiating function for an asynchronous            operation, and always returns immediately.                      This overload requires that the Protocol template parameter satisfy the            AcceptableProtocol type requirements.                      Parameters          peer_endpoint                  An endpoint object into which the endpoint of the remote peer will                  be written. Ownership of the peer_endpoint object is retained by                  the caller, which must guarantee that it is valid until the completion                  handler is called.                token                  The completion                  token that will be used to produce a completion handler,                  which will be called when the accept completes. Potential completion                  tokens include use_future, use_awaitable, yield_context, or a function                  object with the correct completion signature. The function signature                  of the completion handler must be:                void handler(  // Result of operation.  const boost::system::error_code&amp; error,  // On success, the newly accepted socket.  typename Protocol::socket::template    rebind_executor&lt;executor_type&gt;::other peer);                  Regardless of whether the asynchronous operation completes immediately                  or not, the completion handler will not be invoked from within                  this function. On immediate completion, invocation of the handler                  will be performed in a manner equivalent to using post.                            Completion            Signature          void(boost::system::error_code,   typename Protocol::socket::template     rebind_executor&lt;executor_type&gt;::other))            Example          void accept_handler(const boost::system::error_code&amp; error,    boost::asio::ip::tcp::socket peer){  if (!error)  {    // Accept succeeded.  }}...boost::asio::ip::tcp::acceptor acceptor(my_context);...boost::asio::ip::tcp::endpoint endpoint;acceptor.async_accept(endpoint, accept_handler);            Per-Operation            Cancellation                      On POSIX or Windows operating systems, this asynchronous operation supports            cancellation for the following cancellation_type values:                          cancellation_type::terminal                              cancellation_type::partial                              cancellation_type::total              Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/async_accept/overload6.html
basic_socket_acceptor::async_accept (3 of 8 overloads)basic_socket_acceptor::async_accept (3 of 8 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::async_accept          (3 of 8 overloads)            Start an asynchronous accept.          template&lt;    typename MoveAcceptToken = DEFAULT&gt;DEDUCED async_accept(    MoveAcceptToken &amp;&amp; token = DEFAULT);            This function is used to asynchronously accept a new connection. It is            an initiating function for an asynchronous            operation, and always returns immediately.                      This overload requires that the Protocol template parameter satisfy the            AcceptableProtocol type requirements.                      Parameters          token                  The completion                  token that will be used to produce a completion handler,                  which will be called when the accept completes. Potential completion                  tokens include use_future, use_awaitable, yield_context, or a function                  object with the correct completion signature. The function signature                  of the completion handler must be:                void handler(  // Result of operation.  const boost::system::error_code&amp; error,  // On success, the newly accepted socket.  typename Protocol::socket::template    rebind_executor&lt;executor_type&gt;::other peer);                  Regardless of whether the asynchronous operation completes immediately                  or not, the completion handler will not be invoked from within                  this function. On immediate completion, invocation of the handler                  will be performed in a manner equivalent to using post.                            Completion            Signature          void(boost::system::error_code,   typename Protocol::socket::template     rebind_executor&lt;executor_type&gt;::other))            Example          void accept_handler(const boost::system::error_code&amp; error,    boost::asio::ip::tcp::socket peer){  if (!error)  {    // Accept succeeded.  }}...boost::asio::ip::tcp::acceptor acceptor(my_context);...acceptor.async_accept(accept_handler);            Per-Operation            Cancellation                      On POSIX or Windows operating systems, this asynchronous operation supports            cancellation for the following cancellation_type values:                          cancellation_type::terminal                              cancellation_type::partial                              cancellation_type::total              Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/async_accept/overload3.html
basic_socket_acceptor::async_accept (4 of 8 overloads)basic_socket_acceptor::async_accept (4 of 8 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::async_accept          (4 of 8 overloads)            Start an asynchronous accept.          template&lt;    typename Executor1,    typename MoveAcceptToken = DEFAULT&gt;DEDUCED async_accept(    const Executor1 &amp; ex,    MoveAcceptToken &amp;&amp; token = DEFAULT,    typename constraint&lt; is_executor&lt; Executor1 &gt;::value||execution::is_executor&lt; Executor1 &gt;::value &gt;::type  = 0);            This function is used to asynchronously accept a new connection. It is            an initiating function for an asynchronous            operation, and always returns immediately.                      This overload requires that the Protocol template parameter satisfy the            AcceptableProtocol type requirements.                      Parameters          ex                  The I/O executor object to be used for the newly accepted socket.                token                  The completion                  token that will be used to produce a completion handler,                  which will be called when the accept completes. Potential completion                  tokens include use_future, use_awaitable, yield_context, or a function                  object with the correct completion signature. The function signature                  of the completion handler must be:                void handler(  // Result of operation.  const boost::system::error_code&amp; error,  // On success, the newly accepted socket.  typename Protocol::socket::template rebind_executor&lt;    Executor1&gt;::other peer);                  Regardless of whether the asynchronous operation completes immediately                  or not, the completion handler will not be invoked from within                  this function. On immediate completion, invocation of the handler                  will be performed in a manner equivalent to using post.                            Completion            Signature          void(boost::system::error_code,   typename Protocol::socket::template rebind_executor&lt;     Executor1&gt;::other))            Example          void accept_handler(const boost::system::error_code&amp; error,    boost::asio::ip::tcp::socket peer){  if (!error)  {    // Accept succeeded.  }}...boost::asio::ip::tcp::acceptor acceptor(my_context);...acceptor.async_accept(my_context2, accept_handler);            Per-Operation            Cancellation                      On POSIX or Windows operating systems, this asynchronous operation supports            cancellation for the following cancellation_type values:                          cancellation_type::terminal                              cancellation_type::partial                              cancellation_type::total              Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/async_accept/overload4.html
basic_socket_acceptor::async_accept (8 of 8 overloads)basic_socket_acceptor::async_accept (8 of 8 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::async_accept          (8 of 8 overloads)            Start an asynchronous accept.          template&lt;    typename ExecutionContext,    typename MoveAcceptToken = DEFAULT&gt;DEDUCED async_accept(    ExecutionContext &amp; context,    endpoint_type &amp; peer_endpoint,    MoveAcceptToken &amp;&amp; token = DEFAULT,    typename constraint&lt; is_convertible&lt; ExecutionContext &amp;, execution_context &amp; &gt;::value &gt;::type  = 0);            This function is used to asynchronously accept a new connection. It is            an initiating function for an asynchronous            operation, and always returns immediately.                      This overload requires that the Protocol template parameter satisfy the            AcceptableProtocol type requirements.                      Parameters          context                  The I/O execution context object to be used for the newly accepted                  socket.                peer_endpoint                  An endpoint object into which the endpoint of the remote peer will                  be written. Ownership of the peer_endpoint object is retained by                  the caller, which must guarantee that it is valid until the completion                  handler is called.                token                  The completion                  token that will be used to produce a completion handler,                  which will be called when the accept completes. Potential completion                  tokens include use_future, use_awaitable, yield_context, or a function                  object with the correct completion signature. The function signature                  of the completion handler must be:                void handler(  // Result of operation.  const boost::system::error_code&amp; error,  // On success, the newly accepted socket.  typename Protocol::socket::template rebind_executor&lt;    typename ExecutionContext::executor_type&gt;::other peer);                  Regardless of whether the asynchronous operation completes immediately                  or not, the completion handler will not be invoked from within                  this function. On immediate completion, invocation of the handler                  will be performed in a manner equivalent to using post.                            Completion            Signature          void(boost::system::error_code,   typename Protocol::socket::template rebind_executor&lt;     typename ExecutionContext::executor_type&gt;::other))            Example          void accept_handler(const boost::system::error_code&amp; error,    boost::asio::ip::tcp::socket peer){  if (!error)  {    // Accept succeeded.  }}...boost::asio::ip::tcp::acceptor acceptor(my_context);...boost::asio::ip::tcp::endpoint endpoint;acceptor.async_accept(my_context2, endpoint, accept_handler);            Per-Operation            Cancellation                      On POSIX or Windows operating systems, this asynchronous operation supports            cancellation for the following cancellation_type values:                          cancellation_type::terminal                              cancellation_type::partial                              cancellation_type::total              Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/async_accept/overload8.html
basic_socket_acceptor::async_accept (1 of 8 overloads)basic_socket_acceptor::async_accept (1 of 8 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::async_accept          (1 of 8 overloads)            Start an asynchronous accept.          template&lt;    typename Protocol1,    typename Executor1,    typename AcceptToken = DEFAULT&gt;DEDUCED async_accept(    basic_socket&lt; Protocol1, Executor1 &gt; &amp; peer,    AcceptToken &amp;&amp; token = DEFAULT,    typename constraint&lt; is_convertible&lt; Protocol, Protocol1 &gt;::value &gt;::type  = 0);            This function is used to asynchronously accept a new connection into            a socket, and additionally obtain the endpoint of the remote peer. It            is an initiating function for an asynchronous            operation, and always returns immediately.                      Parameters          peer                  The socket into which the new connection will be accepted. Ownership                  of the peer object is retained by the caller, which must guarantee                  that it is valid until the completion handler is called.                token                  The completion                  token that will be used to produce a completion handler,                  which will be called when the accept completes. Potential completion                  tokens include use_future, use_awaitable, yield_context, or a function                  object with the correct completion signature. The function signature                  of the completion handler must be:                void handler(  const boost::system::error_code&amp; error // Result of operation.);                  Regardless of whether the asynchronous operation completes immediately                  or not, the completion handler will not be invoked from within                  this function. On immediate completion, invocation of the handler                  will be performed in a manner equivalent to using post.                            Completion            Signature          void(boost::system::error_code)            Example          void accept_handler(const boost::system::error_code&amp; error){  if (!error)  {    // Accept succeeded.  }}...boost::asio::ip::tcp::acceptor acceptor(my_context);...boost::asio::ip::tcp::socket socket(my_context);acceptor.async_accept(socket, accept_handler);            Per-Operation            Cancellation                      On POSIX or Windows operating systems, this asynchronous operation supports            cancellation for the following cancellation_type values:                          cancellation_type::terminal                              cancellation_type::partial                              cancellation_type::total              Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/async_accept/overload1.html
basic_socket_acceptor::async_accept (7 of 8 overloads)basic_socket_acceptor::async_accept (7 of 8 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::async_accept          (7 of 8 overloads)            Start an asynchronous accept.          template&lt;    typename Executor1,    typename MoveAcceptToken = DEFAULT&gt;DEDUCED async_accept(    const Executor1 &amp; ex,    endpoint_type &amp; peer_endpoint,    MoveAcceptToken &amp;&amp; token = DEFAULT,    typename constraint&lt; is_executor&lt; Executor1 &gt;::value||execution::is_executor&lt; Executor1 &gt;::value &gt;::type  = 0);            This function is used to asynchronously accept a new connection. It is            an initiating function for an asynchronous            operation, and always returns immediately.                      This overload requires that the Protocol template parameter satisfy the            AcceptableProtocol type requirements.                      Parameters          ex                  The I/O executor object to be used for the newly accepted socket.                peer_endpoint                  An endpoint object into which the endpoint of the remote peer will                  be written. Ownership of the peer_endpoint object is retained by                  the caller, which must guarantee that it is valid until the completion                  handler is called.                token                  The completion                  token that will be used to produce a completion handler,                  which will be called when the accept completes. Potential completion                  tokens include use_future, use_awaitable, yield_context, or a function                  object with the correct completion signature. The function signature                  of the completion handler must be:                void handler(  // Result of operation.  const boost::system::error_code&amp; error,  // On success, the newly accepted socket.  typename Protocol::socket::template rebind_executor&lt;    Executor1&gt;::other peer);                  Regardless of whether the asynchronous operation completes immediately                  or not, the completion handler will not be invoked from within                  this function. On immediate completion, invocation of the handler                  will be performed in a manner equivalent to using post.                            Completion            Signature          void(boost::system::error_code,   typename Protocol::socket::template rebind_executor&lt;     Executor1&gt;::other))            Example          void accept_handler(const boost::system::error_code&amp; error,    boost::asio::ip::tcp::socket peer){  if (!error)  {    // Accept succeeded.  }}...boost::asio::ip::tcp::acceptor acceptor(my_context);...boost::asio::ip::tcp::endpoint endpoint;acceptor.async_accept(my_context2, endpoint, accept_handler);            Per-Operation            Cancellation                      On POSIX or Windows operating systems, this asynchronous operation supports            cancellation for the following cancellation_type values:                          cancellation_type::terminal                              cancellation_type::partial                              cancellation_type::total              Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/async_accept/overload7.html
basic_socket_acceptor::non_blockingbasic_socket_acceptor::non_blockingHomeLibrariesPeopleFAQMorebasic_socket_acceptor::non_blocking           Gets          the non-blocking mode of the acceptor.        bool non_blocking() const;  » more...          Sets the non-blocking mode of the acceptor.        void non_blocking(    bool mode);  » more...void non_blocking(    bool mode,    boost::system::error_code &amp; ec);  » more...Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/non_blocking.html
basic_socket_acceptor::get_optionbasic_socket_acceptor::get_optionHomeLibrariesPeopleFAQMorebasic_socket_acceptor::get_option           Get          an option from the acceptor.        template&lt;    typename GettableSocketOption&gt;void get_option(    GettableSocketOption &amp; option) const;  » more...template&lt;    typename GettableSocketOption&gt;void get_option(    GettableSocketOption &amp; option,    boost::system::error_code &amp; ec) const;  » more...Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/get_option.html
basic_socket_acceptor::broadcastbasic_socket_acceptor::broadcastHomeLibrariesPeopleFAQMorebasic_socket_acceptor::broadcast          Inherited from socket_base.                   Socket          option to permit sending of broadcast messages.        typedef implementation_defined broadcast;          Implements the SOL_SOCKET/SO_BROADCAST socket option.                  Examples                  Setting the option:        boost::asio::ip::udp::socket socket(my_context);...boost::asio::socket_base::broadcast option(true);socket.set_option(option);          Getting the current option value:        boost::asio::ip::udp::socket socket(my_context);...boost::asio::socket_base::broadcast option;socket.get_option(option);bool is_set = option.value();          Requirements                  Header: boost/asio/basic_socket_acceptor.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/broadcast.html
basic_socket_acceptor::io_control (2 of 2 overloads)basic_socket_acceptor::io_control (2 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::io_control          (2 of 2 overloads)            Perform an IO control command on the acceptor.          template&lt;    typename IoControlCommand&gt;void io_control(    IoControlCommand &amp; command,    boost::system::error_code &amp; ec);            This function is used to execute an IO control command on the acceptor.                      Parameters          command                  The IO control command to be performed on the acceptor.                ec                  Set to indicate what error occurred, if any.                            Example                      Getting the number of bytes ready to read:          boost::asio::ip::tcp::acceptor acceptor(my_context);...boost::asio::ip::tcp::acceptor::non_blocking_io command(true);boost::system::error_code ec;socket.io_control(command, ec);if (ec){  // An error occurred.}Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/io_control/overload2.html
basic_socket_acceptor::io_control (1 of 2 overloads)basic_socket_acceptor::io_control (1 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::io_control          (1 of 2 overloads)            Perform an IO control command on the acceptor.          template&lt;    typename IoControlCommand&gt;void io_control(    IoControlCommand &amp; command);            This function is used to execute an IO control command on the acceptor.                      Parameters          command                  The IO control command to be performed on the acceptor.                            Exceptions          boost::system::system_error                  Thrown on failure.                            Example                      Getting the number of bytes ready to read:          boost::asio::ip::tcp::acceptor acceptor(my_context);...boost::asio::ip::tcp::acceptor::non_blocking_io command(true);socket.io_control(command);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/io_control/overload1.html
basic_socket_acceptor::non_blocking (2 of 3 overloads)basic_socket_acceptor::non_blocking (2 of 3 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::non_blocking          (2 of 3 overloads)            Sets the non-blocking mode of the acceptor.          void non_blocking(    bool mode);            Parameters          mode                  If true, the acceptor's                  synchronous operations will fail with boost::asio::error::would_block                  if they are unable to perform the requested operation immediately.                  If false, synchronous                  operations will block until complete.                            Exceptions          boost::system::system_error                  Thrown on failure.                            Remarks                      The non-blocking mode has no effect on the behaviour of asynchronous            operations. Asynchronous operations will never fail with the error boost::asio::error::would_block.          Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/non_blocking/overload2.html
basic_socket_acceptor::non_blocking (3 of 3 overloads)basic_socket_acceptor::non_blocking (3 of 3 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::non_blocking          (3 of 3 overloads)            Sets the non-blocking mode of the acceptor.          void non_blocking(    bool mode,    boost::system::error_code &amp; ec);            Parameters          mode                  If true, the acceptor's                  synchronous operations will fail with boost::asio::error::would_block                  if they are unable to perform the requested operation immediately.                  If false, synchronous                  operations will block until complete.                ec                  Set to indicate what error occurred, if any.                            Remarks                      The non-blocking mode has no effect on the behaviour of asynchronous            operations. Asynchronous operations will never fail with the error boost::asio::error::would_block.          Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/non_blocking/overload3.html
basic_socket_acceptor::non_blocking (1 of 3 overloads)basic_socket_acceptor::non_blocking (1 of 3 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::non_blocking          (1 of 3 overloads)            Gets the non-blocking mode of the acceptor.          bool non_blocking() const;            Return            Value                      true if the acceptor's synchronous            operations will fail with boost::asio::error::would_block            if they are unable to perform the requested operation immediately. If            false, synchronous operations            will block until complete.                      Remarks                      The non-blocking mode has no effect on the behaviour of asynchronous            operations. Asynchronous operations will never fail with the error boost::asio::error::would_block.          Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/non_blocking/overload1.html
basic_socket_acceptor::is_openbasic_socket_acceptor::is_openHomeLibrariesPeopleFAQMorebasic_socket_acceptor::is_open           Determine          whether the acceptor is open.        bool is_open() const;Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/is_open.html
basic_socket_acceptor::executor_typebasic_socket_acceptor::executor_typeHomeLibrariesPeopleFAQMorebasic_socket_acceptor::executor_type           The          type of the executor associated with the object.        typedef Executor executor_type;          Requirements                  Header: boost/asio/basic_socket_acceptor.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/executor_type.html
basic_socket_acceptor::basic_socket_acceptorbasic_socket_acceptor::basic_socket_acceptorHomeLibrariesPeopleFAQMorebasic_socket_acceptor::basic_socket_acceptor           Construct          an acceptor without opening it.        explicit basic_socket_acceptor(    const executor_type &amp; ex);  » more...template&lt;    typename ExecutionContext&gt;explicit basic_socket_acceptor(    ExecutionContext &amp; context,    typename constraint&lt; is_convertible&lt; ExecutionContext &amp;, execution_context &amp; &gt;::value &gt;::type  = 0);  » more...          Construct an open acceptor.        basic_socket_acceptor(    const executor_type &amp; ex,    const protocol_type &amp; protocol);  » more...template&lt;    typename ExecutionContext&gt;basic_socket_acceptor(    ExecutionContext &amp; context,    const protocol_type &amp; protocol,    typename constraint&lt; is_convertible&lt; ExecutionContext &amp;, execution_context &amp; &gt;::value, defaulted_constraint &gt;::type  = defaulted_constraint());  » more...          Construct an acceptor opened on the given endpoint.        basic_socket_acceptor(    const executor_type &amp; ex,    const endpoint_type &amp; endpoint,    bool reuse_addr = true);  » more...template&lt;    typename ExecutionContext&gt;basic_socket_acceptor(    ExecutionContext &amp; context,    const endpoint_type &amp; endpoint,    bool reuse_addr = true,    typename constraint&lt; is_convertible&lt; ExecutionContext &amp;, execution_context &amp; &gt;::value &gt;::type  = 0);  » more...          Construct a basic_socket_acceptor on an existing          native acceptor.        basic_socket_acceptor(    const executor_type &amp; ex,    const protocol_type &amp; protocol,    const native_handle_type &amp; native_acceptor);  » more...template&lt;    typename ExecutionContext&gt;basic_socket_acceptor(    ExecutionContext &amp; context,    const protocol_type &amp; protocol,    const native_handle_type &amp; native_acceptor,    typename constraint&lt; is_convertible&lt; ExecutionContext &amp;, execution_context &amp; &gt;::value &gt;::type  = 0);  » more...          Move-construct a basic_socket_acceptor from another.        basic_socket_acceptor(    basic_socket_acceptor &amp;&amp; other);  » more...          Move-construct a basic_socket_acceptor from an          acceptor of another protocol type.        template&lt;    typename Protocol1,    typename Executor1&gt;basic_socket_acceptor(    basic_socket_acceptor&lt; Protocol1, Executor1 &gt; &amp;&amp; other,    typename constraint&lt; is_convertible&lt; Protocol1, Protocol &gt;::value &amp;&amp;is_convertible&lt; Executor1, Executor &gt;::value &gt;::type  = 0);  » more...Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/basic_socket_acceptor.html
basic_socket_acceptor::io_controlbasic_socket_acceptor::io_controlHomeLibrariesPeopleFAQMorebasic_socket_acceptor::io_control           Perform          an IO control command on the acceptor.        template&lt;    typename IoControlCommand&gt;void io_control(    IoControlCommand &amp; command);  » more...template&lt;    typename IoControlCommand&gt;void io_control(    IoControlCommand &amp; command,    boost::system::error_code &amp; ec);  » more...Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/io_control.html
basic_socket_acceptor::accept (5 of 16 overloads)basic_socket_acceptor::accept (5 of 16 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::accept          (5 of 16 overloads)            Accept a new connection.          Protocol::socket::template rebind_executor&lt; executor_type &gt;::other accept();            This function is used to accept a new connection from a peer. The function            call will block until a new connection has been accepted successfully            or an error occurs.                      This overload requires that the Protocol template parameter satisfy the            AcceptableProtocol type requirements.                      Return            Value                      A socket object representing the newly accepted connection.                      Exceptions          boost::system::system_error                  Thrown on failure.                            Example          boost::asio::ip::tcp::acceptor acceptor(my_context);...boost::asio::ip::tcp::socket socket(acceptor.accept());Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/accept/overload5.html
basic_socket_acceptor::accept (12 of 16 overloads)basic_socket_acceptor::accept (12 of 16 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::accept          (12 of 16 overloads)            Accept a new connection.          Protocol::socket::template rebind_executor&lt; executor_type &gt;::other accept(    endpoint_type &amp; peer_endpoint,    boost::system::error_code &amp; ec);            This function is used to accept a new connection from a peer. The function            call will block until a new connection has been accepted successfully            or an error occurs.                      This overload requires that the Protocol template parameter satisfy the            AcceptableProtocol type requirements.                      Parameters          peer_endpoint                  An endpoint object into which the endpoint of the remote peer will                  be written.                ec                  Set to indicate what error occurred, if any.                            Return            Value                      On success, a socket object representing the newly accepted connection.            On error, a socket object where is_open() is false.                      Example          boost::asio::ip::tcp::acceptor acceptor(my_context);...boost::asio::ip::tcp::endpoint endpoint;boost::asio::ip::tcp::socket socket(acceptor.accept(endpoint, ec));if (ec){  // An error occurred.}Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/accept/overload12.html
basic_socket_acceptor::accept (2 of 16 overloads)basic_socket_acceptor::accept (2 of 16 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::accept          (2 of 16 overloads)            Accept a new connection.          template&lt;    typename Protocol1,    typename Executor1&gt;void accept(    basic_socket&lt; Protocol1, Executor1 &gt; &amp; peer,    boost::system::error_code &amp; ec,    typename constraint&lt; is_convertible&lt; Protocol, Protocol1 &gt;::value &gt;::type  = 0);            This function is used to accept a new connection from a peer into the            given socket. The function call will block until a new connection has            been accepted successfully or an error occurs.                      Parameters          peer                  The socket into which the new connection will be accepted.                ec                  Set to indicate what error occurred, if any.                            Example          boost::asio::ip::tcp::acceptor acceptor(my_context);...boost::asio::ip::tcp::socket socket(my_context);boost::system::error_code ec;acceptor.accept(socket, ec);if (ec){  // An error occurred.}Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/accept/overload2.html
basic_socket_acceptor::accept (6 of 16 overloads)basic_socket_acceptor::accept (6 of 16 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::accept          (6 of 16 overloads)            Accept a new connection.          Protocol::socket::template rebind_executor&lt; executor_type &gt;::other accept(    boost::system::error_code &amp; ec);            This function is used to accept a new connection from a peer. The function            call will block until a new connection has been accepted successfully            or an error occurs.                      This overload requires that the Protocol template parameter satisfy the            AcceptableProtocol type requirements.                      Parameters          ec                  Set to indicate what error occurred, if any.                            Return            Value                      On success, a socket object representing the newly accepted connection.            On error, a socket object where is_open() is false.                      Example          boost::asio::ip::tcp::acceptor acceptor(my_context);...boost::asio::ip::tcp::socket socket(acceptor.accept(ec));if (ec){  // An error occurred.}Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/accept/overload6.html
basic_socket_acceptor::accept (10 of 16 overloads)basic_socket_acceptor::accept (10 of 16 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::accept          (10 of 16 overloads)            Accept a new connection.          template&lt;    typename ExecutionContext&gt;Protocol::socket::template rebind_executor&lt; typename ExecutionContext::executor_type &gt;::other accept(    ExecutionContext &amp; context,    boost::system::error_code &amp; ec,    typename constraint&lt; is_convertible&lt; ExecutionContext &amp;, execution_context &amp; &gt;::value &gt;::type  = 0);            This function is used to accept a new connection from a peer. The function            call will block until a new connection has been accepted successfully            or an error occurs.                      This overload requires that the Protocol template parameter satisfy the            AcceptableProtocol type requirements.                      Parameters          context                  The I/O execution context object to be used for the newly accepted                  socket.                ec                  Set to indicate what error occurred, if any.                            Return            Value                      On success, a socket object representing the newly accepted connection.            On error, a socket object where is_open() is false.                      Example          boost::asio::ip::tcp::acceptor acceptor(my_context);...boost::asio::ip::tcp::socket socket(acceptor.accept(my_context2, ec));if (ec){  // An error occurred.}Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/accept/overload10.html
basic_socket_acceptor::accept (3 of 16 overloads)basic_socket_acceptor::accept (3 of 16 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::accept          (3 of 16 overloads)            Accept a new connection and obtain the endpoint of the peer.          template&lt;    typename Executor1&gt;void accept(    basic_socket&lt; protocol_type, Executor1 &gt; &amp; peer,    endpoint_type &amp; peer_endpoint);            This function is used to accept a new connection from a peer into the            given socket, and additionally provide the endpoint of the remote peer.            The function call will block until a new connection has been accepted            successfully or an error occurs.                      Parameters          peer                  The socket into which the new connection will be accepted.                peer_endpoint                  An endpoint object which will receive the endpoint of the remote                  peer.                            Exceptions          boost::system::system_error                  Thrown on failure.                            Example          boost::asio::ip::tcp::acceptor acceptor(my_context);...boost::asio::ip::tcp::socket socket(my_context);boost::asio::ip::tcp::endpoint endpoint;acceptor.accept(socket, endpoint);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/accept/overload3.html
basic_socket_acceptor::accept (16 of 16 overloads)basic_socket_acceptor::accept (16 of 16 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::accept          (16 of 16 overloads)            Accept a new connection.          template&lt;    typename ExecutionContext&gt;Protocol::socket::template rebind_executor&lt; typename ExecutionContext::executor_type &gt;::other accept(    ExecutionContext &amp; context,    endpoint_type &amp; peer_endpoint,    boost::system::error_code &amp; ec,    typename constraint&lt; is_convertible&lt; ExecutionContext &amp;, execution_context &amp; &gt;::value &gt;::type  = 0);            This function is used to accept a new connection from a peer. The function            call will block until a new connection has been accepted successfully            or an error occurs.                      This overload requires that the Protocol template parameter satisfy the            AcceptableProtocol type requirements.                      Parameters          context                  The I/O execution context object to be used for the newly accepted                  socket.                peer_endpoint                  An endpoint object into which the endpoint of the remote peer will                  be written.                ec                  Set to indicate what error occurred, if any.                            Return            Value                      On success, a socket object representing the newly accepted connection.            On error, a socket object where is_open() is false.                      Example          boost::asio::ip::tcp::acceptor acceptor(my_context);...boost::asio::ip::tcp::endpoint endpoint;boost::asio::ip::tcp::socket socket(    acceptor.accept(my_context2, endpoint, ec));if (ec){  // An error occurred.}Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/accept/overload16.html
basic_socket_acceptor::accept (13 of 16 overloads)basic_socket_acceptor::accept (13 of 16 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::accept          (13 of 16 overloads)            Accept a new connection.          template&lt;    typename Executor1&gt;Protocol::socket::template rebind_executor&lt; Executor1 &gt;::other accept(    const Executor1 &amp; ex,    endpoint_type &amp; peer_endpoint,    typename constraint&lt; is_executor&lt; Executor1 &gt;::value||execution::is_executor&lt; Executor1 &gt;::value &gt;::type  = 0);            This function is used to accept a new connection from a peer. The function            call will block until a new connection has been accepted successfully            or an error occurs.                      This overload requires that the Protocol template parameter satisfy the            AcceptableProtocol type requirements.                      Parameters          ex                  The I/O executor object to be used for the newly accepted socket.                peer_endpoint                  An endpoint object into which the endpoint of the remote peer will                  be written.                            Return            Value                      A socket object representing the newly accepted connection.                      Exceptions          boost::system::system_error                  Thrown on failure.                            Example          boost::asio::ip::tcp::acceptor acceptor(my_context);...boost::asio::ip::tcp::endpoint endpoint;boost::asio::ip::tcp::socket socket(    acceptor.accept(my_context2, endpoint));Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/accept/overload13.html
basic_socket_acceptor::accept (4 of 16 overloads)basic_socket_acceptor::accept (4 of 16 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::accept          (4 of 16 overloads)            Accept a new connection and obtain the endpoint of the peer.          template&lt;    typename Executor1&gt;void accept(    basic_socket&lt; protocol_type, Executor1 &gt; &amp; peer,    endpoint_type &amp; peer_endpoint,    boost::system::error_code &amp; ec);            This function is used to accept a new connection from a peer into the            given socket, and additionally provide the endpoint of the remote peer.            The function call will block until a new connection has been accepted            successfully or an error occurs.                      Parameters          peer                  The socket into which the new connection will be accepted.                peer_endpoint                  An endpoint object which will receive the endpoint of the remote                  peer.                ec                  Set to indicate what error occurred, if any.                            Example          boost::asio::ip::tcp::acceptor acceptor(my_context);...boost::asio::ip::tcp::socket socket(my_context);boost::asio::ip::tcp::endpoint endpoint;boost::system::error_code ec;acceptor.accept(socket, endpoint, ec);if (ec){  // An error occurred.}Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/accept/overload4.html
basic_socket_acceptor::accept (8 of 16 overloads)basic_socket_acceptor::accept (8 of 16 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::accept          (8 of 16 overloads)            Accept a new connection.          template&lt;    typename ExecutionContext&gt;Protocol::socket::template rebind_executor&lt; typename ExecutionContext::executor_type &gt;::other accept(    ExecutionContext &amp; context,    typename constraint&lt; is_convertible&lt; ExecutionContext &amp;, execution_context &amp; &gt;::value &gt;::type  = 0);            This function is used to accept a new connection from a peer. The function            call will block until a new connection has been accepted successfully            or an error occurs.                      This overload requires that the Protocol template parameter satisfy the            AcceptableProtocol type requirements.                      Parameters          context                  The I/O execution context object to be used for the newly accepted                  socket.                            Return            Value                      A socket object representing the newly accepted connection.                      Exceptions          boost::system::system_error                  Thrown on failure.                            Example          boost::asio::ip::tcp::acceptor acceptor(my_context);...boost::asio::ip::tcp::socket socket(acceptor.accept());Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/accept/overload8.html
basic_socket_acceptor::accept (1 of 16 overloads)basic_socket_acceptor::accept (1 of 16 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::accept          (1 of 16 overloads)            Accept a new connection.          template&lt;    typename Protocol1,    typename Executor1&gt;void accept(    basic_socket&lt; Protocol1, Executor1 &gt; &amp; peer,    typename constraint&lt; is_convertible&lt; Protocol, Protocol1 &gt;::value &gt;::type  = 0);            This function is used to accept a new connection from a peer into the            given socket. The function call will block until a new connection has            been accepted successfully or an error occurs.                      Parameters          peer                  The socket into which the new connection will be accepted.                            Exceptions          boost::system::system_error                  Thrown on failure.                            Example          boost::asio::ip::tcp::acceptor acceptor(my_context);...boost::asio::ip::tcp::socket socket(my_context);acceptor.accept(socket);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/accept/overload1.html
basic_socket_acceptor::accept (15 of 16 overloads)basic_socket_acceptor::accept (15 of 16 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::accept          (15 of 16 overloads)            Accept a new connection.          template&lt;    typename Executor1&gt;Protocol::socket::template rebind_executor&lt; Executor1 &gt;::other accept(    const executor_type &amp; ex,    endpoint_type &amp; peer_endpoint,    boost::system::error_code &amp; ec,    typename constraint&lt; is_executor&lt; Executor1 &gt;::value||execution::is_executor&lt; Executor1 &gt;::value &gt;::type  = 0);            This function is used to accept a new connection from a peer. The function            call will block until a new connection has been accepted successfully            or an error occurs.                      This overload requires that the Protocol template parameter satisfy the            AcceptableProtocol type requirements.                      Parameters          ex                  The I/O executor object to be used for the newly accepted socket.                peer_endpoint                  An endpoint object into which the endpoint of the remote peer will                  be written.                ec                  Set to indicate what error occurred, if any.                            Return            Value                      On success, a socket object representing the newly accepted connection.            On error, a socket object where is_open() is false.                      Example          boost::asio::ip::tcp::acceptor acceptor(my_context);...boost::asio::ip::tcp::endpoint endpoint;boost::asio::ip::tcp::socket socket(    acceptor.accept(my_context2, endpoint, ec));if (ec){  // An error occurred.}Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/accept/overload15.html
basic_socket_acceptor::accept (11 of 16 overloads)basic_socket_acceptor::accept (11 of 16 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::accept          (11 of 16 overloads)            Accept a new connection.          Protocol::socket::template rebind_executor&lt; executor_type &gt;::other accept(    endpoint_type &amp; peer_endpoint);            This function is used to accept a new connection from a peer. The function            call will block until a new connection has been accepted successfully            or an error occurs.                      This overload requires that the Protocol template parameter satisfy the            AcceptableProtocol type requirements.                      Parameters          peer_endpoint                  An endpoint object into which the endpoint of the remote peer will                  be written.                            Return            Value                      A socket object representing the newly accepted connection.                      Exceptions          boost::system::system_error                  Thrown on failure.                            Example          boost::asio::ip::tcp::acceptor acceptor(my_context);...boost::asio::ip::tcp::endpoint endpoint;boost::asio::ip::tcp::socket socket(acceptor.accept(endpoint));Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/accept/overload11.html
basic_socket_acceptor::accept (7 of 16 overloads)basic_socket_acceptor::accept (7 of 16 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::accept          (7 of 16 overloads)            Accept a new connection.          template&lt;    typename Executor1&gt;Protocol::socket::template rebind_executor&lt; Executor1 &gt;::other accept(    const Executor1 &amp; ex,    typename constraint&lt; is_executor&lt; Executor1 &gt;::value||execution::is_executor&lt; Executor1 &gt;::value &gt;::type  = 0);            This function is used to accept a new connection from a peer. The function            call will block until a new connection has been accepted successfully            or an error occurs.                      This overload requires that the Protocol template parameter satisfy the            AcceptableProtocol type requirements.                      Parameters          ex                  The I/O executor object to be used for the newly accepted socket.                            Return            Value                      A socket object representing the newly accepted connection.                      Exceptions          boost::system::system_error                  Thrown on failure.                            Example          boost::asio::ip::tcp::acceptor acceptor(my_context);...boost::asio::ip::tcp::socket socket(acceptor.accept());Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/accept/overload7.html
basic_socket_acceptor::accept (9 of 16 overloads)basic_socket_acceptor::accept (9 of 16 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::accept          (9 of 16 overloads)            Accept a new connection.          template&lt;    typename Executor1&gt;Protocol::socket::template rebind_executor&lt; Executor1 &gt;::other accept(    const Executor1 &amp; ex,    boost::system::error_code &amp; ec,    typename constraint&lt; is_executor&lt; Executor1 &gt;::value||execution::is_executor&lt; Executor1 &gt;::value &gt;::type  = 0);            This function is used to accept a new connection from a peer. The function            call will block until a new connection has been accepted successfully            or an error occurs.                      This overload requires that the Protocol template parameter satisfy the            AcceptableProtocol type requirements.                      Parameters          ex                  The I/O executor object to be used for the newly accepted socket.                ec                  Set to indicate what error occurred, if any.                            Return            Value                      On success, a socket object representing the newly accepted connection.            On error, a socket object where is_open() is false.                      Example          boost::asio::ip::tcp::acceptor acceptor(my_context);...boost::asio::ip::tcp::socket socket(acceptor.accept(my_context2, ec));if (ec){  // An error occurred.}Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/accept/overload9.html
basic_socket_acceptor::accept (14 of 16 overloads)basic_socket_acceptor::accept (14 of 16 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::accept          (14 of 16 overloads)            Accept a new connection.          template&lt;    typename ExecutionContext&gt;Protocol::socket::template rebind_executor&lt; typename ExecutionContext::executor_type &gt;::other accept(    ExecutionContext &amp; context,    endpoint_type &amp; peer_endpoint,    typename constraint&lt; is_convertible&lt; ExecutionContext &amp;, execution_context &amp; &gt;::value &gt;::type  = 0);            This function is used to accept a new connection from a peer. The function            call will block until a new connection has been accepted successfully            or an error occurs.                      This overload requires that the Protocol template parameter satisfy the            AcceptableProtocol type requirements.                      Parameters          context                  The I/O execution context object to be used for the newly accepted                  socket.                peer_endpoint                  An endpoint object into which the endpoint of the remote peer will                  be written.                            Return            Value                      A socket object representing the newly accepted connection.                      Exceptions          boost::system::system_error                  Thrown on failure.                            Example          boost::asio::ip::tcp::acceptor acceptor(my_context);...boost::asio::ip::tcp::endpoint endpoint;boost::asio::ip::tcp::socket socket(    acceptor.accept(my_context2, endpoint));Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/accept/overload14.html
basic_socket_acceptor::native_non_blockingbasic_socket_acceptor::native_non_blockingHomeLibrariesPeopleFAQMorebasic_socket_acceptor::native_non_blocking           Gets          the non-blocking mode of the native acceptor implementation.        bool native_non_blocking() const;  » more...          Sets the non-blocking mode of the native acceptor implementation.        void native_non_blocking(    bool mode);  » more...void native_non_blocking(    bool mode,    boost::system::error_code &amp; ec);  » more...Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/native_non_blocking.html
basic_socket_acceptor::send_low_watermarkbasic_socket_acceptor::send_low_watermarkHomeLibrariesPeopleFAQMorebasic_socket_acceptor::send_low_watermark          Inherited from socket_base.                   Socket          option for the send low watermark.        typedef implementation_defined send_low_watermark;          Implements the SOL_SOCKET/SO_SNDLOWAT socket option.                  Examples                  Setting the option:        boost::asio::ip::tcp::socket socket(my_context);...boost::asio::socket_base::send_low_watermark option(1024);socket.set_option(option);          Getting the current option value:        boost::asio::ip::tcp::socket socket(my_context);...boost::asio::socket_base::send_low_watermark option;socket.get_option(option);int size = option.value();          Requirements                  Header: boost/asio/basic_socket_acceptor.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/send_low_watermark.html
basic_socket_acceptor::bytes_readablebasic_socket_acceptor::bytes_readableHomeLibrariesPeopleFAQMorebasic_socket_acceptor::bytes_readable          Inherited from socket_base.                   IO          control command to get the amount of data that can be read without blocking.        typedef implementation_defined bytes_readable;          Implements the FIONREAD IO control command.                  Example        boost::asio::ip::tcp::socket socket(my_context);...boost::asio::socket_base::bytes_readable command(true);socket.io_control(command);std::size_t bytes_readable = command.get();          Requirements                  Header: boost/asio/basic_socket_acceptor.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/bytes_readable.html
basic_socket_acceptor::assign (2 of 2 overloads)basic_socket_acceptor::assign (2 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::assign          (2 of 2 overloads)            Assigns an existing native acceptor to the acceptor.          void assign(    const protocol_type &amp; protocol,    const native_handle_type &amp; native_acceptor,    boost::system::error_code &amp; ec);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/assign/overload2.html
basic_socket_acceptor::assign (1 of 2 overloads)basic_socket_acceptor::assign (1 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::assign          (1 of 2 overloads)            Assigns an existing native acceptor to the acceptor.          void assign(    const protocol_type &amp; protocol,    const native_handle_type &amp; native_acceptor);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/assign/overload1.html
basic_socket_acceptor::listenbasic_socket_acceptor::listenHomeLibrariesPeopleFAQMorebasic_socket_acceptor::listen           Place          the acceptor into the state where it will listen for new connections.        void listen(    int backlog = socket_base::max_listen_connections);  » more...void listen(    int backlog,    boost::system::error_code &amp; ec);  » more...Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/listen.html
basic_socket_acceptor::local_endpoint (2 of 2 overloads)basic_socket_acceptor::local_endpoint (2 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::local_endpoint          (2 of 2 overloads)            Get the local endpoint of the acceptor.          endpoint_type local_endpoint(    boost::system::error_code &amp; ec) const;            This function is used to obtain the locally bound endpoint of the acceptor.                      Parameters          ec                  Set to indicate what error occurred, if any.                            Return            Value                      An object that represents the local endpoint of the acceptor. Returns            a default-constructed endpoint object if an error occurred and the error            handler did not throw an exception.                      Example          boost::asio::ip::tcp::acceptor acceptor(my_context);...boost::system::error_code ec;boost::asio::ip::tcp::endpoint endpoint = acceptor.local_endpoint(ec);if (ec){  // An error occurred.}Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/local_endpoint/overload2.html
basic_socket_acceptor::local_endpoint (1 of 2 overloads)basic_socket_acceptor::local_endpoint (1 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::local_endpoint          (1 of 2 overloads)            Get the local endpoint of the acceptor.          endpoint_type local_endpoint() const;            This function is used to obtain the locally bound endpoint of the acceptor.                      Return            Value                      An object that represents the local endpoint of the acceptor.                      Exceptions          boost::system::system_error                  Thrown on failure.                            Example          boost::asio::ip::tcp::acceptor acceptor(my_context);...boost::asio::ip::tcp::endpoint endpoint = acceptor.local_endpoint();Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/local_endpoint/overload1.html
basic_socket_acceptor::do_not_routebasic_socket_acceptor::do_not_routeHomeLibrariesPeopleFAQMorebasic_socket_acceptor::do_not_route          Inherited from socket_base.                   Socket          option to prevent routing, use local interfaces only.        typedef implementation_defined do_not_route;          Implements the SOL_SOCKET/SO_DONTROUTE socket option.                  Examples                  Setting the option:        boost::asio::ip::udp::socket socket(my_context);...boost::asio::socket_base::do_not_route option(true);socket.set_option(option);          Getting the current option value:        boost::asio::ip::udp::socket socket(my_context);...boost::asio::socket_base::do_not_route option;socket.get_option(option);bool is_set = option.value();          Requirements                  Header: boost/asio/basic_socket_acceptor.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/do_not_route.html
basic_socket_acceptor::keep_alivebasic_socket_acceptor::keep_aliveHomeLibrariesPeopleFAQMorebasic_socket_acceptor::keep_alive          Inherited from socket_base.                   Socket          option to send keep-alives.        typedef implementation_defined keep_alive;          Implements the SOL_SOCKET/SO_KEEPALIVE socket option.                  Examples                  Setting the option:        boost::asio::ip::tcp::socket socket(my_context);...boost::asio::socket_base::keep_alive option(true);socket.set_option(option);          Getting the current option value:        boost::asio::ip::tcp::socket socket(my_context);...boost::asio::socket_base::keep_alive option;socket.get_option(option);bool is_set = option.value();          Requirements                  Header: boost/asio/basic_socket_acceptor.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/keep_alive.html
basic_socket_acceptor::native_handle_typebasic_socket_acceptor::native_handle_typeHomeLibrariesPeopleFAQMorebasic_socket_acceptor::native_handle_type           The          native representation of an acceptor.        typedef implementation_defined native_handle_type;          Requirements                  Header: boost/asio/basic_socket_acceptor.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/native_handle_type.html
basic_socket_acceptor::enable_connection_abortedbasic_socket_acceptor::enable_connection_abortedHomeLibrariesPeopleFAQMorebasic_socket_acceptor::enable_connection_aborted          Inherited from socket_base.                   Socket          option to report aborted connections on accept.        typedef implementation_defined enable_connection_aborted;          Implements a custom socket option that determines whether or not an accept          operation is permitted to fail with boost::asio::error::connection_aborted.          By default the option is false.                  Examples                  Setting the option:        boost::asio::ip::tcp::acceptor acceptor(my_context);...boost::asio::socket_base::enable_connection_aborted option(true);acceptor.set_option(option);          Getting the current option value:        boost::asio::ip::tcp::acceptor acceptor(my_context);...boost::asio::socket_base::enable_connection_aborted option;acceptor.get_option(option);bool is_set = option.value();          Requirements                  Header: boost/asio/basic_socket_acceptor.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/enable_connection_aborted.html
basic_socket_acceptor::message_out_of_bandbasic_socket_acceptor::message_out_of_bandHomeLibrariesPeopleFAQMorebasic_socket_acceptor::message_out_of_band          Inherited from socket_base.                   Process          out-of-band data.        static const int message_out_of_band = implementation_defined;Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/message_out_of_band.html
basic_socket_acceptor::protocol_typebasic_socket_acceptor::protocol_typeHomeLibrariesPeopleFAQMorebasic_socket_acceptor::protocol_type           The          protocol type.        typedef Protocol protocol_type;          Requirements                  Header: boost/asio/basic_socket_acceptor.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/protocol_type.html
basic_socket_acceptor::message_end_of_recordbasic_socket_acceptor::message_end_of_recordHomeLibrariesPeopleFAQMorebasic_socket_acceptor::message_end_of_record          Inherited from socket_base.                   Specifies          that the data marks the end of a record.        static const int message_end_of_record = implementation_defined;Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/message_end_of_record.html
basic_socket_acceptor::shutdown_typebasic_socket_acceptor::shutdown_typeHomeLibrariesPeopleFAQMorebasic_socket_acceptor::shutdown_type          Inherited from socket_base.                   Different          ways a socket may be shutdown.        enum shutdown_type                              Values        shutdown_receive                Shutdown the receive side of the socket.              shutdown_send                Shutdown the send side of the socket.              shutdown_both                Shutdown both send and receive on the socket.              Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/shutdown_type.html
basic_socket_acceptor::operator= (2 of 2 overloads)basic_socket_acceptor::operator= (2 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::operator=          (2 of 2 overloads)            Move-assign a basic_socket_acceptor from an            acceptor of another protocol type.          template&lt;    typename Protocol1,    typename Executor1&gt;constraint&lt; is_convertible&lt; Protocol1, Protocol &gt;::value &amp;&amp;is_convertible&lt; Executor1, Executor &gt;::value, basic_socket_acceptor &amp; &gt;::type operator=(    basic_socket_acceptor&lt; Protocol1, Executor1 &gt; &amp;&amp; other);            This assignment operator moves an acceptor from one object to another.                      Parameters          other                  The other basic_socket_acceptor                  object from which the move will occur.                            Remarks                      Following the move, the moved-from object is in the same state as if            constructed using the basic_socket_acceptor(const executor_type&amp;)            constructor.          Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/operator_eq_/overload2.html
basic_socket_acceptor::operator= (1 of 2 overloads)basic_socket_acceptor::operator= (1 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::operator=          (1 of 2 overloads)            Move-assign a basic_socket_acceptor from another.          basic_socket_acceptor &amp; operator=(    basic_socket_acceptor &amp;&amp; other);            This assignment operator moves an acceptor from one object to another.                      Parameters          other                  The other basic_socket_acceptor                  object from which the move will occur.                            Remarks                      Following the move, the moved-from object is in the same state as if            constructed using the basic_socket_acceptor(const executor_type&amp;)            constructor.          Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/operator_eq_/overload1.html
basic_socket_acceptor::native_non_blocking (2 of 3 overloads)basic_socket_acceptor::native_non_blocking (2 of 3 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::native_non_blocking          (2 of 3 overloads)            Sets the non-blocking mode of the native acceptor implementation.          void native_non_blocking(    bool mode);            This function is used to modify the non-blocking mode of the underlying            native acceptor. It has no effect on the behaviour of the acceptor object's            synchronous operations.                      Parameters          mode                  If true, the underlying                  acceptor is put into non-blocking mode and direct system calls                  may fail with boost::asio::error::would_block                  (or the equivalent system error).                            Exceptions          boost::system::system_error                  Thrown on failure. If the mode                  is false, but the                  current value of non_blocking() is true,                  this function fails with boost::asio::error::invalid_argument,                  as the combination does not make sense.                Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/native_non_blocking/overload2.html
basic_socket_acceptor::native_non_blocking (3 of 3 overloads)basic_socket_acceptor::native_non_blocking (3 of 3 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::native_non_blocking          (3 of 3 overloads)            Sets the non-blocking mode of the native acceptor implementation.          void native_non_blocking(    bool mode,    boost::system::error_code &amp; ec);            This function is used to modify the non-blocking mode of the underlying            native acceptor. It has no effect on the behaviour of the acceptor object's            synchronous operations.                      Parameters          mode                  If true, the underlying                  acceptor is put into non-blocking mode and direct system calls                  may fail with boost::asio::error::would_block                  (or the equivalent system error).                ec                  Set to indicate what error occurred, if any. If the mode is false,                  but the current value of non_blocking() is true,                  this function fails with boost::asio::error::invalid_argument,                  as the combination does not make sense.                Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/native_non_blocking/overload3.html
basic_socket_acceptor::native_non_blocking (1 of 3 overloads)basic_socket_acceptor::native_non_blocking (1 of 3 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::native_non_blocking          (1 of 3 overloads)            Gets the non-blocking mode of the native acceptor implementation.          bool native_non_blocking() const;            This function is used to retrieve the non-blocking mode of the underlying            native acceptor. This mode has no effect on the behaviour of the acceptor            object's synchronous operations.                      Return            Value                      true if the underlying acceptor            is in non-blocking mode and direct system calls may fail with boost::asio::error::would_block (or the equivalent system            error).                      Remarks                      The current non-blocking mode is cached by the acceptor object. Consequently,            the return value may be incorrect if the non-blocking mode was set directly            on the native acceptor.          Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/native_non_blocking/overload1.html
basic_socket_acceptor::acceptbasic_socket_acceptor::acceptHomeLibrariesPeopleFAQMorebasic_socket_acceptor::accept           Accept          a new connection.        template&lt;    typename Protocol1,    typename Executor1&gt;void accept(    basic_socket&lt; Protocol1, Executor1 &gt; &amp; peer,    typename constraint&lt; is_convertible&lt; Protocol, Protocol1 &gt;::value &gt;::type  = 0);  » more...template&lt;    typename Protocol1,    typename Executor1&gt;void accept(    basic_socket&lt; Protocol1, Executor1 &gt; &amp; peer,    boost::system::error_code &amp; ec,    typename constraint&lt; is_convertible&lt; Protocol, Protocol1 &gt;::value &gt;::type  = 0);  » more...          Accept a new connection and obtain the endpoint of the peer.        template&lt;    typename Executor1&gt;void accept(    basic_socket&lt; protocol_type, Executor1 &gt; &amp; peer,    endpoint_type &amp; peer_endpoint);  » more...template&lt;    typename Executor1&gt;void accept(    basic_socket&lt; protocol_type, Executor1 &gt; &amp; peer,    endpoint_type &amp; peer_endpoint,    boost::system::error_code &amp; ec);  » more...Protocol::socket::template rebind_executor&lt; executor_type &gt;::other accept();  » more...Protocol::socket::template rebind_executor&lt; executor_type &gt;::other accept(    boost::system::error_code &amp; ec);  » more...template&lt;    typename Executor1&gt;Protocol::socket::template rebind_executor&lt; Executor1 &gt;::other accept(    const Executor1 &amp; ex,    typename constraint&lt; is_executor&lt; Executor1 &gt;::value||execution::is_executor&lt; Executor1 &gt;::value &gt;::type  = 0);  » more...template&lt;    typename ExecutionContext&gt;Protocol::socket::template rebind_executor&lt; typename ExecutionContext::executor_type &gt;::other accept(    ExecutionContext &amp; context,    typename constraint&lt; is_convertible&lt; ExecutionContext &amp;, execution_context &amp; &gt;::value &gt;::type  = 0);  » more...template&lt;    typename Executor1&gt;Protocol::socket::template rebind_executor&lt; Executor1 &gt;::other accept(    const Executor1 &amp; ex,    boost::system::error_code &amp; ec,    typename constraint&lt; is_executor&lt; Executor1 &gt;::value||execution::is_executor&lt; Executor1 &gt;::value &gt;::type  = 0);  » more...template&lt;    typename ExecutionContext&gt;Protocol::socket::template rebind_executor&lt; typename ExecutionContext::executor_type &gt;::other accept(    ExecutionContext &amp; context,    boost::system::error_code &amp; ec,    typename constraint&lt; is_convertible&lt; ExecutionContext &amp;, execution_context &amp; &gt;::value &gt;::type  = 0);  » more...Protocol::socket::template rebind_executor&lt; executor_type &gt;::other accept(    endpoint_type &amp; peer_endpoint);  » more...Protocol::socket::template rebind_executor&lt; executor_type &gt;::other accept(    endpoint_type &amp; peer_endpoint,    boost::system::error_code &amp; ec);  » more...template&lt;    typename Executor1&gt;Protocol::socket::template rebind_executor&lt; Executor1 &gt;::other accept(    const Executor1 &amp; ex,    endpoint_type &amp; peer_endpoint,    typename constraint&lt; is_executor&lt; Executor1 &gt;::value||execution::is_executor&lt; Executor1 &gt;::value &gt;::type  = 0);  » more...template&lt;    typename ExecutionContext&gt;Protocol::socket::template rebind_executor&lt; typename ExecutionContext::executor_type &gt;::other accept(    ExecutionContext &amp; context,    endpoint_type &amp; peer_endpoint,    typename constraint&lt; is_convertible&lt; ExecutionContext &amp;, execution_context &amp; &gt;::value &gt;::type  = 0);  » more...template&lt;    typename Executor1&gt;Protocol::socket::template rebind_executor&lt; Executor1 &gt;::other accept(    const executor_type &amp; ex,    endpoint_type &amp; peer_endpoint,    boost::system::error_code &amp; ec,    typename constraint&lt; is_executor&lt; Executor1 &gt;::value||execution::is_executor&lt; Executor1 &gt;::value &gt;::type  = 0);  » more...template&lt;    typename ExecutionContext&gt;Protocol::socket::template rebind_executor&lt; typename ExecutionContext::executor_type &gt;::other accept(    ExecutionContext &amp; context,    endpoint_type &amp; peer_endpoint,    boost::system::error_code &amp; ec,    typename constraint&lt; is_convertible&lt; ExecutionContext &amp;, execution_context &amp; &gt;::value &gt;::type  = 0);  » more...Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/accept.html
basic_socket_acceptor::assignbasic_socket_acceptor::assignHomeLibrariesPeopleFAQMorebasic_socket_acceptor::assign           Assigns          an existing native acceptor to the acceptor.        void assign(    const protocol_type &amp; protocol,    const native_handle_type &amp; native_acceptor);  » more...void assign(    const protocol_type &amp; protocol,    const native_handle_type &amp; native_acceptor,    boost::system::error_code &amp; ec);  » more...Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/assign.html
basic_socket_acceptor::out_of_band_inlinebasic_socket_acceptor::out_of_band_inlineHomeLibrariesPeopleFAQMorebasic_socket_acceptor::out_of_band_inline          Inherited from socket_base.                   Socket          option for putting received out-of-band data inline.        typedef implementation_defined out_of_band_inline;          Implements the SOL_SOCKET/SO_OOBINLINE socket option.                  Examples                  Setting the option:        boost::asio::ip::tcp::socket socket(my_context);...boost::asio::socket_base::out_of_band_inline option(true);socket.set_option(option);          Getting the current option value:        boost::asio::ip::tcp::socket socket(my_context);...boost::asio::socket_base::out_of_band_inline option;socket.get_option(option);bool value = option.value();          Requirements                  Header: boost/asio/basic_socket_acceptor.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/out_of_band_inline.html
basic_socket_acceptor::endpoint_typebasic_socket_acceptor::endpoint_typeHomeLibrariesPeopleFAQMorebasic_socket_acceptor::endpoint_type           The          endpoint type.        typedef Protocol::endpoint endpoint_type;          Requirements                  Header: boost/asio/basic_socket_acceptor.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/endpoint_type.html
basic_socket_acceptor::message_do_not_routebasic_socket_acceptor::message_do_not_routeHomeLibrariesPeopleFAQMorebasic_socket_acceptor::message_do_not_route          Inherited from socket_base.                   Specify          that the data should not be subject to routing.        static const int message_do_not_route = implementation_defined;Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/message_do_not_route.html
basic_socket_acceptor::releasebasic_socket_acceptor::releaseHomeLibrariesPeopleFAQMorebasic_socket_acceptor::release           Release          ownership of the underlying native acceptor.        native_handle_type release();  » more...native_handle_type release(    boost::system::error_code &amp; ec);  » more...Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/release.html
basic_socket_acceptor::local_endpointbasic_socket_acceptor::local_endpointHomeLibrariesPeopleFAQMorebasic_socket_acceptor::local_endpoint           Get          the local endpoint of the acceptor.        endpoint_type local_endpoint() const;  » more...endpoint_type local_endpoint(    boost::system::error_code &amp; ec) const;  » more...Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/local_endpoint.html
basic_socket_acceptor::~basic_socket_acceptorbasic_socket_acceptor::~basic_socket_acceptorHomeLibrariesPeopleFAQMorebasic_socket_acceptor::~basic_socket_acceptor           Destroys          the acceptor.        ~basic_socket_acceptor();          This function destroys the acceptor, cancelling any outstanding asynchronous          operations associated with the acceptor as if by calling cancel.        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/_basic_socket_acceptor.html
basic_socket_acceptor::receive_low_watermarkbasic_socket_acceptor::receive_low_watermarkHomeLibrariesPeopleFAQMorebasic_socket_acceptor::receive_low_watermark          Inherited from socket_base.                   Socket          option for the receive low watermark.        typedef implementation_defined receive_low_watermark;          Implements the SOL_SOCKET/SO_RCVLOWAT socket option.                  Examples                  Setting the option:        boost::asio::ip::tcp::socket socket(my_context);...boost::asio::socket_base::receive_low_watermark option(1024);socket.set_option(option);          Getting the current option value:        boost::asio::ip::tcp::socket socket(my_context);...boost::asio::socket_base::receive_low_watermark option;socket.get_option(option);int size = option.value();          Requirements                  Header: boost/asio/basic_socket_acceptor.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/receive_low_watermark.html
basic_socket_acceptor::listen (2 of 2 overloads)basic_socket_acceptor::listen (2 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::listen          (2 of 2 overloads)            Place the acceptor into the state where it will listen for new connections.          void listen(    int backlog,    boost::system::error_code &amp; ec);            This function puts the socket acceptor into the state where it may accept            new connections.                      Parameters          backlog                  The maximum length of the queue of pending connections.                ec                  Set to indicate what error occurred, if any.                            Example          boost::asio::ip::tcp::acceptor acceptor(my_context);...boost::system::error_code ec;acceptor.listen(boost::asio::socket_base::max_listen_connections, ec);if (ec){  // An error occurred.}Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/listen/overload2.html
basic_socket_acceptor::listen (1 of 2 overloads)basic_socket_acceptor::listen (1 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::listen          (1 of 2 overloads)            Place the acceptor into the state where it will listen for new connections.          void listen(    int backlog = socket_base::max_listen_connections);            This function puts the socket acceptor into the state where it may accept            new connections.                      Parameters          backlog                  The maximum length of the queue of pending connections.                            Exceptions          boost::system::system_error                  Thrown on failure.                Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/listen/overload1.html
basic_socket_acceptor::get_option (2 of 2 overloads)basic_socket_acceptor::get_option (2 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::get_option          (2 of 2 overloads)            Get an option from the acceptor.          template&lt;    typename GettableSocketOption&gt;void get_option(    GettableSocketOption &amp; option,    boost::system::error_code &amp; ec) const;            This function is used to get the current value of an option on the acceptor.                      Parameters          option                  The option value to be obtained from the acceptor.                ec                  Set to indicate what error occurred, if any.                            Example                      Getting the value of the SOL_SOCKET/SO_REUSEADDR option:          boost::asio::ip::tcp::acceptor acceptor(my_context);...boost::asio::ip::tcp::acceptor::reuse_address option;boost::system::error_code ec;acceptor.get_option(option, ec);if (ec){  // An error occurred.}bool is_set = option.get();Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/get_option/overload2.html
basic_socket_acceptor::get_option (1 of 2 overloads)basic_socket_acceptor::get_option (1 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::get_option          (1 of 2 overloads)            Get an option from the acceptor.          template&lt;    typename GettableSocketOption&gt;void get_option(    GettableSocketOption &amp; option) const;            This function is used to get the current value of an option on the acceptor.                      Parameters          option                  The option value to be obtained from the acceptor.                            Exceptions          boost::system::system_error                  Thrown on failure.                            Example                      Getting the value of the SOL_SOCKET/SO_REUSEADDR option:          boost::asio::ip::tcp::acceptor acceptor(my_context);...boost::asio::ip::tcp::acceptor::reuse_address option;acceptor.get_option(option);bool is_set = option.get();Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/get_option/overload1.html
basic_socket_acceptor::debugbasic_socket_acceptor::debugHomeLibrariesPeopleFAQMorebasic_socket_acceptor::debug          Inherited from socket_base.                   Socket          option to enable socket-level debugging.        typedef implementation_defined debug;          Implements the SOL_SOCKET/SO_DEBUG socket option.                  Examples                  Setting the option:        boost::asio::ip::tcp::socket socket(my_context);...boost::asio::socket_base::debug option(true);socket.set_option(option);          Getting the current option value:        boost::asio::ip::tcp::socket socket(my_context);...boost::asio::socket_base::debug option;socket.get_option(option);bool is_set = option.value();          Requirements                  Header: boost/asio/basic_socket_acceptor.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/debug.html
basic_socket_acceptor::wait_typebasic_socket_acceptor::wait_typeHomeLibrariesPeopleFAQMorebasic_socket_acceptor::wait_type          Inherited from socket_base.                   Wait          types.        enum wait_type                              Values        wait_read                Wait for a socket to become ready to read.              wait_write                Wait for a socket to become ready to write.              wait_error                Wait for a socket to have error conditions pending.                        For use with basic_socket::wait() and basic_socket::async_wait().        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/wait_type.html
basic_socket_acceptor::lingerbasic_socket_acceptor::lingerHomeLibrariesPeopleFAQMorebasic_socket_acceptor::linger          Inherited from socket_base.                   Socket          option to specify whether the socket lingers on close if unsent data is          present.        typedef implementation_defined linger;          Implements the SOL_SOCKET/SO_LINGER socket option.                  Examples                  Setting the option:        boost::asio::ip::tcp::socket socket(my_context);...boost::asio::socket_base::linger option(true, 30);socket.set_option(option);          Getting the current option value:        boost::asio::ip::tcp::socket socket(my_context);...boost::asio::socket_base::linger option;socket.get_option(option);bool is_set = option.enabled();unsigned short timeout = option.timeout();          Requirements                  Header: boost/asio/basic_socket_acceptor.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/linger.html
basic_socket_acceptor::receive_buffer_sizebasic_socket_acceptor::receive_buffer_sizeHomeLibrariesPeopleFAQMorebasic_socket_acceptor::receive_buffer_size          Inherited from socket_base.                   Socket          option for the receive buffer size of a socket.        typedef implementation_defined receive_buffer_size;          Implements the SOL_SOCKET/SO_RCVBUF socket option.                  Examples                  Setting the option:        boost::asio::ip::tcp::socket socket(my_context);...boost::asio::socket_base::receive_buffer_size option(8192);socket.set_option(option);          Getting the current option value:        boost::asio::ip::tcp::socket socket(my_context);...boost::asio::socket_base::receive_buffer_size option;socket.get_option(option);int size = option.value();          Requirements                  Header: boost/asio/basic_socket_acceptor.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/receive_buffer_size.html
basic_socket_acceptor::reuse_addressbasic_socket_acceptor::reuse_addressHomeLibrariesPeopleFAQMorebasic_socket_acceptor::reuse_address          Inherited from socket_base.                   Socket          option to allow the socket to be bound to an address that is already in          use.        typedef implementation_defined reuse_address;          Implements the SOL_SOCKET/SO_REUSEADDR socket option.                  Examples                  Setting the option:        boost::asio::ip::tcp::acceptor acceptor(my_context);...boost::asio::socket_base::reuse_address option(true);acceptor.set_option(option);          Getting the current option value:        boost::asio::ip::tcp::acceptor acceptor(my_context);...boost::asio::socket_base::reuse_address option;acceptor.get_option(option);bool is_set = option.value();          Requirements                  Header: boost/asio/basic_socket_acceptor.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/reuse_address.html
basic_socket_acceptor::open (2 of 2 overloads)basic_socket_acceptor::open (2 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::open          (2 of 2 overloads)            Open the acceptor using the specified protocol.          void open(    const protocol_type &amp; protocol,    boost::system::error_code &amp; ec);            This function opens the socket acceptor so that it will use the specified            protocol.                      Parameters          protocol                  An object specifying which protocol is to be used.                ec                  Set to indicate what error occurred, if any.                            Example          boost::asio::ip::tcp::acceptor acceptor(my_context);boost::system::error_code ec;acceptor.open(boost::asio::ip::tcp::v4(), ec);if (ec){  // An error occurred.}Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/open/overload2.html
basic_socket_acceptor::open (1 of 2 overloads)basic_socket_acceptor::open (1 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::open          (1 of 2 overloads)            Open the acceptor using the specified protocol.          void open(    const protocol_type &amp; protocol = protocol_type());            This function opens the socket acceptor so that it will use the specified            protocol.                      Parameters          protocol                  An object specifying which protocol is to be used.                            Exceptions          boost::system::system_error                  Thrown on failure.                            Example          boost::asio::ip::tcp::acceptor acceptor(my_context);acceptor.open(boost::asio::ip::tcp::v4());Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/open/overload1.html
basic_socket_acceptor::operator=basic_socket_acceptor::operator=HomeLibrariesPeopleFAQMorebasic_socket_acceptor::operator=           Move-assign          a basic_socket_acceptor from another.        basic_socket_acceptor &amp; operator=(    basic_socket_acceptor &amp;&amp; other);  » more...          Move-assign a basic_socket_acceptor from an          acceptor of another protocol type.        template&lt;    typename Protocol1,    typename Executor1&gt;constraint&lt; is_convertible&lt; Protocol1, Protocol &gt;::value &amp;&amp;is_convertible&lt; Executor1, Executor &gt;::value, basic_socket_acceptor &amp; &gt;::type operator=(    basic_socket_acceptor&lt; Protocol1, Executor1 &gt; &amp;&amp; other);  » more...Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/operator_eq_.html
basic_socket_acceptor::openbasic_socket_acceptor::openHomeLibrariesPeopleFAQMorebasic_socket_acceptor::open           Open          the acceptor using the specified protocol.        void open(    const protocol_type &amp; protocol = protocol_type());  » more...void open(    const protocol_type &amp; protocol,    boost::system::error_code &amp; ec);  » more...Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/open.html
basic_socket_acceptor::get_executorbasic_socket_acceptor::get_executorHomeLibrariesPeopleFAQMorebasic_socket_acceptor::get_executor           Get          the executor associated with the object.        executor_type get_executor();Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/get_executor.html
basic_socket_acceptor::closebasic_socket_acceptor::closeHomeLibrariesPeopleFAQMorebasic_socket_acceptor::close           Close          the acceptor.        void close();  » more...void close(    boost::system::error_code &amp; ec);  » more...Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/close.html
basic_socket_acceptor::bind (2 of 2 overloads)basic_socket_acceptor::bind (2 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::bind          (2 of 2 overloads)            Bind the acceptor to the given local endpoint.          void bind(    const endpoint_type &amp; endpoint,    boost::system::error_code &amp; ec);            This function binds the socket acceptor to the specified endpoint on            the local machine.                      Parameters          endpoint                  An endpoint on the local machine to which the socket acceptor will                  be bound.                ec                  Set to indicate what error occurred, if any.                            Example          boost::asio::ip::tcp::acceptor acceptor(my_context);boost::asio::ip::tcp::endpoint endpoint(boost::asio::ip::tcp::v4(), 12345);acceptor.open(endpoint.protocol());boost::system::error_code ec;acceptor.bind(endpoint, ec);if (ec){  // An error occurred.}Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/bind/overload2.html
basic_socket_acceptor::bind (1 of 2 overloads)basic_socket_acceptor::bind (1 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::bind          (1 of 2 overloads)            Bind the acceptor to the given local endpoint.          void bind(    const endpoint_type &amp; endpoint);            This function binds the socket acceptor to the specified endpoint on            the local machine.                      Parameters          endpoint                  An endpoint on the local machine to which the socket acceptor will                  be bound.                            Exceptions          boost::system::system_error                  Thrown on failure.                            Example          boost::asio::ip::tcp::acceptor acceptor(my_context);boost::asio::ip::tcp::endpoint endpoint(boost::asio::ip::tcp::v4(), 12345);acceptor.open(endpoint.protocol());acceptor.bind(endpoint);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/bind/overload1.html
basic_socket_acceptor::message_flagsbasic_socket_acceptor::message_flagsHomeLibrariesPeopleFAQMorebasic_socket_acceptor::message_flags          Inherited from socket_base.                   Bitmask          type for flags that can be passed to send and receive operations.        typedef int message_flags;          Requirements                  Header: boost/asio/basic_socket_acceptor.hpp                  Convenience header: boost/asio.hpp        Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/message_flags.html
basic_socket_acceptor::waitbasic_socket_acceptor::waitHomeLibrariesPeopleFAQMorebasic_socket_acceptor::wait           Wait          for the acceptor to become ready to read, ready to write, or to have pending          error conditions.        void wait(    wait_type w);  » more...void wait(    wait_type w,    boost::system::error_code &amp; ec);  » more...Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/wait.html
basic_socket_acceptor::max_listen_connectionsbasic_socket_acceptor::max_listen_connectionsHomeLibrariesPeopleFAQMorebasic_socket_acceptor::max_listen_connections          Inherited from socket_base.                   The          maximum length of the queue of pending incoming connections.        static const int max_listen_connections = implementation_defined;Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/max_listen_connections.html
basic_socket_acceptor::message_peekbasic_socket_acceptor::message_peekHomeLibrariesPeopleFAQMorebasic_socket_acceptor::message_peek          Inherited from socket_base.                   Peek          at incoming data without removing it from the input queue.        static const int message_peek = implementation_defined;Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/message_peek.html
basic_socket_acceptor::set_option (2 of 2 overloads)basic_socket_acceptor::set_option (2 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::set_option          (2 of 2 overloads)            Set an option on the acceptor.          template&lt;    typename SettableSocketOption&gt;void set_option(    const SettableSocketOption &amp; option,    boost::system::error_code &amp; ec);            This function is used to set an option on the acceptor.                      Parameters          option                  The new option value to be set on the acceptor.                ec                  Set to indicate what error occurred, if any.                            Example                      Setting the SOL_SOCKET/SO_REUSEADDR option:          boost::asio::ip::tcp::acceptor acceptor(my_context);...boost::asio::ip::tcp::acceptor::reuse_address option(true);boost::system::error_code ec;acceptor.set_option(option, ec);if (ec){  // An error occurred.}Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/set_option/overload2.html
basic_socket_acceptor::set_option (1 of 2 overloads)basic_socket_acceptor::set_option (1 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket_acceptor::set_option          (1 of 2 overloads)            Set an option on the acceptor.          template&lt;    typename SettableSocketOption&gt;void set_option(    const SettableSocketOption &amp; option);            This function is used to set an option on the acceptor.                      Parameters          option                  The new option value to be set on the acceptor.                            Exceptions          boost::system::system_error                  Thrown on failure.                            Example                      Setting the SOL_SOCKET/SO_REUSEADDR option:          boost::asio::ip::tcp::acceptor acceptor(my_context);...boost::asio::ip::tcp::acceptor::reuse_address option(true);acceptor.set_option(option);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/set_option/overload1.html
basic_socket_acceptor::cancelbasic_socket_acceptor::cancelHomeLibrariesPeopleFAQMorebasic_socket_acceptor::cancel           Cancel          all asynchronous operations associated with the acceptor.        void cancel();  » more...void cancel(    boost::system::error_code &amp; ec);  » more...Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_socket_acceptor/cancel.html
ssl::verify_contextssl::verify_contextHomeLibrariesPeopleFAQMoressl::verify_context                      A simple wrapper around the X509_STORE_CTX type, used during verification        of a peer certificate.      class verify_context :  noncopyable        Types                                        Name                                                                Description                                                                native_handle_type                                                                The native handle type of the verification context.                                      Member        Functions                                        Name                                                                Description                                                                native_handle                                                                Get the underlying implementation in the native type.                                                                verify_context [constructor]                                                                Constructor.                                      Remarks              The ssl::verify_context        does not own the underlying X509_STORE_CTX object.              Requirements              Header: boost/asio/ssl/verify_context.hpp              Convenience header: boost/asio/ssl.hpp      Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/ssl__verify_context.html
basic_writable_pipebasic_writable_pipeHomeLibrariesPeopleFAQMorebasic_writable_pipe                      Provides pipe functionality.      template&lt;    typename Executor = any_io_executor&gt;class basic_writable_pipe        Types                                        Name                                                                Description                                                                rebind_executor                                                                Rebinds the pipe type to another executor.                                                                executor_type                                                                The type of the executor associated with the object.                                                                lowest_layer_type                                                                A basic_writable_pipe is always the lowest layer.                                                                native_handle_type                                                                The native representation of a pipe.                                      Member        Functions                                        Name                                                                Description                                                                assign                                                                Assign an existing native pipe to the pipe.                                                                async_write_some                                                                Start an asynchronous write.                                                                basic_writable_pipe [constructor]                                                                Construct a basic_writable_pipe without opening it.   —                  Construct a basic_writable_pipe on an existing native pipe.                    — Move-construct a basic_writable_pipe from another.                                                                cancel                                                                Cancel all asynchronous operations associated with the pipe.                                                                close                                                                Close the pipe.                                                                get_executor                                                                Get the executor associated with the object.                                                                is_open                                                                Determine whether the pipe is open.                                                                lowest_layer                                                                Get a reference to the lowest layer.   — Get a const                  reference to the lowest layer.                                                                native_handle                                                                Get the native pipe representation.                                                                operator=                                                                Move-assign a basic_writable_pipe from another.                                                                write_some                                                                Write some data to the pipe.                                                                ~basic_writable_pipe [destructor]                                                                Destroys the pipe.                                      The basic_writable_pipe class provides        a wrapper over pipe functionality.              Thread Safety              Distinct objects: Safe.              Shared objects: Unsafe.              Requirements              Header: boost/asio/basic_writable_pipe.hpp              Convenience header: boost/asio.hpp      Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/basic_writable_pipe.html
execution::context_asexecution::context_asHomeLibrariesPeopleFAQMoreexecution::context_as                      A special value used for accessing the execution::context_as_t property.      template &lt;typename U&gt;constexpr context_as_t context_as;        Requirements              Header: boost/asio/execution/context_as.hpp              Convenience header: boost/asio/execution.hpp      Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/execution__context_as.html
system_contextsystem_contextHomeLibrariesPeopleFAQMoresystem_context                      The executor context for the system executor.      class system_context :  public execution_context        Types                                        Name                                                                Description                                                                executor_type                                                                The executor type associated with the context.                                                                fork_event                                                                Fork-related event notifications.                                      Member Functions                                        Name                                                                Description                                                                get_executor                                                                Obtain an executor for the context.                                                                join                                                                Join all threads in the system thread pool.                                                                notify_fork                                                                Notify the execution_context of a fork-related event.                                                                stop                                                                Signal all threads in the system thread pool to stop.                                                                stopped                                                                Determine whether the system thread pool has been stopped.                                                                ~system_context [destructor]                                                                Destructor shuts down all threads in the system thread pool.                                      Protected        Member Functions                                        Name                                                                Description                                                                destroy                                                                Destroys all services in the context.                                                                shutdown                                                                Shuts down all services in the context.                                      Friends                                        Name                                                                Description                                                                add_service                                                                (Deprecated: Use make_service().) Add a service object to the execution_context.                                                                has_service                                                                Determine if an execution_context contains a specified service                  type.                                                                make_service                                                                Creates a service object and adds it to the execution_context.                                                                use_service                                                                Obtain the service object corresponding to the given type.                                      Requirements              Header: boost/asio/system_context.hpp              Convenience header: boost/asio.hpp      Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/system_context.html
redirect_error_t::token_redirect_error_t::token_HomeLibrariesPeopleFAQMoreredirect_error_t::token_                  CompletionToken token_;Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/redirect_error_t/token_.html
redirect_error_t::redirect_error_tredirect_error_t::redirect_error_tHomeLibrariesPeopleFAQMoreredirect_error_t::redirect_error_t           Constructor.        template&lt;    typename T&gt;redirect_error_t(    T &amp;&amp; completion_token,    boost::system::error_code &amp; ec);Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/redirect_error_t/redirect_error_t.html
redirect_error_t::ec_redirect_error_t::ec_HomeLibrariesPeopleFAQMoreredirect_error_t::ec_                  boost::system::error_code &amp; ec_;Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/redirect_error_t/ec_.html
Move accept handler requirementsMove accept handler requirementsHomeLibrariesPeopleFAQMoreMove accept handler      requirements        A move accept handler must meet the requirements for a handler.        A value h of a move accept        handler class should work correctly in the expression h(ec,        s),        where ec is an lvalue of        type const error_code        and s is an lvalue of the        nested type Protocol::socket for the type Protocol        of the socket class template.      Copyright © 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/reference/MoveAcceptHandler.html
allocator_binderallocator_binderHomeLibrariesPeopleFAQMoreallocator_binder                      A call wrapper type to bind an allocator of type Allocator        to an object of type T.      template&lt;    typename T,    typename Allocator&gt;class allocator_binder        Types                                        Name                                                                Description                                                                allocator_type                                                                The type of the associated allocator.                                                                argument_type                                                                The type of the function's argument.                                                                first_argument_type                                                                The type of the function's first argument.                                                                result_type                                                                The return type if a function.                                                                second_argument_type                                                                The type of the function's second argument.                                                                target_type                                                                The type of the target object.                                      Member Functions                                        Name                                                                Description                                                                allocator_binder [constructor]                                                                Construct an allocator wrapper for the specified object.                    — Copy constructor.   — Construct a copy, but specify                  a different allocator.   — Construct a copy of a different                  allocator wrapper type.   — Construct a copy of a different                  allocator wrapper type, but specify a different allocator.                    — Move constructor.   — Move construct the target                  object, but specify a different allocator.   — Move construct                  from a different allocator wrapper type.   — Move construct                  from a different allocator wrapper type, but specify a different                  allocator.                                                                get                              